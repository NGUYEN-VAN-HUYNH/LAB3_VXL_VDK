
LAB3_VXL_VDK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a30  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002b3c  08002b3c  00012b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b60  08002b60  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  08002b60  08002b60  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b60  08002b60  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b60  08002b60  00012b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b64  08002b64  00012b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08002b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000044  08002bac  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002bac  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009baf  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c83  00000000  00000000  00029c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002b8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002c328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171cd  00000000  00000000  0002cc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c733  00000000  00000000  00043e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008283c  00000000  00000000  00050598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2dd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028fc  00000000  00000000  000d2e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000044 	.word	0x20000044
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b24 	.word	0x08002b24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000048 	.word	0x20000048
 8000148:	08002b24 	.word	0x08002b24

0800014c <display7SEG_East_West>:
 *  Created on: Oct 25, 2024
 *      Author: Admin
 */
#include "7_Segment.h"
#include "main.h"
void display7SEG_East_West(int num) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    // ban dau tat led 7 doan
    HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_SET);
 8000154:	2201      	movs	r2, #1
 8000156:	2101      	movs	r1, #1
 8000158:	489f      	ldr	r0, [pc, #636]	; (80003d8 <display7SEG_East_West+0x28c>)
 800015a:	f001 fcce 	bl	8001afa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_SET);
 800015e:	2201      	movs	r2, #1
 8000160:	2102      	movs	r1, #2
 8000162:	489d      	ldr	r0, [pc, #628]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000164:	f001 fcc9 	bl	8001afa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	2104      	movs	r1, #4
 800016c:	489a      	ldr	r0, [pc, #616]	; (80003d8 <display7SEG_East_West+0x28c>)
 800016e:	f001 fcc4 	bl	8001afa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_SET);
 8000172:	2201      	movs	r2, #1
 8000174:	2108      	movs	r1, #8
 8000176:	4898      	ldr	r0, [pc, #608]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000178:	f001 fcbf 	bl	8001afa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, SEG_E, GPIO_PIN_SET);
 800017c:	2201      	movs	r2, #1
 800017e:	2110      	movs	r1, #16
 8000180:	4895      	ldr	r0, [pc, #596]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000182:	f001 fcba 	bl	8001afa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_SET);
 8000186:	2201      	movs	r2, #1
 8000188:	2120      	movs	r1, #32
 800018a:	4893      	ldr	r0, [pc, #588]	; (80003d8 <display7SEG_East_West+0x28c>)
 800018c:	f001 fcb5 	bl	8001afa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_SET);
 8000190:	2201      	movs	r2, #1
 8000192:	2140      	movs	r1, #64	; 0x40
 8000194:	4890      	ldr	r0, [pc, #576]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000196:	f001 fcb0 	bl	8001afa <HAL_GPIO_WritePin>
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b09      	cmp	r3, #9
 800019e:	f200 8116 	bhi.w	80003ce <display7SEG_East_West+0x282>
 80001a2:	a201      	add	r2, pc, #4	; (adr r2, 80001a8 <display7SEG_East_West+0x5c>)
 80001a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001a8:	080001d1 	.word	0x080001d1
 80001ac:	0800020f 	.word	0x0800020f
 80001b0:	08000225 	.word	0x08000225
 80001b4:	08000259 	.word	0x08000259
 80001b8:	0800028d 	.word	0x0800028d
 80001bc:	080002b7 	.word	0x080002b7
 80001c0:	080002eb 	.word	0x080002eb
 80001c4:	08000329 	.word	0x08000329
 80001c8:	08000349 	.word	0x08000349
 80001cc:	08000391 	.word	0x08000391

    // dieu khien led 7 doan
    switch (num) {
        case 0:
            HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2101      	movs	r1, #1
 80001d4:	4880      	ldr	r0, [pc, #512]	; (80003d8 <display7SEG_East_West+0x28c>)
 80001d6:	f001 fc90 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 80001da:	2200      	movs	r2, #0
 80001dc:	2102      	movs	r1, #2
 80001de:	487e      	ldr	r0, [pc, #504]	; (80003d8 <display7SEG_East_West+0x28c>)
 80001e0:	f001 fc8b 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2104      	movs	r1, #4
 80001e8:	487b      	ldr	r0, [pc, #492]	; (80003d8 <display7SEG_East_West+0x28c>)
 80001ea:	f001 fc86 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 80001ee:	2200      	movs	r2, #0
 80001f0:	2108      	movs	r1, #8
 80001f2:	4879      	ldr	r0, [pc, #484]	; (80003d8 <display7SEG_East_West+0x28c>)
 80001f4:	f001 fc81 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_E, GPIO_PIN_RESET);
 80001f8:	2200      	movs	r2, #0
 80001fa:	2110      	movs	r1, #16
 80001fc:	4876      	ldr	r0, [pc, #472]	; (80003d8 <display7SEG_East_West+0x28c>)
 80001fe:	f001 fc7c 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_RESET);
 8000202:	2200      	movs	r2, #0
 8000204:	2120      	movs	r1, #32
 8000206:	4874      	ldr	r0, [pc, #464]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000208:	f001 fc77 	bl	8001afa <HAL_GPIO_WritePin>
            break;
 800020c:	e0e0      	b.n	80003d0 <display7SEG_East_West+0x284>
        case 1:
            HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	2102      	movs	r1, #2
 8000212:	4871      	ldr	r0, [pc, #452]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000214:	f001 fc71 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 8000218:	2200      	movs	r2, #0
 800021a:	2104      	movs	r1, #4
 800021c:	486e      	ldr	r0, [pc, #440]	; (80003d8 <display7SEG_East_West+0x28c>)
 800021e:	f001 fc6c 	bl	8001afa <HAL_GPIO_WritePin>
            break;
 8000222:	e0d5      	b.n	80003d0 <display7SEG_East_West+0x284>
        case 2:
            HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 8000224:	2200      	movs	r2, #0
 8000226:	2101      	movs	r1, #1
 8000228:	486b      	ldr	r0, [pc, #428]	; (80003d8 <display7SEG_East_West+0x28c>)
 800022a:	f001 fc66 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 800022e:	2200      	movs	r2, #0
 8000230:	2102      	movs	r1, #2
 8000232:	4869      	ldr	r0, [pc, #420]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000234:	f001 fc61 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	2108      	movs	r1, #8
 800023c:	4866      	ldr	r0, [pc, #408]	; (80003d8 <display7SEG_East_West+0x28c>)
 800023e:	f001 fc5c 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_E, GPIO_PIN_RESET);
 8000242:	2200      	movs	r2, #0
 8000244:	2110      	movs	r1, #16
 8000246:	4864      	ldr	r0, [pc, #400]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000248:	f001 fc57 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 800024c:	2200      	movs	r2, #0
 800024e:	2140      	movs	r1, #64	; 0x40
 8000250:	4861      	ldr	r0, [pc, #388]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000252:	f001 fc52 	bl	8001afa <HAL_GPIO_WritePin>
            break;
 8000256:	e0bb      	b.n	80003d0 <display7SEG_East_West+0x284>
        case 3:
            HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	2101      	movs	r1, #1
 800025c:	485e      	ldr	r0, [pc, #376]	; (80003d8 <display7SEG_East_West+0x28c>)
 800025e:	f001 fc4c 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	2102      	movs	r1, #2
 8000266:	485c      	ldr	r0, [pc, #368]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000268:	f001 fc47 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 800026c:	2200      	movs	r2, #0
 800026e:	2104      	movs	r1, #4
 8000270:	4859      	ldr	r0, [pc, #356]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000272:	f001 fc42 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	2108      	movs	r1, #8
 800027a:	4857      	ldr	r0, [pc, #348]	; (80003d8 <display7SEG_East_West+0x28c>)
 800027c:	f001 fc3d 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	2140      	movs	r1, #64	; 0x40
 8000284:	4854      	ldr	r0, [pc, #336]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000286:	f001 fc38 	bl	8001afa <HAL_GPIO_WritePin>
            break;
 800028a:	e0a1      	b.n	80003d0 <display7SEG_East_West+0x284>
        case 4:
            HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 800028c:	2200      	movs	r2, #0
 800028e:	2102      	movs	r1, #2
 8000290:	4851      	ldr	r0, [pc, #324]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000292:	f001 fc32 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 8000296:	2200      	movs	r2, #0
 8000298:	2104      	movs	r1, #4
 800029a:	484f      	ldr	r0, [pc, #316]	; (80003d8 <display7SEG_East_West+0x28c>)
 800029c:	f001 fc2d 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2120      	movs	r1, #32
 80002a4:	484c      	ldr	r0, [pc, #304]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002a6:	f001 fc28 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 80002aa:	2200      	movs	r2, #0
 80002ac:	2140      	movs	r1, #64	; 0x40
 80002ae:	484a      	ldr	r0, [pc, #296]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002b0:	f001 fc23 	bl	8001afa <HAL_GPIO_WritePin>
            break;
 80002b4:	e08c      	b.n	80003d0 <display7SEG_East_West+0x284>
        case 5:
            HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2101      	movs	r1, #1
 80002ba:	4847      	ldr	r0, [pc, #284]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002bc:	f001 fc1d 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2104      	movs	r1, #4
 80002c4:	4844      	ldr	r0, [pc, #272]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002c6:	f001 fc18 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2108      	movs	r1, #8
 80002ce:	4842      	ldr	r0, [pc, #264]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002d0:	f001 fc13 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2120      	movs	r1, #32
 80002d8:	483f      	ldr	r0, [pc, #252]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002da:	f001 fc0e 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2140      	movs	r1, #64	; 0x40
 80002e2:	483d      	ldr	r0, [pc, #244]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002e4:	f001 fc09 	bl	8001afa <HAL_GPIO_WritePin>
            break;
 80002e8:	e072      	b.n	80003d0 <display7SEG_East_West+0x284>
        case 6:
            HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2101      	movs	r1, #1
 80002ee:	483a      	ldr	r0, [pc, #232]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002f0:	f001 fc03 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2104      	movs	r1, #4
 80002f8:	4837      	ldr	r0, [pc, #220]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002fa:	f001 fbfe 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 80002fe:	2200      	movs	r2, #0
 8000300:	2108      	movs	r1, #8
 8000302:	4835      	ldr	r0, [pc, #212]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000304:	f001 fbf9 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_E, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2110      	movs	r1, #16
 800030c:	4832      	ldr	r0, [pc, #200]	; (80003d8 <display7SEG_East_West+0x28c>)
 800030e:	f001 fbf4 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2120      	movs	r1, #32
 8000316:	4830      	ldr	r0, [pc, #192]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000318:	f001 fbef 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	2140      	movs	r1, #64	; 0x40
 8000320:	482d      	ldr	r0, [pc, #180]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000322:	f001 fbea 	bl	8001afa <HAL_GPIO_WritePin>
            break;
 8000326:	e053      	b.n	80003d0 <display7SEG_East_West+0x284>
        case 7:
            HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	2101      	movs	r1, #1
 800032c:	482a      	ldr	r0, [pc, #168]	; (80003d8 <display7SEG_East_West+0x28c>)
 800032e:	f001 fbe4 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	2102      	movs	r1, #2
 8000336:	4828      	ldr	r0, [pc, #160]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000338:	f001 fbdf 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2104      	movs	r1, #4
 8000340:	4825      	ldr	r0, [pc, #148]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000342:	f001 fbda 	bl	8001afa <HAL_GPIO_WritePin>
            break;
 8000346:	e043      	b.n	80003d0 <display7SEG_East_West+0x284>
        case 8:
            HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	2101      	movs	r1, #1
 800034c:	4822      	ldr	r0, [pc, #136]	; (80003d8 <display7SEG_East_West+0x28c>)
 800034e:	f001 fbd4 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	2102      	movs	r1, #2
 8000356:	4820      	ldr	r0, [pc, #128]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000358:	f001 fbcf 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	2104      	movs	r1, #4
 8000360:	481d      	ldr	r0, [pc, #116]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000362:	f001 fbca 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	2108      	movs	r1, #8
 800036a:	481b      	ldr	r0, [pc, #108]	; (80003d8 <display7SEG_East_West+0x28c>)
 800036c:	f001 fbc5 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_E, GPIO_PIN_RESET);
 8000370:	2200      	movs	r2, #0
 8000372:	2110      	movs	r1, #16
 8000374:	4818      	ldr	r0, [pc, #96]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000376:	f001 fbc0 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_RESET);
 800037a:	2200      	movs	r2, #0
 800037c:	2120      	movs	r1, #32
 800037e:	4816      	ldr	r0, [pc, #88]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000380:	f001 fbbb 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2140      	movs	r1, #64	; 0x40
 8000388:	4813      	ldr	r0, [pc, #76]	; (80003d8 <display7SEG_East_West+0x28c>)
 800038a:	f001 fbb6 	bl	8001afa <HAL_GPIO_WritePin>
            break;
 800038e:	e01f      	b.n	80003d0 <display7SEG_East_West+0x284>
        case 9:
            HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	2101      	movs	r1, #1
 8000394:	4810      	ldr	r0, [pc, #64]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000396:	f001 fbb0 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 800039a:	2200      	movs	r2, #0
 800039c:	2102      	movs	r1, #2
 800039e:	480e      	ldr	r0, [pc, #56]	; (80003d8 <display7SEG_East_West+0x28c>)
 80003a0:	f001 fbab 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2104      	movs	r1, #4
 80003a8:	480b      	ldr	r0, [pc, #44]	; (80003d8 <display7SEG_East_West+0x28c>)
 80003aa:	f001 fba6 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2108      	movs	r1, #8
 80003b2:	4809      	ldr	r0, [pc, #36]	; (80003d8 <display7SEG_East_West+0x28c>)
 80003b4:	f001 fba1 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2120      	movs	r1, #32
 80003bc:	4806      	ldr	r0, [pc, #24]	; (80003d8 <display7SEG_East_West+0x28c>)
 80003be:	f001 fb9c 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2140      	movs	r1, #64	; 0x40
 80003c6:	4804      	ldr	r0, [pc, #16]	; (80003d8 <display7SEG_East_West+0x28c>)
 80003c8:	f001 fb97 	bl	8001afa <HAL_GPIO_WritePin>
            break;
 80003cc:	e000      	b.n	80003d0 <display7SEG_East_West+0x284>
        default:
            break; // khong lm gi ca
 80003ce:	bf00      	nop
    }

}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40010c00 	.word	0x40010c00

080003dc <display7SEG_North_South>:

void display7SEG_North_South(int num) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
    // ban dau tat led 7 doan
    HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_SET);
 80003e4:	2201      	movs	r2, #1
 80003e6:	2180      	movs	r1, #128	; 0x80
 80003e8:	48b7      	ldr	r0, [pc, #732]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80003ea:	f001 fb86 	bl	8001afa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f4:	48b4      	ldr	r0, [pc, #720]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80003f6:	f001 fb80 	bl	8001afa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000400:	48b1      	ldr	r0, [pc, #708]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000402:	f001 fb7a 	bl	8001afa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_SET);
 8000406:	2201      	movs	r2, #1
 8000408:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800040c:	48ae      	ldr	r0, [pc, #696]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800040e:	f001 fb74 	bl	8001afa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, SEG_E1, GPIO_PIN_SET);
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000418:	48ab      	ldr	r0, [pc, #684]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800041a:	f001 fb6e 	bl	8001afa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_SET);
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000424:	48a8      	ldr	r0, [pc, #672]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000426:	f001 fb68 	bl	8001afa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_SET);
 800042a:	2201      	movs	r2, #1
 800042c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000430:	48a5      	ldr	r0, [pc, #660]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000432:	f001 fb62 	bl	8001afa <HAL_GPIO_WritePin>
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2b09      	cmp	r3, #9
 800043a:	f200 813f 	bhi.w	80006bc <display7SEG_North_South+0x2e0>
 800043e:	a201      	add	r2, pc, #4	; (adr r2, 8000444 <display7SEG_North_South+0x68>)
 8000440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000444:	0800046d 	.word	0x0800046d
 8000448:	080004b5 	.word	0x080004b5
 800044c:	080004cf 	.word	0x080004cf
 8000450:	0800050b 	.word	0x0800050b
 8000454:	08000547 	.word	0x08000547
 8000458:	08000579 	.word	0x08000579
 800045c:	080005b5 	.word	0x080005b5
 8000460:	080005fd 	.word	0x080005fd
 8000464:	08000621 	.word	0x08000621
 8000468:	08000675 	.word	0x08000675

    // dieu khien led 7 doan
    switch (num) {
        case 0:
            HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	2180      	movs	r1, #128	; 0x80
 8000470:	4895      	ldr	r0, [pc, #596]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000472:	f001 fb42 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	f44f 7180 	mov.w	r1, #256	; 0x100
 800047c:	4892      	ldr	r0, [pc, #584]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800047e:	f001 fb3c 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000488:	488f      	ldr	r0, [pc, #572]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800048a:	f001 fb36 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 800048e:	2200      	movs	r2, #0
 8000490:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000494:	488c      	ldr	r0, [pc, #560]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000496:	f001 fb30 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_E1, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004a0:	4889      	ldr	r0, [pc, #548]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004a2:	f001 fb2a 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004ac:	4886      	ldr	r0, [pc, #536]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004ae:	f001 fb24 	bl	8001afa <HAL_GPIO_WritePin>
            break;
 80004b2:	e104      	b.n	80006be <display7SEG_North_South+0x2e2>
        case 1:
            HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ba:	4883      	ldr	r0, [pc, #524]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004bc:	f001 fb1d 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004c6:	4880      	ldr	r0, [pc, #512]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004c8:	f001 fb17 	bl	8001afa <HAL_GPIO_WritePin>
            break;
 80004cc:	e0f7      	b.n	80006be <display7SEG_North_South+0x2e2>
        case 2:
            HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2180      	movs	r1, #128	; 0x80
 80004d2:	487d      	ldr	r0, [pc, #500]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004d4:	f001 fb11 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004de:	487a      	ldr	r0, [pc, #488]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004e0:	f001 fb0b 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ea:	4877      	ldr	r0, [pc, #476]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004ec:	f001 fb05 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_E1, GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f6:	4874      	ldr	r0, [pc, #464]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004f8:	f001 faff 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000502:	4871      	ldr	r0, [pc, #452]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000504:	f001 faf9 	bl	8001afa <HAL_GPIO_WritePin>
            break;
 8000508:	e0d9      	b.n	80006be <display7SEG_North_South+0x2e2>
        case 3:
            HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	2180      	movs	r1, #128	; 0x80
 800050e:	486e      	ldr	r0, [pc, #440]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000510:	f001 faf3 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 7180 	mov.w	r1, #256	; 0x100
 800051a:	486b      	ldr	r0, [pc, #428]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800051c:	f001 faed 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000526:	4868      	ldr	r0, [pc, #416]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000528:	f001 fae7 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000532:	4865      	ldr	r0, [pc, #404]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000534:	f001 fae1 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053e:	4862      	ldr	r0, [pc, #392]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000540:	f001 fadb 	bl	8001afa <HAL_GPIO_WritePin>
            break;
 8000544:	e0bb      	b.n	80006be <display7SEG_North_South+0x2e2>
        case 4:
            HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054c:	485e      	ldr	r0, [pc, #376]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800054e:	f001 fad4 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000558:	485b      	ldr	r0, [pc, #364]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800055a:	f001 face 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000564:	4858      	ldr	r0, [pc, #352]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000566:	f001 fac8 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000570:	4855      	ldr	r0, [pc, #340]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000572:	f001 fac2 	bl	8001afa <HAL_GPIO_WritePin>
            break;
 8000576:	e0a2      	b.n	80006be <display7SEG_North_South+0x2e2>
        case 5:
            HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2180      	movs	r1, #128	; 0x80
 800057c:	4852      	ldr	r0, [pc, #328]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800057e:	f001 fabc 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000588:	484f      	ldr	r0, [pc, #316]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800058a:	f001 fab6 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000594:	484c      	ldr	r0, [pc, #304]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000596:	f001 fab0 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a0:	4849      	ldr	r0, [pc, #292]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005a2:	f001 faaa 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ac:	4846      	ldr	r0, [pc, #280]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005ae:	f001 faa4 	bl	8001afa <HAL_GPIO_WritePin>
            break;
 80005b2:	e084      	b.n	80006be <display7SEG_North_South+0x2e2>
        case 6:
            HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2180      	movs	r1, #128	; 0x80
 80005b8:	4843      	ldr	r0, [pc, #268]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005ba:	f001 fa9e 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c4:	4840      	ldr	r0, [pc, #256]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005c6:	f001 fa98 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d0:	483d      	ldr	r0, [pc, #244]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005d2:	f001 fa92 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_E1, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005dc:	483a      	ldr	r0, [pc, #232]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005de:	f001 fa8c 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e8:	4837      	ldr	r0, [pc, #220]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005ea:	f001 fa86 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f4:	4834      	ldr	r0, [pc, #208]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005f6:	f001 fa80 	bl	8001afa <HAL_GPIO_WritePin>
            break;
 80005fa:	e060      	b.n	80006be <display7SEG_North_South+0x2e2>
        case 7:
            HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2180      	movs	r1, #128	; 0x80
 8000600:	4831      	ldr	r0, [pc, #196]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000602:	f001 fa7a 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 7180 	mov.w	r1, #256	; 0x100
 800060c:	482e      	ldr	r0, [pc, #184]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800060e:	f001 fa74 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000618:	482b      	ldr	r0, [pc, #172]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800061a:	f001 fa6e 	bl	8001afa <HAL_GPIO_WritePin>
            break;
 800061e:	e04e      	b.n	80006be <display7SEG_North_South+0x2e2>
        case 8:
            HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2180      	movs	r1, #128	; 0x80
 8000624:	4828      	ldr	r0, [pc, #160]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000626:	f001 fa68 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000630:	4825      	ldr	r0, [pc, #148]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000632:	f001 fa62 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 7100 	mov.w	r1, #512	; 0x200
 800063c:	4822      	ldr	r0, [pc, #136]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800063e:	f001 fa5c 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000648:	481f      	ldr	r0, [pc, #124]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800064a:	f001 fa56 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_E1, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000654:	481c      	ldr	r0, [pc, #112]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000656:	f001 fa50 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000660:	4819      	ldr	r0, [pc, #100]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000662:	f001 fa4a 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800066c:	4816      	ldr	r0, [pc, #88]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800066e:	f001 fa44 	bl	8001afa <HAL_GPIO_WritePin>
            break;
 8000672:	e024      	b.n	80006be <display7SEG_North_South+0x2e2>
        case 9:
            HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	2180      	movs	r1, #128	; 0x80
 8000678:	4813      	ldr	r0, [pc, #76]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800067a:	f001 fa3e 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000684:	4810      	ldr	r0, [pc, #64]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000686:	f001 fa38 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000692:	f001 fa32 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800069c:	480a      	ldr	r0, [pc, #40]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800069e:	f001 fa2c 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a8:	4807      	ldr	r0, [pc, #28]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80006aa:	f001 fa26 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80006b6:	f001 fa20 	bl	8001afa <HAL_GPIO_WritePin>
            break;
 80006ba:	e000      	b.n	80006be <display7SEG_North_South+0x2e2>
        default:
            break; // khong lm gi ca
 80006bc:	bf00      	nop
    }

}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40010c00 	.word	0x40010c00

080006cc <isButton1Pressed>:

int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;

int isButton1Pressed(){
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <isButton1Pressed+0x20>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d104      	bne.n	80006e2 <isButton1Pressed+0x16>
		button1_flag = 0;
 80006d8:	4b04      	ldr	r3, [pc, #16]	; (80006ec <isButton1Pressed+0x20>)
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
		return 1;
 80006de:	2301      	movs	r3, #1
 80006e0:	e000      	b.n	80006e4 <isButton1Pressed+0x18>
	}
	return 0;
 80006e2:	2300      	movs	r3, #0
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	20000060 	.word	0x20000060

080006f0 <getKeyInput>:
		return 1;
	}
	return 0;
}

void getKeyInput(){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0

  KeyRegB1_0 = KeyRegB1_1;
 80006f4:	4b6b      	ldr	r3, [pc, #428]	; (80008a4 <getKeyInput+0x1b4>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a6b      	ldr	r2, [pc, #428]	; (80008a8 <getKeyInput+0x1b8>)
 80006fa:	6013      	str	r3, [r2, #0]
  KeyRegB1_1 = KeyRegB1_2;
 80006fc:	4b6b      	ldr	r3, [pc, #428]	; (80008ac <getKeyInput+0x1bc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a68      	ldr	r2, [pc, #416]	; (80008a4 <getKeyInput+0x1b4>)
 8000702:	6013      	str	r3, [r2, #0]
  KeyRegB1_2 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000708:	4869      	ldr	r0, [pc, #420]	; (80008b0 <getKeyInput+0x1c0>)
 800070a:	f001 f9df 	bl	8001acc <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
 8000710:	461a      	mov	r2, r3
 8000712:	4b66      	ldr	r3, [pc, #408]	; (80008ac <getKeyInput+0x1bc>)
 8000714:	601a      	str	r2, [r3, #0]

  KeyRegB2_0 = KeyRegB2_1;
 8000716:	4b67      	ldr	r3, [pc, #412]	; (80008b4 <getKeyInput+0x1c4>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a67      	ldr	r2, [pc, #412]	; (80008b8 <getKeyInput+0x1c8>)
 800071c:	6013      	str	r3, [r2, #0]
  KeyRegB2_1 = KeyRegB2_2;
 800071e:	4b67      	ldr	r3, [pc, #412]	; (80008bc <getKeyInput+0x1cc>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a64      	ldr	r2, [pc, #400]	; (80008b4 <getKeyInput+0x1c4>)
 8000724:	6013      	str	r3, [r2, #0]
  KeyRegB2_2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000726:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072a:	4861      	ldr	r0, [pc, #388]	; (80008b0 <getKeyInput+0x1c0>)
 800072c:	f001 f9ce 	bl	8001acc <HAL_GPIO_ReadPin>
 8000730:	4603      	mov	r3, r0
 8000732:	461a      	mov	r2, r3
 8000734:	4b61      	ldr	r3, [pc, #388]	; (80008bc <getKeyInput+0x1cc>)
 8000736:	601a      	str	r2, [r3, #0]

  KeyRegB3_0 = KeyRegB3_1;
 8000738:	4b61      	ldr	r3, [pc, #388]	; (80008c0 <getKeyInput+0x1d0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a61      	ldr	r2, [pc, #388]	; (80008c4 <getKeyInput+0x1d4>)
 800073e:	6013      	str	r3, [r2, #0]
  KeyRegB3_1 = KeyRegB3_2;
 8000740:	4b61      	ldr	r3, [pc, #388]	; (80008c8 <getKeyInput+0x1d8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a5e      	ldr	r2, [pc, #376]	; (80008c0 <getKeyInput+0x1d0>)
 8000746:	6013      	str	r3, [r2, #0]
  KeyRegB3_2 = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000748:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800074c:	4858      	ldr	r0, [pc, #352]	; (80008b0 <getKeyInput+0x1c0>)
 800074e:	f001 f9bd 	bl	8001acc <HAL_GPIO_ReadPin>
 8000752:	4603      	mov	r3, r0
 8000754:	461a      	mov	r2, r3
 8000756:	4b5c      	ldr	r3, [pc, #368]	; (80008c8 <getKeyInput+0x1d8>)
 8000758:	601a      	str	r2, [r3, #0]

  // xu ly button 1
  if ((KeyRegB1_0 == KeyRegB1_1) && (KeyRegB1_1 == KeyRegB1_2)){
 800075a:	4b53      	ldr	r3, [pc, #332]	; (80008a8 <getKeyInput+0x1b8>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b51      	ldr	r3, [pc, #324]	; (80008a4 <getKeyInput+0x1b4>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	429a      	cmp	r2, r3
 8000764:	d12f      	bne.n	80007c6 <getKeyInput+0xd6>
 8000766:	4b4f      	ldr	r3, [pc, #316]	; (80008a4 <getKeyInput+0x1b4>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4b50      	ldr	r3, [pc, #320]	; (80008ac <getKeyInput+0x1bc>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	429a      	cmp	r2, r3
 8000770:	d129      	bne.n	80007c6 <getKeyInput+0xd6>
    if (KeyRegB1_3 != KeyRegB1_2){
 8000772:	4b56      	ldr	r3, [pc, #344]	; (80008cc <getKeyInput+0x1dc>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	4b4d      	ldr	r3, [pc, #308]	; (80008ac <getKeyInput+0x1bc>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	429a      	cmp	r2, r3
 800077c:	d00f      	beq.n	800079e <getKeyInput+0xae>
      KeyRegB1_3 = KeyRegB1_2;
 800077e:	4b4b      	ldr	r3, [pc, #300]	; (80008ac <getKeyInput+0x1bc>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a52      	ldr	r2, [pc, #328]	; (80008cc <getKeyInput+0x1dc>)
 8000784:	6013      	str	r3, [r2, #0]

      if (KeyRegB1_2 == PRESSED_STATE){
 8000786:	4b49      	ldr	r3, [pc, #292]	; (80008ac <getKeyInput+0x1bc>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d11b      	bne.n	80007c6 <getKeyInput+0xd6>
        TimeOutForKeyPress = 500;
 800078e:	4b50      	ldr	r3, [pc, #320]	; (80008d0 <getKeyInput+0x1e0>)
 8000790:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000794:	601a      	str	r2, [r3, #0]
        button1_flag = 1;
 8000796:	4b4f      	ldr	r3, [pc, #316]	; (80008d4 <getKeyInput+0x1e4>)
 8000798:	2201      	movs	r2, #1
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	e013      	b.n	80007c6 <getKeyInput+0xd6>
      }

    }else{
        TimeOutForKeyPress --;
 800079e:	4b4c      	ldr	r3, [pc, #304]	; (80008d0 <getKeyInput+0x1e0>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	4a4a      	ldr	r2, [pc, #296]	; (80008d0 <getKeyInput+0x1e0>)
 80007a6:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 80007a8:	4b49      	ldr	r3, [pc, #292]	; (80008d0 <getKeyInput+0x1e0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d10a      	bne.n	80007c6 <getKeyInput+0xd6>
        	TimeOutForKeyPress = 500;
 80007b0:	4b47      	ldr	r3, [pc, #284]	; (80008d0 <getKeyInput+0x1e0>)
 80007b2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007b6:	601a      	str	r2, [r3, #0]
        	if (KeyRegB1_2 == PRESSED_STATE){
 80007b8:	4b3c      	ldr	r3, [pc, #240]	; (80008ac <getKeyInput+0x1bc>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d102      	bne.n	80007c6 <getKeyInput+0xd6>
        		button1_flag = 1;
 80007c0:	4b44      	ldr	r3, [pc, #272]	; (80008d4 <getKeyInput+0x1e4>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	601a      	str	r2, [r3, #0]
        	}
        }
    }
  }
  // xu ly button 2
  if ((KeyRegB2_0 == KeyRegB2_1) && (KeyRegB2_1 == KeyRegB2_2)){
 80007c6:	4b3c      	ldr	r3, [pc, #240]	; (80008b8 <getKeyInput+0x1c8>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	4b3a      	ldr	r3, [pc, #232]	; (80008b4 <getKeyInput+0x1c4>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d12f      	bne.n	8000832 <getKeyInput+0x142>
 80007d2:	4b38      	ldr	r3, [pc, #224]	; (80008b4 <getKeyInput+0x1c4>)
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	4b39      	ldr	r3, [pc, #228]	; (80008bc <getKeyInput+0x1cc>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d129      	bne.n	8000832 <getKeyInput+0x142>
    if (KeyRegB2_3 != KeyRegB2_2){
 80007de:	4b3e      	ldr	r3, [pc, #248]	; (80008d8 <getKeyInput+0x1e8>)
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	4b36      	ldr	r3, [pc, #216]	; (80008bc <getKeyInput+0x1cc>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d00f      	beq.n	800080a <getKeyInput+0x11a>
      KeyRegB2_3 = KeyRegB2_2;
 80007ea:	4b34      	ldr	r3, [pc, #208]	; (80008bc <getKeyInput+0x1cc>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a3a      	ldr	r2, [pc, #232]	; (80008d8 <getKeyInput+0x1e8>)
 80007f0:	6013      	str	r3, [r2, #0]

      if (KeyRegB2_2 == PRESSED_STATE){
 80007f2:	4b32      	ldr	r3, [pc, #200]	; (80008bc <getKeyInput+0x1cc>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d11b      	bne.n	8000832 <getKeyInput+0x142>
        TimeOutForKeyPress = 500;
 80007fa:	4b35      	ldr	r3, [pc, #212]	; (80008d0 <getKeyInput+0x1e0>)
 80007fc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000800:	601a      	str	r2, [r3, #0]
        button2_flag = 1;
 8000802:	4b36      	ldr	r3, [pc, #216]	; (80008dc <getKeyInput+0x1ec>)
 8000804:	2201      	movs	r2, #1
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	e013      	b.n	8000832 <getKeyInput+0x142>
      }

    }else{
        TimeOutForKeyPress --;
 800080a:	4b31      	ldr	r3, [pc, #196]	; (80008d0 <getKeyInput+0x1e0>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	3b01      	subs	r3, #1
 8000810:	4a2f      	ldr	r2, [pc, #188]	; (80008d0 <getKeyInput+0x1e0>)
 8000812:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 8000814:	4b2e      	ldr	r3, [pc, #184]	; (80008d0 <getKeyInput+0x1e0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d10a      	bne.n	8000832 <getKeyInput+0x142>
        	TimeOutForKeyPress = 500;
 800081c:	4b2c      	ldr	r3, [pc, #176]	; (80008d0 <getKeyInput+0x1e0>)
 800081e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000822:	601a      	str	r2, [r3, #0]
        	if (KeyRegB2_2 == PRESSED_STATE){
 8000824:	4b25      	ldr	r3, [pc, #148]	; (80008bc <getKeyInput+0x1cc>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d102      	bne.n	8000832 <getKeyInput+0x142>
        		button2_flag = 1;
 800082c:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <getKeyInput+0x1ec>)
 800082e:	2201      	movs	r2, #1
 8000830:	601a      	str	r2, [r3, #0]
        	}
        }
    }
  }
  // xu ly button 3
  if ((KeyRegB3_0 == KeyRegB3_1) && (KeyRegB3_1 == KeyRegB3_2)){
 8000832:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <getKeyInput+0x1d4>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <getKeyInput+0x1d0>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	429a      	cmp	r2, r3
 800083c:	d12f      	bne.n	800089e <getKeyInput+0x1ae>
 800083e:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <getKeyInput+0x1d0>)
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <getKeyInput+0x1d8>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	429a      	cmp	r2, r3
 8000848:	d129      	bne.n	800089e <getKeyInput+0x1ae>
    if (KeyRegB3_3 != KeyRegB3_2){
 800084a:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <getKeyInput+0x1f0>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <getKeyInput+0x1d8>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	429a      	cmp	r2, r3
 8000854:	d00f      	beq.n	8000876 <getKeyInput+0x186>
      KeyRegB3_3 = KeyRegB3_2;
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <getKeyInput+0x1d8>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a21      	ldr	r2, [pc, #132]	; (80008e0 <getKeyInput+0x1f0>)
 800085c:	6013      	str	r3, [r2, #0]

      if (KeyRegB3_2 == PRESSED_STATE){
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <getKeyInput+0x1d8>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d11b      	bne.n	800089e <getKeyInput+0x1ae>
        TimeOutForKeyPress = 500;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <getKeyInput+0x1e0>)
 8000868:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800086c:	601a      	str	r2, [r3, #0]
        button3_flag = 1;
 800086e:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <getKeyInput+0x1f4>)
 8000870:	2201      	movs	r2, #1
 8000872:	601a      	str	r2, [r3, #0]
        		button3_flag = 1;
        	}
        }
    }
  }
}
 8000874:	e013      	b.n	800089e <getKeyInput+0x1ae>
        TimeOutForKeyPress --;
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <getKeyInput+0x1e0>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	3b01      	subs	r3, #1
 800087c:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <getKeyInput+0x1e0>)
 800087e:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <getKeyInput+0x1e0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d10a      	bne.n	800089e <getKeyInput+0x1ae>
        	TimeOutForKeyPress = 500;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <getKeyInput+0x1e0>)
 800088a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800088e:	601a      	str	r2, [r3, #0]
        	if (KeyRegB3_2 == PRESSED_STATE){
 8000890:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <getKeyInput+0x1d8>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d102      	bne.n	800089e <getKeyInput+0x1ae>
        		button3_flag = 1;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <getKeyInput+0x1f4>)
 800089a:	2201      	movs	r2, #1
 800089c:	601a      	str	r2, [r3, #0]
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000004 	.word	0x20000004
 80008a8:	20000000 	.word	0x20000000
 80008ac:	20000008 	.word	0x20000008
 80008b0:	40010800 	.word	0x40010800
 80008b4:	20000014 	.word	0x20000014
 80008b8:	20000010 	.word	0x20000010
 80008bc:	20000018 	.word	0x20000018
 80008c0:	20000024 	.word	0x20000024
 80008c4:	20000020 	.word	0x20000020
 80008c8:	20000028 	.word	0x20000028
 80008cc:	2000000c 	.word	0x2000000c
 80008d0:	20000030 	.word	0x20000030
 80008d4:	20000060 	.word	0x20000060
 80008d8:	2000001c 	.word	0x2000001c
 80008dc:	20000064 	.word	0x20000064
 80008e0:	2000002c 	.word	0x2000002c
 80008e4:	20000068 	.word	0x20000068

080008e8 <fsm_automatic_run>:
 *
 *  Created on: Oct 25, 2024
 *      Author: Admin
 */
#include "fsm_automatic.h"
void fsm_automatic_run(){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af02      	add	r7, sp, #8
	switch (status){
 80008ee:	4b4d      	ldr	r3, [pc, #308]	; (8000a24 <fsm_automatic_run+0x13c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d002      	beq.n	80008fc <fsm_automatic_run+0x14>
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d044      	beq.n	8000984 <fsm_automatic_run+0x9c>
			setTimer1(50);
		}
		break;
	}

}
 80008fa:	e090      	b.n	8000a1e <fsm_automatic_run+0x136>
		init_traffic_light(RED_COLOR,RED_AUTO,5, GREEN_COLOR,GREEN_AUTO,3);
 80008fc:	2303      	movs	r3, #3
 80008fe:	9301      	str	r3, [sp, #4]
 8000900:	2306      	movs	r3, #6
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	2317      	movs	r3, #23
 8000906:	2205      	movs	r2, #5
 8000908:	2105      	movs	r1, #5
 800090a:	2016      	movs	r0, #22
 800090c:	f000 fabe 	bl	8000e8c <init_traffic_light>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,GPIO_PIN_SET);
 8000910:	2201      	movs	r2, #1
 8000912:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000916:	4844      	ldr	r0, [pc, #272]	; (8000a28 <fsm_automatic_run+0x140>)
 8000918:	f001 f8ef 	bl	8001afa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000922:	4841      	ldr	r0, [pc, #260]	; (8000a28 <fsm_automatic_run+0x140>)
 8000924:	f001 f8e9 	bl	8001afa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800092e:	483e      	ldr	r0, [pc, #248]	; (8000a28 <fsm_automatic_run+0x140>)
 8000930:	f001 f8e3 	bl	8001afa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,GPIO_PIN_SET);
 8000934:	2201      	movs	r2, #1
 8000936:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800093a:	483b      	ldr	r0, [pc, #236]	; (8000a28 <fsm_automatic_run+0x140>)
 800093c:	f001 f8dd 	bl	8001afa <HAL_GPIO_WritePin>
		updateClockBuffer(3, 5);
 8000940:	2105      	movs	r1, #5
 8000942:	2003      	movs	r0, #3
 8000944:	f000 fa04 	bl	8000d50 <updateClockBuffer>
		if(isButton1Pressed() == 1){
 8000948:	f7ff fec0 	bl	80006cc <isButton1Pressed>
 800094c:	4603      	mov	r3, r0
 800094e:	2b01      	cmp	r3, #1
 8000950:	d162      	bne.n	8000a18 <fsm_automatic_run+0x130>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000958:	4833      	ldr	r0, [pc, #204]	; (8000a28 <fsm_automatic_run+0x140>)
 800095a:	f001 f8ce 	bl	8001afa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000964:	4830      	ldr	r0, [pc, #192]	; (8000a28 <fsm_automatic_run+0x140>)
 8000966:	f001 f8c8 	bl	8001afa <HAL_GPIO_WritePin>
			display7SEG_East_West(1);
 800096a:	2001      	movs	r0, #1
 800096c:	f7ff fbee 	bl	800014c <display7SEG_East_West>
			display7SEG_North_South(1);
 8000970:	2001      	movs	r0, #1
 8000972:	f7ff fd33 	bl	80003dc <display7SEG_North_South>
			status = MODE_1;
 8000976:	4b2b      	ldr	r3, [pc, #172]	; (8000a24 <fsm_automatic_run+0x13c>)
 8000978:	2201      	movs	r2, #1
 800097a:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 800097c:	2064      	movs	r0, #100	; 0x64
 800097e:	f000 fd67 	bl	8001450 <setTimer1>
		break;
 8000982:	e049      	b.n	8000a18 <fsm_automatic_run+0x130>
		if (timer1_flag == 1){
 8000984:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <fsm_automatic_run+0x144>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d115      	bne.n	80009b8 <fsm_automatic_run+0xd0>
			display();
 800098c:	f000 fa1c 	bl	8000dc8 <display>
			dem --;
 8000990:	4b27      	ldr	r3, [pc, #156]	; (8000a30 <fsm_automatic_run+0x148>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	3b01      	subs	r3, #1
 8000996:	4a26      	ldr	r2, [pc, #152]	; (8000a30 <fsm_automatic_run+0x148>)
 8000998:	6013      	str	r3, [r2, #0]
			if(dem == 0){
 800099a:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <fsm_automatic_run+0x148>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d107      	bne.n	80009b2 <fsm_automatic_run+0xca>
				light_traffic_run(5, 2, 3);
 80009a2:	2203      	movs	r2, #3
 80009a4:	2102      	movs	r1, #2
 80009a6:	2005      	movs	r0, #5
 80009a8:	f000 fa9a 	bl	8000ee0 <light_traffic_run>
				dem  = 4;
 80009ac:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <fsm_automatic_run+0x148>)
 80009ae:	2204      	movs	r2, #4
 80009b0:	601a      	str	r2, [r3, #0]
			setTimer1(25);
 80009b2:	2019      	movs	r0, #25
 80009b4:	f000 fd4c 	bl	8001450 <setTimer1>
		if(button1_flag == 1){
 80009b8:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <fsm_automatic_run+0x14c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d12d      	bne.n	8000a1c <fsm_automatic_run+0x134>
			button1_flag = 0;
 80009c0:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <fsm_automatic_run+0x14c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
			status = MODE_2;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <fsm_automatic_run+0x13c>)
 80009c8:	2202      	movs	r2, #2
 80009ca:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,GPIO_PIN_SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009d2:	4815      	ldr	r0, [pc, #84]	; (8000a28 <fsm_automatic_run+0x140>)
 80009d4:	f001 f891 	bl	8001afa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009de:	4812      	ldr	r0, [pc, #72]	; (8000a28 <fsm_automatic_run+0x140>)
 80009e0:	f001 f88b 	bl	8001afa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,GPIO_PIN_SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ea:	480f      	ldr	r0, [pc, #60]	; (8000a28 <fsm_automatic_run+0x140>)
 80009ec:	f001 f885 	bl	8001afa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009f6:	480c      	ldr	r0, [pc, #48]	; (8000a28 <fsm_automatic_run+0x140>)
 80009f8:	f001 f87f 	bl	8001afa <HAL_GPIO_WritePin>
			display7SEG_East_West(2);
 80009fc:	2002      	movs	r0, #2
 80009fe:	f7ff fba5 	bl	800014c <display7SEG_East_West>
			display7SEG_North_South(2);
 8000a02:	2002      	movs	r0, #2
 8000a04:	f7ff fcea 	bl	80003dc <display7SEG_North_South>
			clearLed();
 8000a08:	f000 f8f2 	bl	8000bf0 <clearLed>
			clearLed1();
 8000a0c:	f000 f948 	bl	8000ca0 <clearLed1>
			setTimer1(50);
 8000a10:	2032      	movs	r0, #50	; 0x32
 8000a12:	f000 fd1d 	bl	8001450 <setTimer1>
		break;
 8000a16:	e001      	b.n	8000a1c <fsm_automatic_run+0x134>
		break;
 8000a18:	bf00      	nop
 8000a1a:	e000      	b.n	8000a1e <fsm_automatic_run+0x136>
		break;
 8000a1c:	bf00      	nop
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2000006c 	.word	0x2000006c
 8000a28:	40010800 	.word	0x40010800
 8000a2c:	20000090 	.word	0x20000090
 8000a30:	20000034 	.word	0x20000034
 8000a34:	20000060 	.word	0x20000060

08000a38 <fsm_manual_run>:
 *
 *  Created on: Oct 26, 2024
 *      Author: Admin
 */
#include "fsm_manual.h"
void fsm_manual_run(){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	switch (status) {
 8000a3c:	4b68      	ldr	r3, [pc, #416]	; (8000be0 <fsm_manual_run+0x1a8>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b04      	cmp	r3, #4
 8000a42:	f000 8087 	beq.w	8000b54 <fsm_manual_run+0x11c>
 8000a46:	2b04      	cmp	r3, #4
 8000a48:	f300 80c8 	bgt.w	8000bdc <fsm_manual_run+0x1a4>
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d002      	beq.n	8000a56 <fsm_manual_run+0x1e>
 8000a50:	2b03      	cmp	r3, #3
 8000a52:	d040      	beq.n	8000ad6 <fsm_manual_run+0x9e>
		}
		break;

		}

}
 8000a54:	e0c2      	b.n	8000bdc <fsm_manual_run+0x1a4>
		if (timer1_flag == 1){
 8000a56:	4b63      	ldr	r3, [pc, #396]	; (8000be4 <fsm_manual_run+0x1ac>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d10a      	bne.n	8000a74 <fsm_manual_run+0x3c>
			HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000a5e:	2104      	movs	r1, #4
 8000a60:	4861      	ldr	r0, [pc, #388]	; (8000be8 <fsm_manual_run+0x1b0>)
 8000a62:	f001 f862 	bl	8001b2a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000a66:	2120      	movs	r1, #32
 8000a68:	485f      	ldr	r0, [pc, #380]	; (8000be8 <fsm_manual_run+0x1b0>)
 8000a6a:	f001 f85e 	bl	8001b2a <HAL_GPIO_TogglePin>
			setTimer1(50);
 8000a6e:	2032      	movs	r0, #50	; 0x32
 8000a70:	f000 fcee 	bl	8001450 <setTimer1>
		if(button1_flag == 1){
 8000a74:	4b5d      	ldr	r3, [pc, #372]	; (8000bec <fsm_manual_run+0x1b4>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	f040 80aa 	bne.w	8000bd2 <fsm_manual_run+0x19a>
			button1_flag = 0;
 8000a7e:	4b5b      	ldr	r3, [pc, #364]	; (8000bec <fsm_manual_run+0x1b4>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
			status = MODE_3;
 8000a84:	4b56      	ldr	r3, [pc, #344]	; (8000be0 <fsm_manual_run+0x1a8>)
 8000a86:	2203      	movs	r2, #3
 8000a88:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a90:	4855      	ldr	r0, [pc, #340]	; (8000be8 <fsm_manual_run+0x1b0>)
 8000a92:	f001 f832 	bl	8001afa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a9c:	4852      	ldr	r0, [pc, #328]	; (8000be8 <fsm_manual_run+0x1b0>)
 8000a9e:	f001 f82c 	bl	8001afa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,GPIO_PIN_SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa8:	484f      	ldr	r0, [pc, #316]	; (8000be8 <fsm_manual_run+0x1b0>)
 8000aaa:	f001 f826 	bl	8001afa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab4:	484c      	ldr	r0, [pc, #304]	; (8000be8 <fsm_manual_run+0x1b0>)
 8000ab6:	f001 f820 	bl	8001afa <HAL_GPIO_WritePin>
			display7SEG_East_West(3);
 8000aba:	2003      	movs	r0, #3
 8000abc:	f7ff fb46 	bl	800014c <display7SEG_East_West>
			display7SEG_North_South(3);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f7ff fc8b 	bl	80003dc <display7SEG_North_South>
			clearLed();
 8000ac6:	f000 f893 	bl	8000bf0 <clearLed>
			clearLed1();
 8000aca:	f000 f8e9 	bl	8000ca0 <clearLed1>
			setTimer1(50);
 8000ace:	2032      	movs	r0, #50	; 0x32
 8000ad0:	f000 fcbe 	bl	8001450 <setTimer1>
		break;
 8000ad4:	e07d      	b.n	8000bd2 <fsm_manual_run+0x19a>
		if (timer1_flag == 1){
 8000ad6:	4b43      	ldr	r3, [pc, #268]	; (8000be4 <fsm_manual_run+0x1ac>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d10a      	bne.n	8000af4 <fsm_manual_run+0xbc>
			HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8000ade:	2110      	movs	r1, #16
 8000ae0:	4841      	ldr	r0, [pc, #260]	; (8000be8 <fsm_manual_run+0x1b0>)
 8000ae2:	f001 f822 	bl	8001b2a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000ae6:	2180      	movs	r1, #128	; 0x80
 8000ae8:	483f      	ldr	r0, [pc, #252]	; (8000be8 <fsm_manual_run+0x1b0>)
 8000aea:	f001 f81e 	bl	8001b2a <HAL_GPIO_TogglePin>
			setTimer1(50);
 8000aee:	2032      	movs	r0, #50	; 0x32
 8000af0:	f000 fcae 	bl	8001450 <setTimer1>
		if(button1_flag == 1){
 8000af4:	4b3d      	ldr	r3, [pc, #244]	; (8000bec <fsm_manual_run+0x1b4>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d16c      	bne.n	8000bd6 <fsm_manual_run+0x19e>
			button1_flag = 0;
 8000afc:	4b3b      	ldr	r3, [pc, #236]	; (8000bec <fsm_manual_run+0x1b4>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
			status = MODE_4;
 8000b02:	4b37      	ldr	r3, [pc, #220]	; (8000be0 <fsm_manual_run+0x1a8>)
 8000b04:	2204      	movs	r2, #4
 8000b06:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b0e:	4836      	ldr	r0, [pc, #216]	; (8000be8 <fsm_manual_run+0x1b0>)
 8000b10:	f000 fff3 	bl	8001afa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b1a:	4833      	ldr	r0, [pc, #204]	; (8000be8 <fsm_manual_run+0x1b0>)
 8000b1c:	f000 ffed 	bl	8001afa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,GPIO_PIN_SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b26:	4830      	ldr	r0, [pc, #192]	; (8000be8 <fsm_manual_run+0x1b0>)
 8000b28:	f000 ffe7 	bl	8001afa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b32:	482d      	ldr	r0, [pc, #180]	; (8000be8 <fsm_manual_run+0x1b0>)
 8000b34:	f000 ffe1 	bl	8001afa <HAL_GPIO_WritePin>
			display7SEG_East_West(4);
 8000b38:	2004      	movs	r0, #4
 8000b3a:	f7ff fb07 	bl	800014c <display7SEG_East_West>
			display7SEG_North_South(4);
 8000b3e:	2004      	movs	r0, #4
 8000b40:	f7ff fc4c 	bl	80003dc <display7SEG_North_South>
			clearLed();
 8000b44:	f000 f854 	bl	8000bf0 <clearLed>
			clearLed1();
 8000b48:	f000 f8aa 	bl	8000ca0 <clearLed1>
			setTimer1(50);
 8000b4c:	2032      	movs	r0, #50	; 0x32
 8000b4e:	f000 fc7f 	bl	8001450 <setTimer1>
		break;
 8000b52:	e040      	b.n	8000bd6 <fsm_manual_run+0x19e>
		if (timer1_flag == 1){
 8000b54:	4b23      	ldr	r3, [pc, #140]	; (8000be4 <fsm_manual_run+0x1ac>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d10a      	bne.n	8000b72 <fsm_manual_run+0x13a>
			HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8000b5c:	2108      	movs	r1, #8
 8000b5e:	4822      	ldr	r0, [pc, #136]	; (8000be8 <fsm_manual_run+0x1b0>)
 8000b60:	f000 ffe3 	bl	8001b2a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000b64:	2140      	movs	r1, #64	; 0x40
 8000b66:	4820      	ldr	r0, [pc, #128]	; (8000be8 <fsm_manual_run+0x1b0>)
 8000b68:	f000 ffdf 	bl	8001b2a <HAL_GPIO_TogglePin>
			setTimer1(50);
 8000b6c:	2032      	movs	r0, #50	; 0x32
 8000b6e:	f000 fc6f 	bl	8001450 <setTimer1>
		if(button1_flag == 1){
 8000b72:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <fsm_manual_run+0x1b4>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d12f      	bne.n	8000bda <fsm_manual_run+0x1a2>
			button1_flag = 0;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <fsm_manual_run+0x1b4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
			status = MODE_1;
 8000b80:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <fsm_manual_run+0x1a8>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b8c:	4816      	ldr	r0, [pc, #88]	; (8000be8 <fsm_manual_run+0x1b0>)
 8000b8e:	f000 ffb4 	bl	8001afa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b98:	4813      	ldr	r0, [pc, #76]	; (8000be8 <fsm_manual_run+0x1b0>)
 8000b9a:	f000 ffae 	bl	8001afa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba4:	4810      	ldr	r0, [pc, #64]	; (8000be8 <fsm_manual_run+0x1b0>)
 8000ba6:	f000 ffa8 	bl	8001afa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bb0:	480d      	ldr	r0, [pc, #52]	; (8000be8 <fsm_manual_run+0x1b0>)
 8000bb2:	f000 ffa2 	bl	8001afa <HAL_GPIO_WritePin>
			display7SEG_East_West(1);
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f7ff fac8 	bl	800014c <display7SEG_East_West>
			display7SEG_North_South(1);
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f7ff fc0d 	bl	80003dc <display7SEG_North_South>
			clearLed();
 8000bc2:	f000 f815 	bl	8000bf0 <clearLed>
			clearLed1();
 8000bc6:	f000 f86b 	bl	8000ca0 <clearLed1>
			setTimer1(100);
 8000bca:	2064      	movs	r0, #100	; 0x64
 8000bcc:	f000 fc40 	bl	8001450 <setTimer1>
		break;
 8000bd0:	e003      	b.n	8000bda <fsm_manual_run+0x1a2>
		break;
 8000bd2:	bf00      	nop
 8000bd4:	e002      	b.n	8000bdc <fsm_manual_run+0x1a4>
		break;
 8000bd6:	bf00      	nop
 8000bd8:	e000      	b.n	8000bdc <fsm_manual_run+0x1a4>
		break;
 8000bda:	bf00      	nop
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	2000006c 	.word	0x2000006c
 8000be4:	20000090 	.word	0x20000090
 8000be8:	40010800 	.word	0x40010800
 8000bec:	20000060 	.word	0x20000060

08000bf0 <clearLed>:
#define SRC_GLOBAL_C_
#include "global.h"
int status = 0;
int index_led = 0;
int led_buffer [4] = {0,0,0,0};
void clearLed (){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2120      	movs	r1, #32
 8000bf8:	4807      	ldr	r0, [pc, #28]	; (8000c18 <clearLed+0x28>)
 8000bfa:	f000 ff7e 	bl	8001afa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2180      	movs	r1, #128	; 0x80
 8000c02:	4805      	ldr	r0, [pc, #20]	; (8000c18 <clearLed+0x28>)
 8000c04:	f000 ff79 	bl	8001afa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2140      	movs	r1, #64	; 0x40
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <clearLed+0x28>)
 8000c0e:	f000 ff74 	bl	8001afa <HAL_GPIO_WritePin>
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40010800 	.word	0x40010800

08000c1c <setLedRed>:
void setLedRed(){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	2120      	movs	r1, #32
 8000c24:	4807      	ldr	r0, [pc, #28]	; (8000c44 <setLedRed+0x28>)
 8000c26:	f000 ff68 	bl	8001afa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2180      	movs	r1, #128	; 0x80
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <setLedRed+0x28>)
 8000c30:	f000 ff63 	bl	8001afa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2140      	movs	r1, #64	; 0x40
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <setLedRed+0x28>)
 8000c3a:	f000 ff5e 	bl	8001afa <HAL_GPIO_WritePin>
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40010800 	.word	0x40010800

08000c48 <setLedGreen>:

void setLedGreen(){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2120      	movs	r1, #32
 8000c50:	4807      	ldr	r0, [pc, #28]	; (8000c70 <setLedGreen+0x28>)
 8000c52:	f000 ff52 	bl	8001afa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000c56:	2201      	movs	r2, #1
 8000c58:	2180      	movs	r1, #128	; 0x80
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <setLedGreen+0x28>)
 8000c5c:	f000 ff4d 	bl	8001afa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2140      	movs	r1, #64	; 0x40
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <setLedGreen+0x28>)
 8000c66:	f000 ff48 	bl	8001afa <HAL_GPIO_WritePin>
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40010800 	.word	0x40010800

08000c74 <setLedYellow>:

void setLedYellow(){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2120      	movs	r1, #32
 8000c7c:	4807      	ldr	r0, [pc, #28]	; (8000c9c <setLedYellow+0x28>)
 8000c7e:	f000 ff3c 	bl	8001afa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2180      	movs	r1, #128	; 0x80
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <setLedYellow+0x28>)
 8000c88:	f000 ff37 	bl	8001afa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2140      	movs	r1, #64	; 0x40
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <setLedYellow+0x28>)
 8000c92:	f000 ff32 	bl	8001afa <HAL_GPIO_WritePin>
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40010800 	.word	0x40010800

08000ca0 <clearLed1>:

void clearLed1 (){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2104      	movs	r1, #4
 8000ca8:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <clearLed1+0x28>)
 8000caa:	f000 ff26 	bl	8001afa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2110      	movs	r1, #16
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <clearLed1+0x28>)
 8000cb4:	f000 ff21 	bl	8001afa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2108      	movs	r1, #8
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <clearLed1+0x28>)
 8000cbe:	f000 ff1c 	bl	8001afa <HAL_GPIO_WritePin>
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40010800 	.word	0x40010800

08000ccc <setLedRed1>:
void setLedRed1(){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2104      	movs	r1, #4
 8000cd4:	4807      	ldr	r0, [pc, #28]	; (8000cf4 <setLedRed1+0x28>)
 8000cd6:	f000 ff10 	bl	8001afa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2110      	movs	r1, #16
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <setLedRed1+0x28>)
 8000ce0:	f000 ff0b 	bl	8001afa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <setLedRed1+0x28>)
 8000cea:	f000 ff06 	bl	8001afa <HAL_GPIO_WritePin>
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40010800 	.word	0x40010800

08000cf8 <setLedGreen1>:

void setLedGreen1(){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2104      	movs	r1, #4
 8000d00:	4807      	ldr	r0, [pc, #28]	; (8000d20 <setLedGreen1+0x28>)
 8000d02:	f000 fefa 	bl	8001afa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	2110      	movs	r1, #16
 8000d0a:	4805      	ldr	r0, [pc, #20]	; (8000d20 <setLedGreen1+0x28>)
 8000d0c:	f000 fef5 	bl	8001afa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2108      	movs	r1, #8
 8000d14:	4802      	ldr	r0, [pc, #8]	; (8000d20 <setLedGreen1+0x28>)
 8000d16:	f000 fef0 	bl	8001afa <HAL_GPIO_WritePin>
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40010800 	.word	0x40010800

08000d24 <setLedYellow1>:

void setLedYellow1(){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2104      	movs	r1, #4
 8000d2c:	4807      	ldr	r0, [pc, #28]	; (8000d4c <setLedYellow1+0x28>)
 8000d2e:	f000 fee4 	bl	8001afa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2110      	movs	r1, #16
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <setLedYellow1+0x28>)
 8000d38:	f000 fedf 	bl	8001afa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2108      	movs	r1, #8
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <setLedYellow1+0x28>)
 8000d42:	f000 feda 	bl	8001afa <HAL_GPIO_WritePin>
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40010800 	.word	0x40010800

08000d50 <updateClockBuffer>:

void updateClockBuffer(int hour, int minute) {
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
    // Update the hour display
    led_buffer[0] = hour / 10;  // Tens digit of the hour
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a18      	ldr	r2, [pc, #96]	; (8000dc0 <updateClockBuffer+0x70>)
 8000d5e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d62:	1092      	asrs	r2, r2, #2
 8000d64:	17db      	asrs	r3, r3, #31
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	4a16      	ldr	r2, [pc, #88]	; (8000dc4 <updateClockBuffer+0x74>)
 8000d6a:	6013      	str	r3, [r2, #0]
    led_buffer[1] = hour % 10;  // Units digit of the hour
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <updateClockBuffer+0x70>)
 8000d70:	fb83 2301 	smull	r2, r3, r3, r1
 8000d74:	109a      	asrs	r2, r3, #2
 8000d76:	17cb      	asrs	r3, r1, #31
 8000d78:	1ad2      	subs	r2, r2, r3
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	1aca      	subs	r2, r1, r3
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <updateClockBuffer+0x74>)
 8000d86:	605a      	str	r2, [r3, #4]

    // Update the minute display
    led_buffer[2] = minute / 10;  // Tens digit of the minute
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	4a0d      	ldr	r2, [pc, #52]	; (8000dc0 <updateClockBuffer+0x70>)
 8000d8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d90:	1092      	asrs	r2, r2, #2
 8000d92:	17db      	asrs	r3, r3, #31
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <updateClockBuffer+0x74>)
 8000d98:	6093      	str	r3, [r2, #8]
    led_buffer[3] = minute % 10;  // Units digit of the minute
 8000d9a:	6839      	ldr	r1, [r7, #0]
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <updateClockBuffer+0x70>)
 8000d9e:	fb83 2301 	smull	r2, r3, r3, r1
 8000da2:	109a      	asrs	r2, r3, #2
 8000da4:	17cb      	asrs	r3, r1, #31
 8000da6:	1ad2      	subs	r2, r2, r3
 8000da8:	4613      	mov	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	1aca      	subs	r2, r1, r3
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <updateClockBuffer+0x74>)
 8000db4:	60da      	str	r2, [r3, #12]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	66666667 	.word	0x66666667
 8000dc4:	20000074 	.word	0x20000074

08000dc8 <display>:

void display (){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
    switch(index_led) {
 8000dcc:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <display+0xb8>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d002      	beq.n	8000dda <display+0x12>
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d023      	beq.n	8000e20 <display+0x58>
 8000dd8:	e045      	b.n	8000e66 <display+0x9e>
        case 0:
            HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de0:	4828      	ldr	r0, [pc, #160]	; (8000e84 <display+0xbc>)
 8000de2:	f000 fe8a 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000de6:	2201      	movs	r2, #1
 8000de8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dec:	4825      	ldr	r0, [pc, #148]	; (8000e84 <display+0xbc>)
 8000dee:	f000 fe84 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df8:	4822      	ldr	r0, [pc, #136]	; (8000e84 <display+0xbc>)
 8000dfa:	f000 fe7e 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e04:	481f      	ldr	r0, [pc, #124]	; (8000e84 <display+0xbc>)
 8000e06:	f000 fe78 	bl	8001afa <HAL_GPIO_WritePin>
            display7SEG_North_South(led_buffer[0]);
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <display+0xc0>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fae4 	bl	80003dc <display7SEG_North_South>
            display7SEG_East_West(led_buffer[2]);
 8000e14:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <display+0xc0>)
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff f997 	bl	800014c <display7SEG_East_West>
            break;
 8000e1e:	e022      	b.n	8000e66 <display+0x9e>
        case 1:
            HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e26:	4817      	ldr	r0, [pc, #92]	; (8000e84 <display+0xbc>)
 8000e28:	f000 fe67 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e32:	4814      	ldr	r0, [pc, #80]	; (8000e84 <display+0xbc>)
 8000e34:	f000 fe61 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e3e:	4811      	ldr	r0, [pc, #68]	; (8000e84 <display+0xbc>)
 8000e40:	f000 fe5b 	bl	8001afa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e4a:	480e      	ldr	r0, [pc, #56]	; (8000e84 <display+0xbc>)
 8000e4c:	f000 fe55 	bl	8001afa <HAL_GPIO_WritePin>
            display7SEG_North_South(led_buffer[1]);
 8000e50:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <display+0xc0>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fac1 	bl	80003dc <display7SEG_North_South>
            display7SEG_East_West(led_buffer[3]);
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <display+0xc0>)
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff f974 	bl	800014c <display7SEG_East_West>
            break;
 8000e64:	bf00      	nop
    }


    index_led = (index_led + 1) % 2;
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <display+0xb8>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	bfb8      	it	lt
 8000e74:	425b      	neglt	r3, r3
 8000e76:	4a02      	ldr	r2, [pc, #8]	; (8000e80 <display+0xb8>)
 8000e78:	6013      	str	r3, [r2, #0]
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000070 	.word	0x20000070
 8000e84:	40010800 	.word	0x40010800
 8000e88:	20000074 	.word	0x20000074

08000e8c <init_traffic_light>:
int counter_east_west;
int led_status_east_west;
int led_status_north_south;
int count = 0;
int count1 = 0;
void init_traffic_light(int check_color_ew,int led_status_ew, int counter_ew,  int check_color_ns,int led_status_ns , int counter_ns){
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	603b      	str	r3, [r7, #0]
	check_color_east_west = check_color_ew;
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <init_traffic_light+0x3c>)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	6013      	str	r3, [r2, #0]
	check_color_north_south = check_color_ns;
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <init_traffic_light+0x40>)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	6013      	str	r3, [r2, #0]
	counter_north_south = counter_ns;
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <init_traffic_light+0x44>)
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	6013      	str	r3, [r2, #0]
	counter_east_west = counter_ew;
 8000eac:	4a09      	ldr	r2, [pc, #36]	; (8000ed4 <init_traffic_light+0x48>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
	led_status_east_west = led_status_ew;
 8000eb2:	4a09      	ldr	r2, [pc, #36]	; (8000ed8 <init_traffic_light+0x4c>)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	6013      	str	r3, [r2, #0]
	led_status_north_south = led_status_ns;
 8000eb8:	4a08      	ldr	r2, [pc, #32]	; (8000edc <init_traffic_light+0x50>)
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	6013      	str	r3, [r2, #0]
}
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr
 8000ec8:	200000a8 	.word	0x200000a8
 8000ecc:	20000098 	.word	0x20000098
 8000ed0:	200000a4 	.word	0x200000a4
 8000ed4:	2000009c 	.word	0x2000009c
 8000ed8:	200000a0 	.word	0x200000a0
 8000edc:	20000094 	.word	0x20000094

08000ee0 <light_traffic_run>:
void light_traffic_run( int time_red, int time_yellow, int time_green){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]

	//  thiet lap trang thai va thoi gian chuyen tin hieu he thong den 1 (led 7 doan o tren)
		if(counter_north_south <= 0 && check_color_north_south == GREEN_COLOR) {
 8000eec:	4b80      	ldr	r3, [pc, #512]	; (80010f0 <light_traffic_run+0x210>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	dc09      	bgt.n	8000f08 <light_traffic_run+0x28>
 8000ef4:	4b7f      	ldr	r3, [pc, #508]	; (80010f4 <light_traffic_run+0x214>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b17      	cmp	r3, #23
 8000efa:	d105      	bne.n	8000f08 <light_traffic_run+0x28>
			counter_north_south = time_yellow;
 8000efc:	4a7c      	ldr	r2, [pc, #496]	; (80010f0 <light_traffic_run+0x210>)
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	6013      	str	r3, [r2, #0]
			check_color_north_south = YELLOW_COLOR; // den vang
 8000f02:	4b7c      	ldr	r3, [pc, #496]	; (80010f4 <light_traffic_run+0x214>)
 8000f04:	2218      	movs	r2, #24
 8000f06:	601a      	str	r2, [r3, #0]
		}
		if(counter_north_south <= 0 && check_color_north_south == YELLOW_COLOR) {
 8000f08:	4b79      	ldr	r3, [pc, #484]	; (80010f0 <light_traffic_run+0x210>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	dc09      	bgt.n	8000f24 <light_traffic_run+0x44>
 8000f10:	4b78      	ldr	r3, [pc, #480]	; (80010f4 <light_traffic_run+0x214>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b18      	cmp	r3, #24
 8000f16:	d105      	bne.n	8000f24 <light_traffic_run+0x44>
				counter_north_south = time_red;
 8000f18:	4a75      	ldr	r2, [pc, #468]	; (80010f0 <light_traffic_run+0x210>)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	6013      	str	r3, [r2, #0]
				check_color_north_south = RED_COLOR; // den do
 8000f1e:	4b75      	ldr	r3, [pc, #468]	; (80010f4 <light_traffic_run+0x214>)
 8000f20:	2216      	movs	r2, #22
 8000f22:	601a      	str	r2, [r3, #0]
		}

		if(counter_north_south <= 0 && check_color_north_south == RED_COLOR) {
 8000f24:	4b72      	ldr	r3, [pc, #456]	; (80010f0 <light_traffic_run+0x210>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	dc09      	bgt.n	8000f40 <light_traffic_run+0x60>
 8000f2c:	4b71      	ldr	r3, [pc, #452]	; (80010f4 <light_traffic_run+0x214>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b16      	cmp	r3, #22
 8000f32:	d105      	bne.n	8000f40 <light_traffic_run+0x60>
					counter_north_south = time_green;
 8000f34:	4a6e      	ldr	r2, [pc, #440]	; (80010f0 <light_traffic_run+0x210>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6013      	str	r3, [r2, #0]
					check_color_north_south = GREEN_COLOR; // den xanh
 8000f3a:	4b6e      	ldr	r3, [pc, #440]	; (80010f4 <light_traffic_run+0x214>)
 8000f3c:	2217      	movs	r2, #23
 8000f3e:	601a      	str	r2, [r3, #0]
		}



	//  thiet lap trang thai va thoi gian chuyen tin hieu he thong den 2 (led 7 doan o duoi)
		if(counter_east_west <= 0 && check_color_east_west == RED_COLOR) {
 8000f40:	4b6d      	ldr	r3, [pc, #436]	; (80010f8 <light_traffic_run+0x218>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	dc09      	bgt.n	8000f5c <light_traffic_run+0x7c>
 8000f48:	4b6c      	ldr	r3, [pc, #432]	; (80010fc <light_traffic_run+0x21c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b16      	cmp	r3, #22
 8000f4e:	d105      	bne.n	8000f5c <light_traffic_run+0x7c>
		counter_east_west = time_green;
 8000f50:	4a69      	ldr	r2, [pc, #420]	; (80010f8 <light_traffic_run+0x218>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
		check_color_east_west = GREEN_COLOR; // den xanh
 8000f56:	4b69      	ldr	r3, [pc, #420]	; (80010fc <light_traffic_run+0x21c>)
 8000f58:	2217      	movs	r2, #23
 8000f5a:	601a      	str	r2, [r3, #0]
		}
		if(counter_east_west <= 0 && check_color_east_west == GREEN_COLOR) {
 8000f5c:	4b66      	ldr	r3, [pc, #408]	; (80010f8 <light_traffic_run+0x218>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	dc09      	bgt.n	8000f78 <light_traffic_run+0x98>
 8000f64:	4b65      	ldr	r3, [pc, #404]	; (80010fc <light_traffic_run+0x21c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b17      	cmp	r3, #23
 8000f6a:	d105      	bne.n	8000f78 <light_traffic_run+0x98>
			counter_east_west = time_yellow;
 8000f6c:	4a62      	ldr	r2, [pc, #392]	; (80010f8 <light_traffic_run+0x218>)
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	6013      	str	r3, [r2, #0]
			check_color_east_west = YELLOW_COLOR; // den vang
 8000f72:	4b62      	ldr	r3, [pc, #392]	; (80010fc <light_traffic_run+0x21c>)
 8000f74:	2218      	movs	r2, #24
 8000f76:	601a      	str	r2, [r3, #0]
		}
		if(counter_east_west <= 0 && check_color_east_west == YELLOW_COLOR) {
 8000f78:	4b5f      	ldr	r3, [pc, #380]	; (80010f8 <light_traffic_run+0x218>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	dc09      	bgt.n	8000f94 <light_traffic_run+0xb4>
 8000f80:	4b5e      	ldr	r3, [pc, #376]	; (80010fc <light_traffic_run+0x21c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b18      	cmp	r3, #24
 8000f86:	d105      	bne.n	8000f94 <light_traffic_run+0xb4>
				counter_east_west = time_red;
 8000f88:	4a5b      	ldr	r2, [pc, #364]	; (80010f8 <light_traffic_run+0x218>)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	6013      	str	r3, [r2, #0]
				check_color_east_west = RED_COLOR; // den do
 8000f8e:	4b5b      	ldr	r3, [pc, #364]	; (80010fc <light_traffic_run+0x21c>)
 8000f90:	2216      	movs	r2, #22
 8000f92:	601a      	str	r2, [r3, #0]

//		// hien thi led 7 doan he thong den 1
//		display7SEG_North_South(counter_north_south--);
//		// hien thi led 7 doan he thong den 2
//		display7SEG_East_West(counter_east_west--);
		updateClockBuffer(counter_north_south--, counter_east_west--);
 8000f94:	4b56      	ldr	r3, [pc, #344]	; (80010f0 <light_traffic_run+0x210>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	1e5a      	subs	r2, r3, #1
 8000f9a:	4955      	ldr	r1, [pc, #340]	; (80010f0 <light_traffic_run+0x210>)
 8000f9c:	600a      	str	r2, [r1, #0]
 8000f9e:	4a56      	ldr	r2, [pc, #344]	; (80010f8 <light_traffic_run+0x218>)
 8000fa0:	6812      	ldr	r2, [r2, #0]
 8000fa2:	1e51      	subs	r1, r2, #1
 8000fa4:	4854      	ldr	r0, [pc, #336]	; (80010f8 <light_traffic_run+0x218>)
 8000fa6:	6001      	str	r1, [r0, #0]
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fed0 	bl	8000d50 <updateClockBuffer>


	// dieu khien chuyen tin hieu he thong  den 1 (led 7 doan o tren)
		if (led_status_north_south == GREEN_AUTO ) {
 8000fb0:	4b53      	ldr	r3, [pc, #332]	; (8001100 <light_traffic_run+0x220>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b06      	cmp	r3, #6
 8000fb6:	d106      	bne.n	8000fc6 <light_traffic_run+0xe6>
			setLedGreen1();
 8000fb8:	f7ff fe9e 	bl	8000cf8 <setLedGreen1>
			count1 ++;
 8000fbc:	4b51      	ldr	r3, [pc, #324]	; (8001104 <light_traffic_run+0x224>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	4a50      	ldr	r2, [pc, #320]	; (8001104 <light_traffic_run+0x224>)
 8000fc4:	6013      	str	r3, [r2, #0]
		}
		if(led_status_north_south == YELLOW_AUTO){
 8000fc6:	4b4e      	ldr	r3, [pc, #312]	; (8001100 <light_traffic_run+0x220>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b07      	cmp	r3, #7
 8000fcc:	d106      	bne.n	8000fdc <light_traffic_run+0xfc>
			setLedYellow1();
 8000fce:	f7ff fea9 	bl	8000d24 <setLedYellow1>
			count1++;
 8000fd2:	4b4c      	ldr	r3, [pc, #304]	; (8001104 <light_traffic_run+0x224>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	4a4a      	ldr	r2, [pc, #296]	; (8001104 <light_traffic_run+0x224>)
 8000fda:	6013      	str	r3, [r2, #0]
		}
		if (led_status_north_south == RED_AUTO ) {
 8000fdc:	4b48      	ldr	r3, [pc, #288]	; (8001100 <light_traffic_run+0x220>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b05      	cmp	r3, #5
 8000fe2:	d106      	bne.n	8000ff2 <light_traffic_run+0x112>
			setLedRed1();
 8000fe4:	f7ff fe72 	bl	8000ccc <setLedRed1>
			count1 ++;
 8000fe8:	4b46      	ldr	r3, [pc, #280]	; (8001104 <light_traffic_run+0x224>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	3301      	adds	r3, #1
 8000fee:	4a45      	ldr	r2, [pc, #276]	; (8001104 <light_traffic_run+0x224>)
 8000ff0:	6013      	str	r3, [r2, #0]
		}
		if(count1 == time_green && led_status_north_south == GREEN_AUTO ){
 8000ff2:	4b44      	ldr	r3, [pc, #272]	; (8001104 <light_traffic_run+0x224>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d109      	bne.n	8001010 <light_traffic_run+0x130>
 8000ffc:	4b40      	ldr	r3, [pc, #256]	; (8001100 <light_traffic_run+0x220>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b06      	cmp	r3, #6
 8001002:	d105      	bne.n	8001010 <light_traffic_run+0x130>
			led_status_north_south = YELLOW_AUTO;
 8001004:	4b3e      	ldr	r3, [pc, #248]	; (8001100 <light_traffic_run+0x220>)
 8001006:	2207      	movs	r2, #7
 8001008:	601a      	str	r2, [r3, #0]
			count1 = 0;
 800100a:	4b3e      	ldr	r3, [pc, #248]	; (8001104 <light_traffic_run+0x224>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
		}
		if(count1 == time_yellow && led_status_north_south == YELLOW_AUTO){
 8001010:	4b3c      	ldr	r3, [pc, #240]	; (8001104 <light_traffic_run+0x224>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68ba      	ldr	r2, [r7, #8]
 8001016:	429a      	cmp	r2, r3
 8001018:	d109      	bne.n	800102e <light_traffic_run+0x14e>
 800101a:	4b39      	ldr	r3, [pc, #228]	; (8001100 <light_traffic_run+0x220>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b07      	cmp	r3, #7
 8001020:	d105      	bne.n	800102e <light_traffic_run+0x14e>
			led_status_north_south = RED_AUTO;
 8001022:	4b37      	ldr	r3, [pc, #220]	; (8001100 <light_traffic_run+0x220>)
 8001024:	2205      	movs	r2, #5
 8001026:	601a      	str	r2, [r3, #0]
			count1 = 0;
 8001028:	4b36      	ldr	r3, [pc, #216]	; (8001104 <light_traffic_run+0x224>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
		}
		if(count1 == time_red && led_status_north_south == RED_AUTO ){
 800102e:	4b35      	ldr	r3, [pc, #212]	; (8001104 <light_traffic_run+0x224>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	429a      	cmp	r2, r3
 8001036:	d109      	bne.n	800104c <light_traffic_run+0x16c>
 8001038:	4b31      	ldr	r3, [pc, #196]	; (8001100 <light_traffic_run+0x220>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b05      	cmp	r3, #5
 800103e:	d105      	bne.n	800104c <light_traffic_run+0x16c>
			led_status_north_south = GREEN_AUTO;
 8001040:	4b2f      	ldr	r3, [pc, #188]	; (8001100 <light_traffic_run+0x220>)
 8001042:	2206      	movs	r2, #6
 8001044:	601a      	str	r2, [r3, #0]
			count1 = 0;
 8001046:	4b2f      	ldr	r3, [pc, #188]	; (8001104 <light_traffic_run+0x224>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
		}
		// dieu khien chuyen tin hieu he thong  den 2 ( led 7 doan o duoi)
		if (led_status_east_west == RED_AUTO ) {
 800104c:	4b2e      	ldr	r3, [pc, #184]	; (8001108 <light_traffic_run+0x228>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b05      	cmp	r3, #5
 8001052:	d106      	bne.n	8001062 <light_traffic_run+0x182>
			setLedRed();
 8001054:	f7ff fde2 	bl	8000c1c <setLedRed>
			count ++;
 8001058:	4b2c      	ldr	r3, [pc, #176]	; (800110c <light_traffic_run+0x22c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	3301      	adds	r3, #1
 800105e:	4a2b      	ldr	r2, [pc, #172]	; (800110c <light_traffic_run+0x22c>)
 8001060:	6013      	str	r3, [r2, #0]
		}
		if(led_status_east_west == YELLOW_AUTO){
 8001062:	4b29      	ldr	r3, [pc, #164]	; (8001108 <light_traffic_run+0x228>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b07      	cmp	r3, #7
 8001068:	d106      	bne.n	8001078 <light_traffic_run+0x198>
			setLedYellow();
 800106a:	f7ff fe03 	bl	8000c74 <setLedYellow>
			count++;
 800106e:	4b27      	ldr	r3, [pc, #156]	; (800110c <light_traffic_run+0x22c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	4a25      	ldr	r2, [pc, #148]	; (800110c <light_traffic_run+0x22c>)
 8001076:	6013      	str	r3, [r2, #0]
		}
		if (led_status_east_west == GREEN_AUTO) {
 8001078:	4b23      	ldr	r3, [pc, #140]	; (8001108 <light_traffic_run+0x228>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b06      	cmp	r3, #6
 800107e:	d106      	bne.n	800108e <light_traffic_run+0x1ae>
			setLedGreen();
 8001080:	f7ff fde2 	bl	8000c48 <setLedGreen>
			count ++;
 8001084:	4b21      	ldr	r3, [pc, #132]	; (800110c <light_traffic_run+0x22c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	4a20      	ldr	r2, [pc, #128]	; (800110c <light_traffic_run+0x22c>)
 800108c:	6013      	str	r3, [r2, #0]
		}
		if(count == time_red && led_status_east_west == RED_AUTO ){
 800108e:	4b1f      	ldr	r3, [pc, #124]	; (800110c <light_traffic_run+0x22c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	d109      	bne.n	80010ac <light_traffic_run+0x1cc>
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <light_traffic_run+0x228>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b05      	cmp	r3, #5
 800109e:	d105      	bne.n	80010ac <light_traffic_run+0x1cc>
			led_status_east_west = GREEN_AUTO;
 80010a0:	4b19      	ldr	r3, [pc, #100]	; (8001108 <light_traffic_run+0x228>)
 80010a2:	2206      	movs	r2, #6
 80010a4:	601a      	str	r2, [r3, #0]
			count = 0;
 80010a6:	4b19      	ldr	r3, [pc, #100]	; (800110c <light_traffic_run+0x22c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
		}
		if(count == time_green && led_status_east_west == GREEN_AUTO ){
 80010ac:	4b17      	ldr	r3, [pc, #92]	; (800110c <light_traffic_run+0x22c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d109      	bne.n	80010ca <light_traffic_run+0x1ea>
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <light_traffic_run+0x228>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d105      	bne.n	80010ca <light_traffic_run+0x1ea>
			led_status_east_west = YELLOW_AUTO;
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <light_traffic_run+0x228>)
 80010c0:	2207      	movs	r2, #7
 80010c2:	601a      	str	r2, [r3, #0]
			count = 0;
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <light_traffic_run+0x22c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
		}
		if(count == time_yellow && led_status_east_west == YELLOW_AUTO){
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <light_traffic_run+0x22c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d109      	bne.n	80010e8 <light_traffic_run+0x208>
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <light_traffic_run+0x228>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b07      	cmp	r3, #7
 80010da:	d105      	bne.n	80010e8 <light_traffic_run+0x208>
			led_status_east_west = RED_AUTO;
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <light_traffic_run+0x228>)
 80010de:	2205      	movs	r2, #5
 80010e0:	601a      	str	r2, [r3, #0]
			count = 0;
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <light_traffic_run+0x22c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
		}


}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200000a4 	.word	0x200000a4
 80010f4:	20000098 	.word	0x20000098
 80010f8:	2000009c 	.word	0x2000009c
 80010fc:	200000a8 	.word	0x200000a8
 8001100:	20000094 	.word	0x20000094
 8001104:	20000088 	.word	0x20000088
 8001108:	200000a0 	.word	0x200000a0
 800110c:	20000084 	.word	0x20000084

08001110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001114:	f000 f9f0 	bl	80014f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001118:	f000 f80e 	bl	8001138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111c:	f000 f894 	bl	8001248 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001120:	f000 f846 	bl	80011b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 8001124:	4803      	ldr	r0, [pc, #12]	; (8001134 <main+0x24>)
 8001126:	f001 f945 	bl	80023b4 <HAL_TIM_Base_Start_IT>
//HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,GPIO_PIN_SET);
//HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,GPIO_PIN_SET);
//updateClockBuffer(3, 5);
  while (1)
  {
	  fsm_automatic_run();
 800112a:	f7ff fbdd 	bl	80008e8 <fsm_automatic_run>
      fsm_manual_run();
 800112e:	f7ff fc83 	bl	8000a38 <fsm_manual_run>
	  fsm_automatic_run();
 8001132:	e7fa      	b.n	800112a <main+0x1a>
 8001134:	200000ac 	.word	0x200000ac

08001138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b090      	sub	sp, #64	; 0x40
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	f107 0318 	add.w	r3, r7, #24
 8001142:	2228      	movs	r2, #40	; 0x28
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f001 fce4 	bl	8002b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800115a:	2302      	movs	r3, #2
 800115c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800115e:	2301      	movs	r3, #1
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001162:	2310      	movs	r3, #16
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001166:	2300      	movs	r3, #0
 8001168:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116a:	f107 0318 	add.w	r3, r7, #24
 800116e:	4618      	mov	r0, r3
 8001170:	f000 fcf4 	bl	8001b5c <HAL_RCC_OscConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800117a:	f000 f8d5 	bl	8001328 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117e:	230f      	movs	r3, #15
 8001180:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f000 ff60 	bl	800205c <HAL_RCC_ClockConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011a2:	f000 f8c1 	bl	8001328 <Error_Handler>
  }
}
 80011a6:	bf00      	nop
 80011a8:	3740      	adds	r7, #64	; 0x40
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c4:	463b      	mov	r3, r7
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011cc:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <MX_TIM2_Init+0x94>)
 80011ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <MX_TIM2_Init+0x94>)
 80011d6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80011da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <MX_TIM2_Init+0x94>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <MX_TIM2_Init+0x94>)
 80011e4:	2209      	movs	r2, #9
 80011e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e8:	4b16      	ldr	r3, [pc, #88]	; (8001244 <MX_TIM2_Init+0x94>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <MX_TIM2_Init+0x94>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011f4:	4813      	ldr	r0, [pc, #76]	; (8001244 <MX_TIM2_Init+0x94>)
 80011f6:	f001 f88d 	bl	8002314 <HAL_TIM_Base_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001200:	f000 f892 	bl	8001328 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001208:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	4619      	mov	r1, r3
 8001210:	480c      	ldr	r0, [pc, #48]	; (8001244 <MX_TIM2_Init+0x94>)
 8001212:	f001 fa0b 	bl	800262c <HAL_TIM_ConfigClockSource>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800121c:	f000 f884 	bl	8001328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001220:	2300      	movs	r3, #0
 8001222:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001228:	463b      	mov	r3, r7
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_TIM2_Init+0x94>)
 800122e:	f001 fbe3 	bl	80029f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001238:	f000 f876 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200000ac 	.word	0x200000ac

08001248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125c:	4b29      	ldr	r3, [pc, #164]	; (8001304 <MX_GPIO_Init+0xbc>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4a28      	ldr	r2, [pc, #160]	; (8001304 <MX_GPIO_Init+0xbc>)
 8001262:	f043 0304 	orr.w	r3, r3, #4
 8001266:	6193      	str	r3, [r2, #24]
 8001268:	4b26      	ldr	r3, [pc, #152]	; (8001304 <MX_GPIO_Init+0xbc>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001274:	4b23      	ldr	r3, [pc, #140]	; (8001304 <MX_GPIO_Init+0xbc>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4a22      	ldr	r2, [pc, #136]	; (8001304 <MX_GPIO_Init+0xbc>)
 800127a:	f043 0308 	orr.w	r3, r3, #8
 800127e:	6193      	str	r3, [r2, #24]
 8001280:	4b20      	ldr	r3, [pc, #128]	; (8001304 <MX_GPIO_Init+0xbc>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f003 0308 	and.w	r3, r3, #8
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED_Pin
 800128c:	2200      	movs	r2, #0
 800128e:	f647 01fc 	movw	r1, #30972	; 0x78fc
 8001292:	481d      	ldr	r0, [pc, #116]	; (8001308 <MX_GPIO_Init+0xc0>)
 8001294:	f000 fc31 	bl	8001afa <HAL_GPIO_WritePin>
                          |LED_YELLOW_Pin|LED_GREEN_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D1_Pin
 8001298:	2200      	movs	r2, #0
 800129a:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800129e:	481b      	ldr	r0, [pc, #108]	; (800130c <MX_GPIO_Init+0xc4>)
 80012a0:	f000 fc2b 	bl	8001afa <HAL_GPIO_WritePin>
                          |SEG_B1_Pin|SEG_C1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED_Pin
                           LED_YELLOW_Pin LED_GREEN_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED_Pin
 80012a4:	f647 03fc 	movw	r3, #30972	; 0x78fc
 80012a8:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_Pin|LED_GREEN_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2302      	movs	r3, #2
 80012b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b6:	f107 0308 	add.w	r3, r7, #8
 80012ba:	4619      	mov	r1, r3
 80012bc:	4812      	ldr	r0, [pc, #72]	; (8001308 <MX_GPIO_Init+0xc0>)
 80012be:	f000 fa8b 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_A_Pin SEG_B_Pin SEG_C_Pin SEG_D1_Pin
                           SEG_E1_Pin SEG_F1_Pin SEG_G1_Pin SEG_D_Pin
                           SEG_E_Pin SEG_F_Pin SEG_G_Pin SEG_A1_Pin
                           SEG_B1_Pin SEG_C1_Pin */
  GPIO_InitStruct.Pin = SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D1_Pin
 80012c2:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80012c6:	60bb      	str	r3, [r7, #8]
                          |SEG_E1_Pin|SEG_F1_Pin|SEG_G1_Pin|SEG_D_Pin
                          |SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|SEG_A1_Pin
                          |SEG_B1_Pin|SEG_C1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2302      	movs	r3, #2
 80012d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d4:	f107 0308 	add.w	r3, r7, #8
 80012d8:	4619      	mov	r1, r3
 80012da:	480c      	ldr	r0, [pc, #48]	; (800130c <MX_GPIO_Init+0xc4>)
 80012dc:	f000 fa7c 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 80012e0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80012e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 0308 	add.w	r3, r7, #8
 80012f2:	4619      	mov	r1, r3
 80012f4:	4804      	ldr	r0, [pc, #16]	; (8001308 <MX_GPIO_Init+0xc0>)
 80012f6:	f000 fa6f 	bl	80017d8 <HAL_GPIO_Init>

}
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000
 8001308:	40010800 	.word	0x40010800
 800130c:	40010c00 	.word	0x40010c00

08001310 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	timerRun();
 8001318:	f000 f8ae 	bl	8001478 <timerRun>
	getKeyInput();
 800131c:	f7ff f9e8 	bl	80006f0 <getKeyInput>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800132c:	b672      	cpsid	i
}
 800132e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001330:	e7fe      	b.n	8001330 <Error_Handler+0x8>
	...

08001334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <HAL_MspInit+0x5c>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	4a14      	ldr	r2, [pc, #80]	; (8001390 <HAL_MspInit+0x5c>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6193      	str	r3, [r2, #24]
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_MspInit+0x5c>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <HAL_MspInit+0x5c>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <HAL_MspInit+0x5c>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135c:	61d3      	str	r3, [r2, #28]
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <HAL_MspInit+0x5c>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_MspInit+0x60>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <HAL_MspInit+0x60>)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	40021000 	.word	0x40021000
 8001394:	40010000 	.word	0x40010000

08001398 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013a8:	d113      	bne.n	80013d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <HAL_TIM_Base_MspInit+0x44>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <HAL_TIM_Base_MspInit+0x44>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	61d3      	str	r3, [r2, #28]
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <HAL_TIM_Base_MspInit+0x44>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	201c      	movs	r0, #28
 80013c8:	f000 f9cf 	bl	800176a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013cc:	201c      	movs	r0, #28
 80013ce:	f000 f9e8 	bl	80017a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <NMI_Handler+0x4>

080013e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <MemManage_Handler+0x4>

080013f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <BusFault_Handler+0x4>

080013f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <UsageFault_Handler+0x4>

080013fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr

0800140a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr

08001416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001426:	f000 f8ad 	bl	8001584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <TIM2_IRQHandler+0x10>)
 8001436:	f001 f809 	bl	800244c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200000ac 	.word	0x200000ac

08001444 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <setTimer1>:
 */

#include "timer.h"
int timer1_counter = 0;
int timer1_flag = 0;
void setTimer1( int duration ){
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001458:	4a05      	ldr	r2, [pc, #20]	; (8001470 <setTimer1+0x20>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <setTimer1+0x24>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	2000008c 	.word	0x2000008c
 8001474:	20000090 	.word	0x20000090

08001478 <timerRun>:
void timerRun(){
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <timerRun+0x2c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	dd0b      	ble.n	800149c <timerRun+0x24>
		timer1_counter --;
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <timerRun+0x2c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	3b01      	subs	r3, #1
 800148a:	4a06      	ldr	r2, [pc, #24]	; (80014a4 <timerRun+0x2c>)
 800148c:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <timerRun+0x2c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	dc02      	bgt.n	800149c <timerRun+0x24>
			timer1_flag = 1;
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <timerRun+0x30>)
 8001498:	2201      	movs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	2000008c 	.word	0x2000008c
 80014a8:	20000090 	.word	0x20000090

080014ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014ac:	f7ff ffca 	bl	8001444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b0:	480b      	ldr	r0, [pc, #44]	; (80014e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014b2:	490c      	ldr	r1, [pc, #48]	; (80014e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014b4:	4a0c      	ldr	r2, [pc, #48]	; (80014e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b8:	e002      	b.n	80014c0 <LoopCopyDataInit>

080014ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014be:	3304      	adds	r3, #4

080014c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c4:	d3f9      	bcc.n	80014ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c6:	4a09      	ldr	r2, [pc, #36]	; (80014ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014c8:	4c09      	ldr	r4, [pc, #36]	; (80014f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014cc:	e001      	b.n	80014d2 <LoopFillZerobss>

080014ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d0:	3204      	adds	r2, #4

080014d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d4:	d3fb      	bcc.n	80014ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014d6:	f001 faf9 	bl	8002acc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014da:	f7ff fe19 	bl	8001110 <main>
  bx lr
 80014de:	4770      	bx	lr
  ldr r0, =_sdata
 80014e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e4:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 80014e8:	08002b68 	.word	0x08002b68
  ldr r2, =_sbss
 80014ec:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 80014f0:	200000f8 	.word	0x200000f8

080014f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014f4:	e7fe      	b.n	80014f4 <ADC1_2_IRQHandler>
	...

080014f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <HAL_Init+0x28>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a07      	ldr	r2, [pc, #28]	; (8001520 <HAL_Init+0x28>)
 8001502:	f043 0310 	orr.w	r3, r3, #16
 8001506:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001508:	2003      	movs	r0, #3
 800150a:	f000 f923 	bl	8001754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800150e:	200f      	movs	r0, #15
 8001510:	f000 f808 	bl	8001524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001514:	f7ff ff0e 	bl	8001334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40022000 	.word	0x40022000

08001524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_InitTick+0x54>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_InitTick+0x58>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153a:	fbb3 f3f1 	udiv	r3, r3, r1
 800153e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f000 f93b 	bl	80017be <HAL_SYSTICK_Config>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e00e      	b.n	8001570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b0f      	cmp	r3, #15
 8001556:	d80a      	bhi.n	800156e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001558:	2200      	movs	r2, #0
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f000 f903 	bl	800176a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001564:	4a06      	ldr	r2, [pc, #24]	; (8001580 <HAL_InitTick+0x5c>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	e000      	b.n	8001570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000038 	.word	0x20000038
 800157c:	20000040 	.word	0x20000040
 8001580:	2000003c 	.word	0x2000003c

08001584 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <HAL_IncTick+0x1c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_IncTick+0x20>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4413      	add	r3, r2
 8001594:	4a03      	ldr	r2, [pc, #12]	; (80015a4 <HAL_IncTick+0x20>)
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	20000040 	.word	0x20000040
 80015a4:	200000f4 	.word	0x200000f4

080015a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return uwTick;
 80015ac:	4b02      	ldr	r3, [pc, #8]	; (80015b8 <HAL_GetTick+0x10>)
 80015ae:	681b      	ldr	r3, [r3, #0]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr
 80015b8:	200000f4 	.word	0x200000f4

080015bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d8:	4013      	ands	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ee:	4a04      	ldr	r2, [pc, #16]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	60d3      	str	r3, [r2, #12]
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <__NVIC_GetPriorityGrouping+0x18>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	f003 0307 	and.w	r3, r3, #7
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	2b00      	cmp	r3, #0
 8001630:	db0b      	blt.n	800164a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	f003 021f 	and.w	r2, r3, #31
 8001638:	4906      	ldr	r1, [pc, #24]	; (8001654 <__NVIC_EnableIRQ+0x34>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	2001      	movs	r0, #1
 8001642:	fa00 f202 	lsl.w	r2, r0, r2
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	e000e100 	.word	0xe000e100

08001658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	2b00      	cmp	r3, #0
 800166a:	db0a      	blt.n	8001682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	490c      	ldr	r1, [pc, #48]	; (80016a4 <__NVIC_SetPriority+0x4c>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	440b      	add	r3, r1
 800167c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001680:	e00a      	b.n	8001698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4908      	ldr	r1, [pc, #32]	; (80016a8 <__NVIC_SetPriority+0x50>)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	3b04      	subs	r3, #4
 8001690:	0112      	lsls	r2, r2, #4
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	440b      	add	r3, r1
 8001696:	761a      	strb	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000e100 	.word	0xe000e100
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f1c3 0307 	rsb	r3, r3, #7
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	bf28      	it	cs
 80016ca:	2304      	movcs	r3, #4
 80016cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3304      	adds	r3, #4
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d902      	bls.n	80016dc <NVIC_EncodePriority+0x30>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3b03      	subs	r3, #3
 80016da:	e000      	b.n	80016de <NVIC_EncodePriority+0x32>
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43d9      	mvns	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	4313      	orrs	r3, r2
         );
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	; 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001720:	d301      	bcc.n	8001726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001722:	2301      	movs	r3, #1
 8001724:	e00f      	b.n	8001746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <SysTick_Config+0x40>)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800172e:	210f      	movs	r1, #15
 8001730:	f04f 30ff 	mov.w	r0, #4294967295
 8001734:	f7ff ff90 	bl	8001658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <SysTick_Config+0x40>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173e:	4b04      	ldr	r3, [pc, #16]	; (8001750 <SysTick_Config+0x40>)
 8001740:	2207      	movs	r2, #7
 8001742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	e000e010 	.word	0xe000e010

08001754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ff2d 	bl	80015bc <__NVIC_SetPriorityGrouping>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800177c:	f7ff ff42 	bl	8001604 <__NVIC_GetPriorityGrouping>
 8001780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	6978      	ldr	r0, [r7, #20]
 8001788:	f7ff ff90 	bl	80016ac <NVIC_EncodePriority>
 800178c:	4602      	mov	r2, r0
 800178e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff5f 	bl	8001658 <__NVIC_SetPriority>
}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff35 	bl	8001620 <__NVIC_EnableIRQ>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ffa2 	bl	8001710 <SysTick_Config>
 80017cc:	4603      	mov	r3, r0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d8:	b480      	push	{r7}
 80017da:	b08b      	sub	sp, #44	; 0x2c
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ea:	e148      	b.n	8001a7e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017ec:	2201      	movs	r2, #1
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	69fa      	ldr	r2, [r7, #28]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	429a      	cmp	r2, r3
 8001806:	f040 8137 	bne.w	8001a78 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4aa3      	ldr	r2, [pc, #652]	; (8001a9c <HAL_GPIO_Init+0x2c4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d05e      	beq.n	80018d2 <HAL_GPIO_Init+0xfa>
 8001814:	4aa1      	ldr	r2, [pc, #644]	; (8001a9c <HAL_GPIO_Init+0x2c4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d875      	bhi.n	8001906 <HAL_GPIO_Init+0x12e>
 800181a:	4aa1      	ldr	r2, [pc, #644]	; (8001aa0 <HAL_GPIO_Init+0x2c8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d058      	beq.n	80018d2 <HAL_GPIO_Init+0xfa>
 8001820:	4a9f      	ldr	r2, [pc, #636]	; (8001aa0 <HAL_GPIO_Init+0x2c8>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d86f      	bhi.n	8001906 <HAL_GPIO_Init+0x12e>
 8001826:	4a9f      	ldr	r2, [pc, #636]	; (8001aa4 <HAL_GPIO_Init+0x2cc>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d052      	beq.n	80018d2 <HAL_GPIO_Init+0xfa>
 800182c:	4a9d      	ldr	r2, [pc, #628]	; (8001aa4 <HAL_GPIO_Init+0x2cc>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d869      	bhi.n	8001906 <HAL_GPIO_Init+0x12e>
 8001832:	4a9d      	ldr	r2, [pc, #628]	; (8001aa8 <HAL_GPIO_Init+0x2d0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d04c      	beq.n	80018d2 <HAL_GPIO_Init+0xfa>
 8001838:	4a9b      	ldr	r2, [pc, #620]	; (8001aa8 <HAL_GPIO_Init+0x2d0>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d863      	bhi.n	8001906 <HAL_GPIO_Init+0x12e>
 800183e:	4a9b      	ldr	r2, [pc, #620]	; (8001aac <HAL_GPIO_Init+0x2d4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d046      	beq.n	80018d2 <HAL_GPIO_Init+0xfa>
 8001844:	4a99      	ldr	r2, [pc, #612]	; (8001aac <HAL_GPIO_Init+0x2d4>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d85d      	bhi.n	8001906 <HAL_GPIO_Init+0x12e>
 800184a:	2b12      	cmp	r3, #18
 800184c:	d82a      	bhi.n	80018a4 <HAL_GPIO_Init+0xcc>
 800184e:	2b12      	cmp	r3, #18
 8001850:	d859      	bhi.n	8001906 <HAL_GPIO_Init+0x12e>
 8001852:	a201      	add	r2, pc, #4	; (adr r2, 8001858 <HAL_GPIO_Init+0x80>)
 8001854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001858:	080018d3 	.word	0x080018d3
 800185c:	080018ad 	.word	0x080018ad
 8001860:	080018bf 	.word	0x080018bf
 8001864:	08001901 	.word	0x08001901
 8001868:	08001907 	.word	0x08001907
 800186c:	08001907 	.word	0x08001907
 8001870:	08001907 	.word	0x08001907
 8001874:	08001907 	.word	0x08001907
 8001878:	08001907 	.word	0x08001907
 800187c:	08001907 	.word	0x08001907
 8001880:	08001907 	.word	0x08001907
 8001884:	08001907 	.word	0x08001907
 8001888:	08001907 	.word	0x08001907
 800188c:	08001907 	.word	0x08001907
 8001890:	08001907 	.word	0x08001907
 8001894:	08001907 	.word	0x08001907
 8001898:	08001907 	.word	0x08001907
 800189c:	080018b5 	.word	0x080018b5
 80018a0:	080018c9 	.word	0x080018c9
 80018a4:	4a82      	ldr	r2, [pc, #520]	; (8001ab0 <HAL_GPIO_Init+0x2d8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018aa:	e02c      	b.n	8001906 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	623b      	str	r3, [r7, #32]
          break;
 80018b2:	e029      	b.n	8001908 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	3304      	adds	r3, #4
 80018ba:	623b      	str	r3, [r7, #32]
          break;
 80018bc:	e024      	b.n	8001908 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	3308      	adds	r3, #8
 80018c4:	623b      	str	r3, [r7, #32]
          break;
 80018c6:	e01f      	b.n	8001908 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	330c      	adds	r3, #12
 80018ce:	623b      	str	r3, [r7, #32]
          break;
 80018d0:	e01a      	b.n	8001908 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d102      	bne.n	80018e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018da:	2304      	movs	r3, #4
 80018dc:	623b      	str	r3, [r7, #32]
          break;
 80018de:	e013      	b.n	8001908 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d105      	bne.n	80018f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018e8:	2308      	movs	r3, #8
 80018ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	611a      	str	r2, [r3, #16]
          break;
 80018f2:	e009      	b.n	8001908 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018f4:	2308      	movs	r3, #8
 80018f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	615a      	str	r2, [r3, #20]
          break;
 80018fe:	e003      	b.n	8001908 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001900:	2300      	movs	r3, #0
 8001902:	623b      	str	r3, [r7, #32]
          break;
 8001904:	e000      	b.n	8001908 <HAL_GPIO_Init+0x130>
          break;
 8001906:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	2bff      	cmp	r3, #255	; 0xff
 800190c:	d801      	bhi.n	8001912 <HAL_GPIO_Init+0x13a>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	e001      	b.n	8001916 <HAL_GPIO_Init+0x13e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3304      	adds	r3, #4
 8001916:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	2bff      	cmp	r3, #255	; 0xff
 800191c:	d802      	bhi.n	8001924 <HAL_GPIO_Init+0x14c>
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	e002      	b.n	800192a <HAL_GPIO_Init+0x152>
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	3b08      	subs	r3, #8
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	210f      	movs	r1, #15
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	fa01 f303 	lsl.w	r3, r1, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	401a      	ands	r2, r3
 800193c:	6a39      	ldr	r1, [r7, #32]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	fa01 f303 	lsl.w	r3, r1, r3
 8001944:	431a      	orrs	r2, r3
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 8090 	beq.w	8001a78 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001958:	4b56      	ldr	r3, [pc, #344]	; (8001ab4 <HAL_GPIO_Init+0x2dc>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4a55      	ldr	r2, [pc, #340]	; (8001ab4 <HAL_GPIO_Init+0x2dc>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6193      	str	r3, [r2, #24]
 8001964:	4b53      	ldr	r3, [pc, #332]	; (8001ab4 <HAL_GPIO_Init+0x2dc>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001970:	4a51      	ldr	r2, [pc, #324]	; (8001ab8 <HAL_GPIO_Init+0x2e0>)
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	089b      	lsrs	r3, r3, #2
 8001976:	3302      	adds	r3, #2
 8001978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	220f      	movs	r2, #15
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	4013      	ands	r3, r2
 8001992:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a49      	ldr	r2, [pc, #292]	; (8001abc <HAL_GPIO_Init+0x2e4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d00d      	beq.n	80019b8 <HAL_GPIO_Init+0x1e0>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a48      	ldr	r2, [pc, #288]	; (8001ac0 <HAL_GPIO_Init+0x2e8>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d007      	beq.n	80019b4 <HAL_GPIO_Init+0x1dc>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a47      	ldr	r2, [pc, #284]	; (8001ac4 <HAL_GPIO_Init+0x2ec>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d101      	bne.n	80019b0 <HAL_GPIO_Init+0x1d8>
 80019ac:	2302      	movs	r3, #2
 80019ae:	e004      	b.n	80019ba <HAL_GPIO_Init+0x1e2>
 80019b0:	2303      	movs	r3, #3
 80019b2:	e002      	b.n	80019ba <HAL_GPIO_Init+0x1e2>
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <HAL_GPIO_Init+0x1e2>
 80019b8:	2300      	movs	r3, #0
 80019ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019bc:	f002 0203 	and.w	r2, r2, #3
 80019c0:	0092      	lsls	r2, r2, #2
 80019c2:	4093      	lsls	r3, r2
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019ca:	493b      	ldr	r1, [pc, #236]	; (8001ab8 <HAL_GPIO_Init+0x2e0>)
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	3302      	adds	r3, #2
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d006      	beq.n	80019f2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019e4:	4b38      	ldr	r3, [pc, #224]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	4937      	ldr	r1, [pc, #220]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	608b      	str	r3, [r1, #8]
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019f2:	4b35      	ldr	r3, [pc, #212]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	4933      	ldr	r1, [pc, #204]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d006      	beq.n	8001a1a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a0c:	4b2e      	ldr	r3, [pc, #184]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	492d      	ldr	r1, [pc, #180]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	60cb      	str	r3, [r1, #12]
 8001a18:	e006      	b.n	8001a28 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	4929      	ldr	r1, [pc, #164]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a34:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	4923      	ldr	r1, [pc, #140]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]
 8001a40:	e006      	b.n	8001a50 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a42:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	491f      	ldr	r1, [pc, #124]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d006      	beq.n	8001a6a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4919      	ldr	r1, [pc, #100]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	600b      	str	r3, [r1, #0]
 8001a68:	e006      	b.n	8001a78 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a6a:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	4915      	ldr	r1, [pc, #84]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	fa22 f303 	lsr.w	r3, r2, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f47f aeaf 	bne.w	80017ec <HAL_GPIO_Init+0x14>
  }
}
 8001a8e:	bf00      	nop
 8001a90:	bf00      	nop
 8001a92:	372c      	adds	r7, #44	; 0x2c
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	10320000 	.word	0x10320000
 8001aa0:	10310000 	.word	0x10310000
 8001aa4:	10220000 	.word	0x10220000
 8001aa8:	10210000 	.word	0x10210000
 8001aac:	10120000 	.word	0x10120000
 8001ab0:	10110000 	.word	0x10110000
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40010000 	.word	0x40010000
 8001abc:	40010800 	.word	0x40010800
 8001ac0:	40010c00 	.word	0x40010c00
 8001ac4:	40011000 	.word	0x40011000
 8001ac8:	40010400 	.word	0x40010400

08001acc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	887b      	ldrh	r3, [r7, #2]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	73fb      	strb	r3, [r7, #15]
 8001ae8:	e001      	b.n	8001aee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	460b      	mov	r3, r1
 8001b04:	807b      	strh	r3, [r7, #2]
 8001b06:	4613      	mov	r3, r2
 8001b08:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b0a:	787b      	ldrb	r3, [r7, #1]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b10:	887a      	ldrh	r2, [r7, #2]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b16:	e003      	b.n	8001b20 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	041a      	lsls	r2, r3, #16
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	611a      	str	r2, [r3, #16]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b085      	sub	sp, #20
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	460b      	mov	r3, r1
 8001b34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b3c:	887a      	ldrh	r2, [r7, #2]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4013      	ands	r3, r2
 8001b42:	041a      	lsls	r2, r3, #16
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	43d9      	mvns	r1, r3
 8001b48:	887b      	ldrh	r3, [r7, #2]
 8001b4a:	400b      	ands	r3, r1
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	611a      	str	r2, [r3, #16]
}
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e26c      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 8087 	beq.w	8001c8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b7c:	4b92      	ldr	r3, [pc, #584]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 030c 	and.w	r3, r3, #12
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d00c      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b88:	4b8f      	ldr	r3, [pc, #572]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d112      	bne.n	8001bba <HAL_RCC_OscConfig+0x5e>
 8001b94:	4b8c      	ldr	r3, [pc, #560]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba0:	d10b      	bne.n	8001bba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba2:	4b89      	ldr	r3, [pc, #548]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d06c      	beq.n	8001c88 <HAL_RCC_OscConfig+0x12c>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d168      	bne.n	8001c88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e246      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc2:	d106      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x76>
 8001bc4:	4b80      	ldr	r3, [pc, #512]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a7f      	ldr	r2, [pc, #508]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	e02e      	b.n	8001c30 <HAL_RCC_OscConfig+0xd4>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x98>
 8001bda:	4b7b      	ldr	r3, [pc, #492]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a7a      	ldr	r2, [pc, #488]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	4b78      	ldr	r3, [pc, #480]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a77      	ldr	r2, [pc, #476]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e01d      	b.n	8001c30 <HAL_RCC_OscConfig+0xd4>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bfc:	d10c      	bne.n	8001c18 <HAL_RCC_OscConfig+0xbc>
 8001bfe:	4b72      	ldr	r3, [pc, #456]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a71      	ldr	r2, [pc, #452]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	4b6f      	ldr	r3, [pc, #444]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a6e      	ldr	r2, [pc, #440]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	e00b      	b.n	8001c30 <HAL_RCC_OscConfig+0xd4>
 8001c18:	4b6b      	ldr	r3, [pc, #428]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a6a      	ldr	r2, [pc, #424]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	4b68      	ldr	r3, [pc, #416]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a67      	ldr	r2, [pc, #412]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d013      	beq.n	8001c60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7ff fcb6 	bl	80015a8 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c40:	f7ff fcb2 	bl	80015a8 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b64      	cmp	r3, #100	; 0x64
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e1fa      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c52:	4b5d      	ldr	r3, [pc, #372]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0xe4>
 8001c5e:	e014      	b.n	8001c8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c60:	f7ff fca2 	bl	80015a8 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c68:	f7ff fc9e 	bl	80015a8 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b64      	cmp	r3, #100	; 0x64
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e1e6      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7a:	4b53      	ldr	r3, [pc, #332]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x10c>
 8001c86:	e000      	b.n	8001c8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d063      	beq.n	8001d5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c96:	4b4c      	ldr	r3, [pc, #304]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00b      	beq.n	8001cba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ca2:	4b49      	ldr	r3, [pc, #292]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d11c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x18c>
 8001cae:	4b46      	ldr	r3, [pc, #280]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d116      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cba:	4b43      	ldr	r3, [pc, #268]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d005      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x176>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d001      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e1ba      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd2:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	4939      	ldr	r1, [pc, #228]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce6:	e03a      	b.n	8001d5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d020      	beq.n	8001d32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf0:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf6:	f7ff fc57 	bl	80015a8 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cfe:	f7ff fc53 	bl	80015a8 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e19b      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d10:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4927      	ldr	r1, [pc, #156]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	600b      	str	r3, [r1, #0]
 8001d30:	e015      	b.n	8001d5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d32:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7ff fc36 	bl	80015a8 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d40:	f7ff fc32 	bl	80015a8 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e17a      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d52:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d03a      	beq.n	8001de0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d019      	beq.n	8001da6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d78:	f7ff fc16 	bl	80015a8 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d80:	f7ff fc12 	bl	80015a8 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e15a      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d92:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f000 fa9a 	bl	80022d8 <RCC_Delay>
 8001da4:	e01c      	b.n	8001de0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dac:	f7ff fbfc 	bl	80015a8 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db2:	e00f      	b.n	8001dd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db4:	f7ff fbf8 	bl	80015a8 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d908      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e140      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
 8001dc6:	bf00      	nop
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	42420000 	.word	0x42420000
 8001dd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd4:	4b9e      	ldr	r3, [pc, #632]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1e9      	bne.n	8001db4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 80a6 	beq.w	8001f3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df2:	4b97      	ldr	r3, [pc, #604]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10d      	bne.n	8001e1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfe:	4b94      	ldr	r3, [pc, #592]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	4a93      	ldr	r2, [pc, #588]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e08:	61d3      	str	r3, [r2, #28]
 8001e0a:	4b91      	ldr	r3, [pc, #580]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e16:	2301      	movs	r3, #1
 8001e18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1a:	4b8e      	ldr	r3, [pc, #568]	; (8002054 <HAL_RCC_OscConfig+0x4f8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d118      	bne.n	8001e58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e26:	4b8b      	ldr	r3, [pc, #556]	; (8002054 <HAL_RCC_OscConfig+0x4f8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a8a      	ldr	r2, [pc, #552]	; (8002054 <HAL_RCC_OscConfig+0x4f8>)
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e32:	f7ff fbb9 	bl	80015a8 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3a:	f7ff fbb5 	bl	80015a8 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b64      	cmp	r3, #100	; 0x64
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e0fd      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4c:	4b81      	ldr	r3, [pc, #516]	; (8002054 <HAL_RCC_OscConfig+0x4f8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x312>
 8001e60:	4b7b      	ldr	r3, [pc, #492]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4a7a      	ldr	r2, [pc, #488]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6213      	str	r3, [r2, #32]
 8001e6c:	e02d      	b.n	8001eca <HAL_RCC_OscConfig+0x36e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x334>
 8001e76:	4b76      	ldr	r3, [pc, #472]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	4a75      	ldr	r2, [pc, #468]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	6213      	str	r3, [r2, #32]
 8001e82:	4b73      	ldr	r3, [pc, #460]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	4a72      	ldr	r2, [pc, #456]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001e88:	f023 0304 	bic.w	r3, r3, #4
 8001e8c:	6213      	str	r3, [r2, #32]
 8001e8e:	e01c      	b.n	8001eca <HAL_RCC_OscConfig+0x36e>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	2b05      	cmp	r3, #5
 8001e96:	d10c      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x356>
 8001e98:	4b6d      	ldr	r3, [pc, #436]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	4a6c      	ldr	r2, [pc, #432]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	6213      	str	r3, [r2, #32]
 8001ea4:	4b6a      	ldr	r3, [pc, #424]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4a69      	ldr	r2, [pc, #420]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6213      	str	r3, [r2, #32]
 8001eb0:	e00b      	b.n	8001eca <HAL_RCC_OscConfig+0x36e>
 8001eb2:	4b67      	ldr	r3, [pc, #412]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	4a66      	ldr	r2, [pc, #408]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	6213      	str	r3, [r2, #32]
 8001ebe:	4b64      	ldr	r3, [pc, #400]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4a63      	ldr	r2, [pc, #396]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	f023 0304 	bic.w	r3, r3, #4
 8001ec8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d015      	beq.n	8001efe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed2:	f7ff fb69 	bl	80015a8 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed8:	e00a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eda:	f7ff fb65 	bl	80015a8 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e0ab      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef0:	4b57      	ldr	r3, [pc, #348]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0ee      	beq.n	8001eda <HAL_RCC_OscConfig+0x37e>
 8001efc:	e014      	b.n	8001f28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efe:	f7ff fb53 	bl	80015a8 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f04:	e00a      	b.n	8001f1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f06:	f7ff fb4f 	bl	80015a8 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e095      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f1c:	4b4c      	ldr	r3, [pc, #304]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1ee      	bne.n	8001f06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f28:	7dfb      	ldrb	r3, [r7, #23]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d105      	bne.n	8001f3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f2e:	4b48      	ldr	r3, [pc, #288]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	4a47      	ldr	r2, [pc, #284]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 8081 	beq.w	8002046 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f44:	4b42      	ldr	r3, [pc, #264]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 030c 	and.w	r3, r3, #12
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d061      	beq.n	8002014 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d146      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f58:	4b3f      	ldr	r3, [pc, #252]	; (8002058 <HAL_RCC_OscConfig+0x4fc>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5e:	f7ff fb23 	bl	80015a8 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f66:	f7ff fb1f 	bl	80015a8 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e067      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f78:	4b35      	ldr	r3, [pc, #212]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f0      	bne.n	8001f66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f8c:	d108      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f8e:	4b30      	ldr	r3, [pc, #192]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	492d      	ldr	r1, [pc, #180]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fa0:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a19      	ldr	r1, [r3, #32]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	4927      	ldr	r1, [pc, #156]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb8:	4b27      	ldr	r3, [pc, #156]	; (8002058 <HAL_RCC_OscConfig+0x4fc>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7ff faf3 	bl	80015a8 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc6:	f7ff faef 	bl	80015a8 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e037      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd8:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x46a>
 8001fe4:	e02f      	b.n	8002046 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe6:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <HAL_RCC_OscConfig+0x4fc>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7ff fadc 	bl	80015a8 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff4:	f7ff fad8 	bl	80015a8 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e020      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002006:	4b12      	ldr	r3, [pc, #72]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x498>
 8002012:	e018      	b.n	8002046 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e013      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	429a      	cmp	r2, r3
 8002032:	d106      	bne.n	8002042 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203e:	429a      	cmp	r2, r3
 8002040:	d001      	beq.n	8002046 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000
 8002054:	40007000 	.word	0x40007000
 8002058:	42420060 	.word	0x42420060

0800205c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0d0      	b.n	8002212 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002070:	4b6a      	ldr	r3, [pc, #424]	; (800221c <HAL_RCC_ClockConfig+0x1c0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d910      	bls.n	80020a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207e:	4b67      	ldr	r3, [pc, #412]	; (800221c <HAL_RCC_ClockConfig+0x1c0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 0207 	bic.w	r2, r3, #7
 8002086:	4965      	ldr	r1, [pc, #404]	; (800221c <HAL_RCC_ClockConfig+0x1c0>)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	4313      	orrs	r3, r2
 800208c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800208e:	4b63      	ldr	r3, [pc, #396]	; (800221c <HAL_RCC_ClockConfig+0x1c0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0b8      	b.n	8002212 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d020      	beq.n	80020ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020b8:	4b59      	ldr	r3, [pc, #356]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4a58      	ldr	r2, [pc, #352]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020d0:	4b53      	ldr	r3, [pc, #332]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	4a52      	ldr	r2, [pc, #328]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020dc:	4b50      	ldr	r3, [pc, #320]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	494d      	ldr	r1, [pc, #308]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d040      	beq.n	800217c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d107      	bne.n	8002112 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002102:	4b47      	ldr	r3, [pc, #284]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d115      	bne.n	800213a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e07f      	b.n	8002212 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211a:	4b41      	ldr	r3, [pc, #260]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d109      	bne.n	800213a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e073      	b.n	8002212 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212a:	4b3d      	ldr	r3, [pc, #244]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e06b      	b.n	8002212 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800213a:	4b39      	ldr	r3, [pc, #228]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f023 0203 	bic.w	r2, r3, #3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	4936      	ldr	r1, [pc, #216]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	4313      	orrs	r3, r2
 800214a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800214c:	f7ff fa2c 	bl	80015a8 <HAL_GetTick>
 8002150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002152:	e00a      	b.n	800216a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002154:	f7ff fa28 	bl	80015a8 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e053      	b.n	8002212 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	4b2d      	ldr	r3, [pc, #180]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 020c 	and.w	r2, r3, #12
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	429a      	cmp	r2, r3
 800217a:	d1eb      	bne.n	8002154 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800217c:	4b27      	ldr	r3, [pc, #156]	; (800221c <HAL_RCC_ClockConfig+0x1c0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d210      	bcs.n	80021ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218a:	4b24      	ldr	r3, [pc, #144]	; (800221c <HAL_RCC_ClockConfig+0x1c0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 0207 	bic.w	r2, r3, #7
 8002192:	4922      	ldr	r1, [pc, #136]	; (800221c <HAL_RCC_ClockConfig+0x1c0>)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219a:	4b20      	ldr	r3, [pc, #128]	; (800221c <HAL_RCC_ClockConfig+0x1c0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d001      	beq.n	80021ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e032      	b.n	8002212 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b8:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4916      	ldr	r1, [pc, #88]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d009      	beq.n	80021ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021d6:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	490e      	ldr	r1, [pc, #56]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ea:	f000 f821 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 80021ee:	4602      	mov	r2, r0
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	091b      	lsrs	r3, r3, #4
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	490a      	ldr	r1, [pc, #40]	; (8002224 <HAL_RCC_ClockConfig+0x1c8>)
 80021fc:	5ccb      	ldrb	r3, [r1, r3]
 80021fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002202:	4a09      	ldr	r2, [pc, #36]	; (8002228 <HAL_RCC_ClockConfig+0x1cc>)
 8002204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <HAL_RCC_ClockConfig+0x1d0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff f98a 	bl	8001524 <HAL_InitTick>

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40022000 	.word	0x40022000
 8002220:	40021000 	.word	0x40021000
 8002224:	08002b3c 	.word	0x08002b3c
 8002228:	20000038 	.word	0x20000038
 800222c:	2000003c 	.word	0x2000003c

08002230 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	2300      	movs	r3, #0
 8002244:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800224a:	4b1e      	ldr	r3, [pc, #120]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b04      	cmp	r3, #4
 8002258:	d002      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0x30>
 800225a:	2b08      	cmp	r3, #8
 800225c:	d003      	beq.n	8002266 <HAL_RCC_GetSysClockFreq+0x36>
 800225e:	e027      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002260:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002262:	613b      	str	r3, [r7, #16]
      break;
 8002264:	e027      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	0c9b      	lsrs	r3, r3, #18
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	4a17      	ldr	r2, [pc, #92]	; (80022cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002270:	5cd3      	ldrb	r3, [r2, r3]
 8002272:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d010      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800227e:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	0c5b      	lsrs	r3, r3, #17
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800228a:	5cd3      	ldrb	r3, [r2, r3]
 800228c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a0d      	ldr	r2, [pc, #52]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002292:	fb02 f203 	mul.w	r2, r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	fbb2 f3f3 	udiv	r3, r2, r3
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	e004      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a0c      	ldr	r2, [pc, #48]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022a4:	fb02 f303 	mul.w	r3, r2, r3
 80022a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	613b      	str	r3, [r7, #16]
      break;
 80022ae:	e002      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80022b2:	613b      	str	r3, [r7, #16]
      break;
 80022b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022b6:	693b      	ldr	r3, [r7, #16]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40021000 	.word	0x40021000
 80022c8:	007a1200 	.word	0x007a1200
 80022cc:	08002b4c 	.word	0x08002b4c
 80022d0:	08002b5c 	.word	0x08002b5c
 80022d4:	003d0900 	.word	0x003d0900

080022d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022e0:	4b0a      	ldr	r3, [pc, #40]	; (800230c <RCC_Delay+0x34>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <RCC_Delay+0x38>)
 80022e6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ea:	0a5b      	lsrs	r3, r3, #9
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	fb02 f303 	mul.w	r3, r2, r3
 80022f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022f4:	bf00      	nop
  }
  while (Delay --);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1e5a      	subs	r2, r3, #1
 80022fa:	60fa      	str	r2, [r7, #12]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1f9      	bne.n	80022f4 <RCC_Delay+0x1c>
}
 8002300:	bf00      	nop
 8002302:	bf00      	nop
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr
 800230c:	20000038 	.word	0x20000038
 8002310:	10624dd3 	.word	0x10624dd3

08002314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e041      	b.n	80023aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d106      	bne.n	8002340 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff f82c 	bl	8001398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3304      	adds	r3, #4
 8002350:	4619      	mov	r1, r3
 8002352:	4610      	mov	r0, r2
 8002354:	f000 fa56 	bl	8002804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d001      	beq.n	80023cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e035      	b.n	8002438 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0201 	orr.w	r2, r2, #1
 80023e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a16      	ldr	r2, [pc, #88]	; (8002444 <HAL_TIM_Base_Start_IT+0x90>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d009      	beq.n	8002402 <HAL_TIM_Base_Start_IT+0x4e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f6:	d004      	beq.n	8002402 <HAL_TIM_Base_Start_IT+0x4e>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a12      	ldr	r2, [pc, #72]	; (8002448 <HAL_TIM_Base_Start_IT+0x94>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d111      	bne.n	8002426 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b06      	cmp	r3, #6
 8002412:	d010      	beq.n	8002436 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002424:	e007      	b.n	8002436 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f042 0201 	orr.w	r2, r2, #1
 8002434:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40012c00 	.word	0x40012c00
 8002448:	40000400 	.word	0x40000400

0800244c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d020      	beq.n	80024b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01b      	beq.n	80024b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f06f 0202 	mvn.w	r2, #2
 8002480:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f998 	bl	80027cc <HAL_TIM_IC_CaptureCallback>
 800249c:	e005      	b.n	80024aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f98b 	bl	80027ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f99a 	bl	80027de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d020      	beq.n	80024fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d01b      	beq.n	80024fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f06f 0204 	mvn.w	r2, #4
 80024cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2202      	movs	r2, #2
 80024d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f972 	bl	80027cc <HAL_TIM_IC_CaptureCallback>
 80024e8:	e005      	b.n	80024f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f965 	bl	80027ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f974 	bl	80027de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d020      	beq.n	8002548 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d01b      	beq.n	8002548 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f06f 0208 	mvn.w	r2, #8
 8002518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2204      	movs	r2, #4
 800251e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f94c 	bl	80027cc <HAL_TIM_IC_CaptureCallback>
 8002534:	e005      	b.n	8002542 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f93f 	bl	80027ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 f94e 	bl	80027de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	2b00      	cmp	r3, #0
 8002550:	d020      	beq.n	8002594 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f003 0310 	and.w	r3, r3, #16
 8002558:	2b00      	cmp	r3, #0
 800255a:	d01b      	beq.n	8002594 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f06f 0210 	mvn.w	r2, #16
 8002564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2208      	movs	r2, #8
 800256a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f926 	bl	80027cc <HAL_TIM_IC_CaptureCallback>
 8002580:	e005      	b.n	800258e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f919 	bl	80027ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f928 	bl	80027de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00c      	beq.n	80025b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d007      	beq.n	80025b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0201 	mvn.w	r2, #1
 80025b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7fe feac 	bl	8001310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00c      	beq.n	80025dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d007      	beq.n	80025dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 fa6f 	bl	8002aba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00c      	beq.n	8002600 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d007      	beq.n	8002600 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f8f8 	bl	80027f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f003 0320 	and.w	r3, r3, #32
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00c      	beq.n	8002624 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f003 0320 	and.w	r3, r3, #32
 8002610:	2b00      	cmp	r3, #0
 8002612:	d007      	beq.n	8002624 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f06f 0220 	mvn.w	r2, #32
 800261c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 fa42 	bl	8002aa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_TIM_ConfigClockSource+0x1c>
 8002644:	2302      	movs	r3, #2
 8002646:	e0b4      	b.n	80027b2 <HAL_TIM_ConfigClockSource+0x186>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800266e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002680:	d03e      	beq.n	8002700 <HAL_TIM_ConfigClockSource+0xd4>
 8002682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002686:	f200 8087 	bhi.w	8002798 <HAL_TIM_ConfigClockSource+0x16c>
 800268a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800268e:	f000 8086 	beq.w	800279e <HAL_TIM_ConfigClockSource+0x172>
 8002692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002696:	d87f      	bhi.n	8002798 <HAL_TIM_ConfigClockSource+0x16c>
 8002698:	2b70      	cmp	r3, #112	; 0x70
 800269a:	d01a      	beq.n	80026d2 <HAL_TIM_ConfigClockSource+0xa6>
 800269c:	2b70      	cmp	r3, #112	; 0x70
 800269e:	d87b      	bhi.n	8002798 <HAL_TIM_ConfigClockSource+0x16c>
 80026a0:	2b60      	cmp	r3, #96	; 0x60
 80026a2:	d050      	beq.n	8002746 <HAL_TIM_ConfigClockSource+0x11a>
 80026a4:	2b60      	cmp	r3, #96	; 0x60
 80026a6:	d877      	bhi.n	8002798 <HAL_TIM_ConfigClockSource+0x16c>
 80026a8:	2b50      	cmp	r3, #80	; 0x50
 80026aa:	d03c      	beq.n	8002726 <HAL_TIM_ConfigClockSource+0xfa>
 80026ac:	2b50      	cmp	r3, #80	; 0x50
 80026ae:	d873      	bhi.n	8002798 <HAL_TIM_ConfigClockSource+0x16c>
 80026b0:	2b40      	cmp	r3, #64	; 0x40
 80026b2:	d058      	beq.n	8002766 <HAL_TIM_ConfigClockSource+0x13a>
 80026b4:	2b40      	cmp	r3, #64	; 0x40
 80026b6:	d86f      	bhi.n	8002798 <HAL_TIM_ConfigClockSource+0x16c>
 80026b8:	2b30      	cmp	r3, #48	; 0x30
 80026ba:	d064      	beq.n	8002786 <HAL_TIM_ConfigClockSource+0x15a>
 80026bc:	2b30      	cmp	r3, #48	; 0x30
 80026be:	d86b      	bhi.n	8002798 <HAL_TIM_ConfigClockSource+0x16c>
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d060      	beq.n	8002786 <HAL_TIM_ConfigClockSource+0x15a>
 80026c4:	2b20      	cmp	r3, #32
 80026c6:	d867      	bhi.n	8002798 <HAL_TIM_ConfigClockSource+0x16c>
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d05c      	beq.n	8002786 <HAL_TIM_ConfigClockSource+0x15a>
 80026cc:	2b10      	cmp	r3, #16
 80026ce:	d05a      	beq.n	8002786 <HAL_TIM_ConfigClockSource+0x15a>
 80026d0:	e062      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6818      	ldr	r0, [r3, #0]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	6899      	ldr	r1, [r3, #8]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f000 f96a 	bl	80029ba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	609a      	str	r2, [r3, #8]
      break;
 80026fe:	e04f      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	6899      	ldr	r1, [r3, #8]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f000 f953 	bl	80029ba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002722:	609a      	str	r2, [r3, #8]
      break;
 8002724:	e03c      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	6859      	ldr	r1, [r3, #4]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	461a      	mov	r2, r3
 8002734:	f000 f8ca 	bl	80028cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2150      	movs	r1, #80	; 0x50
 800273e:	4618      	mov	r0, r3
 8002740:	f000 f921 	bl	8002986 <TIM_ITRx_SetConfig>
      break;
 8002744:	e02c      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6818      	ldr	r0, [r3, #0]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	6859      	ldr	r1, [r3, #4]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	461a      	mov	r2, r3
 8002754:	f000 f8e8 	bl	8002928 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2160      	movs	r1, #96	; 0x60
 800275e:	4618      	mov	r0, r3
 8002760:	f000 f911 	bl	8002986 <TIM_ITRx_SetConfig>
      break;
 8002764:	e01c      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	6859      	ldr	r1, [r3, #4]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	461a      	mov	r2, r3
 8002774:	f000 f8aa 	bl	80028cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2140      	movs	r1, #64	; 0x40
 800277e:	4618      	mov	r0, r3
 8002780:	f000 f901 	bl	8002986 <TIM_ITRx_SetConfig>
      break;
 8002784:	e00c      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4619      	mov	r1, r3
 8002790:	4610      	mov	r0, r2
 8002792:	f000 f8f8 	bl	8002986 <TIM_ITRx_SetConfig>
      break;
 8002796:	e003      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
      break;
 800279c:	e000      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800279e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr

080027de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr
	...

08002804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a2b      	ldr	r2, [pc, #172]	; (80028c4 <TIM_Base_SetConfig+0xc0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d007      	beq.n	800282c <TIM_Base_SetConfig+0x28>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002822:	d003      	beq.n	800282c <TIM_Base_SetConfig+0x28>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a28      	ldr	r2, [pc, #160]	; (80028c8 <TIM_Base_SetConfig+0xc4>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d108      	bne.n	800283e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a20      	ldr	r2, [pc, #128]	; (80028c4 <TIM_Base_SetConfig+0xc0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d007      	beq.n	8002856 <TIM_Base_SetConfig+0x52>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284c:	d003      	beq.n	8002856 <TIM_Base_SetConfig+0x52>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a1d      	ldr	r2, [pc, #116]	; (80028c8 <TIM_Base_SetConfig+0xc4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d108      	bne.n	8002868 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800285c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4313      	orrs	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	4313      	orrs	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a0d      	ldr	r2, [pc, #52]	; (80028c4 <TIM_Base_SetConfig+0xc0>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d103      	bne.n	800289c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d005      	beq.n	80028ba <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f023 0201 	bic.w	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	611a      	str	r2, [r3, #16]
  }
}
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr
 80028c4:	40012c00 	.word	0x40012c00
 80028c8:	40000400 	.word	0x40000400

080028cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	f023 0201 	bic.w	r2, r3, #1
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f023 030a 	bic.w	r3, r3, #10
 8002908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	4313      	orrs	r3, r2
 8002910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	621a      	str	r2, [r3, #32]
}
 800291e:	bf00      	nop
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002928:	b480      	push	{r7}
 800292a:	b087      	sub	sp, #28
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	f023 0210 	bic.w	r2, r3, #16
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	031b      	lsls	r3, r3, #12
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002964:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	4313      	orrs	r3, r2
 800296e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	621a      	str	r2, [r3, #32]
}
 800297c:	bf00      	nop
 800297e:	371c      	adds	r7, #28
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002986:	b480      	push	{r7}
 8002988:	b085      	sub	sp, #20
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f043 0307 	orr.w	r3, r3, #7
 80029a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	609a      	str	r2, [r3, #8]
}
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr

080029ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b087      	sub	sp, #28
 80029be:	af00      	add	r7, sp, #0
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	021a      	lsls	r2, r3, #8
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	431a      	orrs	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	609a      	str	r2, [r3, #8]
}
 80029ee:	bf00      	nop
 80029f0:	371c      	adds	r7, #28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e041      	b.n	8002a94 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a14      	ldr	r2, [pc, #80]	; (8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d009      	beq.n	8002a68 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5c:	d004      	beq.n	8002a68 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a10      	ldr	r2, [pc, #64]	; (8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d10c      	bne.n	8002a82 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40012c00 	.word	0x40012c00
 8002aa4:	40000400 	.word	0x40000400

08002aa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr

08002aba <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr

08002acc <__libc_init_array>:
 8002acc:	b570      	push	{r4, r5, r6, lr}
 8002ace:	2600      	movs	r6, #0
 8002ad0:	4d0c      	ldr	r5, [pc, #48]	; (8002b04 <__libc_init_array+0x38>)
 8002ad2:	4c0d      	ldr	r4, [pc, #52]	; (8002b08 <__libc_init_array+0x3c>)
 8002ad4:	1b64      	subs	r4, r4, r5
 8002ad6:	10a4      	asrs	r4, r4, #2
 8002ad8:	42a6      	cmp	r6, r4
 8002ada:	d109      	bne.n	8002af0 <__libc_init_array+0x24>
 8002adc:	f000 f822 	bl	8002b24 <_init>
 8002ae0:	2600      	movs	r6, #0
 8002ae2:	4d0a      	ldr	r5, [pc, #40]	; (8002b0c <__libc_init_array+0x40>)
 8002ae4:	4c0a      	ldr	r4, [pc, #40]	; (8002b10 <__libc_init_array+0x44>)
 8002ae6:	1b64      	subs	r4, r4, r5
 8002ae8:	10a4      	asrs	r4, r4, #2
 8002aea:	42a6      	cmp	r6, r4
 8002aec:	d105      	bne.n	8002afa <__libc_init_array+0x2e>
 8002aee:	bd70      	pop	{r4, r5, r6, pc}
 8002af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af4:	4798      	blx	r3
 8002af6:	3601      	adds	r6, #1
 8002af8:	e7ee      	b.n	8002ad8 <__libc_init_array+0xc>
 8002afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002afe:	4798      	blx	r3
 8002b00:	3601      	adds	r6, #1
 8002b02:	e7f2      	b.n	8002aea <__libc_init_array+0x1e>
 8002b04:	08002b60 	.word	0x08002b60
 8002b08:	08002b60 	.word	0x08002b60
 8002b0c:	08002b60 	.word	0x08002b60
 8002b10:	08002b64 	.word	0x08002b64

08002b14 <memset>:
 8002b14:	4603      	mov	r3, r0
 8002b16:	4402      	add	r2, r0
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d100      	bne.n	8002b1e <memset+0xa>
 8002b1c:	4770      	bx	lr
 8002b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b22:	e7f9      	b.n	8002b18 <memset+0x4>

08002b24 <_init>:
 8002b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b26:	bf00      	nop
 8002b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b2a:	bc08      	pop	{r3}
 8002b2c:	469e      	mov	lr, r3
 8002b2e:	4770      	bx	lr

08002b30 <_fini>:
 8002b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b32:	bf00      	nop
 8002b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b36:	bc08      	pop	{r3}
 8002b38:	469e      	mov	lr, r3
 8002b3a:	4770      	bx	lr
