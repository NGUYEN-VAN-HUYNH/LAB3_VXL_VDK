
LAB3_VXL_VDK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f04  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003010  08003010  00013010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003034  08003034  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08003034  08003034  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003034  08003034  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003034  08003034  00013034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003038  08003038  00013038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  0800303c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000050  0800308c  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  0800308c  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a520  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e99  00000000  00000000  0002a599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002c438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002cf28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175df  00000000  00000000  0002d8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d730  00000000  00000000  00044ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008294c  00000000  00000000  000525ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4f3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a18  00000000  00000000  000d4f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000050 	.word	0x20000050
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ff8 	.word	0x08002ff8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000054 	.word	0x20000054
 8000148:	08002ff8 	.word	0x08002ff8

0800014c <display7SEG_East_West>:
 *  Created on: Oct 25, 2024
 *      Author: Admin
 */
#include "7_Segment.h"
#include "main.h"
void display7SEG_East_West(int num) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	// ban dau tat led 7 doan
	HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_SET);
 8000154:	2201      	movs	r2, #1
 8000156:	2101      	movs	r1, #1
 8000158:	489f      	ldr	r0, [pc, #636]	; (80003d8 <display7SEG_East_West+0x28c>)
 800015a:	f001 ff38 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_SET);
 800015e:	2201      	movs	r2, #1
 8000160:	2102      	movs	r1, #2
 8000162:	489d      	ldr	r0, [pc, #628]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000164:	f001 ff33 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	2104      	movs	r1, #4
 800016c:	489a      	ldr	r0, [pc, #616]	; (80003d8 <display7SEG_East_West+0x28c>)
 800016e:	f001 ff2e 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_SET);
 8000172:	2201      	movs	r2, #1
 8000174:	2108      	movs	r1, #8
 8000176:	4898      	ldr	r0, [pc, #608]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000178:	f001 ff29 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_E, GPIO_PIN_SET);
 800017c:	2201      	movs	r2, #1
 800017e:	2110      	movs	r1, #16
 8000180:	4895      	ldr	r0, [pc, #596]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000182:	f001 ff24 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_SET);
 8000186:	2201      	movs	r2, #1
 8000188:	2120      	movs	r1, #32
 800018a:	4893      	ldr	r0, [pc, #588]	; (80003d8 <display7SEG_East_West+0x28c>)
 800018c:	f001 ff1f 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_SET);
 8000190:	2201      	movs	r2, #1
 8000192:	2140      	movs	r1, #64	; 0x40
 8000194:	4890      	ldr	r0, [pc, #576]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000196:	f001 ff1a 	bl	8001fce <HAL_GPIO_WritePin>
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b09      	cmp	r3, #9
 800019e:	f200 8116 	bhi.w	80003ce <display7SEG_East_West+0x282>
 80001a2:	a201      	add	r2, pc, #4	; (adr r2, 80001a8 <display7SEG_East_West+0x5c>)
 80001a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001a8:	080001d1 	.word	0x080001d1
 80001ac:	0800020f 	.word	0x0800020f
 80001b0:	08000225 	.word	0x08000225
 80001b4:	08000259 	.word	0x08000259
 80001b8:	0800028d 	.word	0x0800028d
 80001bc:	080002b7 	.word	0x080002b7
 80001c0:	080002eb 	.word	0x080002eb
 80001c4:	08000329 	.word	0x08000329
 80001c8:	08000349 	.word	0x08000349
 80001cc:	08000391 	.word	0x08000391

	// dieu khien led 7 doan
	switch (num) {
	case 0:
		HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2101      	movs	r1, #1
 80001d4:	4880      	ldr	r0, [pc, #512]	; (80003d8 <display7SEG_East_West+0x28c>)
 80001d6:	f001 fefa 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 80001da:	2200      	movs	r2, #0
 80001dc:	2102      	movs	r1, #2
 80001de:	487e      	ldr	r0, [pc, #504]	; (80003d8 <display7SEG_East_West+0x28c>)
 80001e0:	f001 fef5 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2104      	movs	r1, #4
 80001e8:	487b      	ldr	r0, [pc, #492]	; (80003d8 <display7SEG_East_West+0x28c>)
 80001ea:	f001 fef0 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 80001ee:	2200      	movs	r2, #0
 80001f0:	2108      	movs	r1, #8
 80001f2:	4879      	ldr	r0, [pc, #484]	; (80003d8 <display7SEG_East_West+0x28c>)
 80001f4:	f001 feeb 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E, GPIO_PIN_RESET);
 80001f8:	2200      	movs	r2, #0
 80001fa:	2110      	movs	r1, #16
 80001fc:	4876      	ldr	r0, [pc, #472]	; (80003d8 <display7SEG_East_West+0x28c>)
 80001fe:	f001 fee6 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_RESET);
 8000202:	2200      	movs	r2, #0
 8000204:	2120      	movs	r1, #32
 8000206:	4874      	ldr	r0, [pc, #464]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000208:	f001 fee1 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 800020c:	e0e0      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 1:
		HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	2102      	movs	r1, #2
 8000212:	4871      	ldr	r0, [pc, #452]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000214:	f001 fedb 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 8000218:	2200      	movs	r2, #0
 800021a:	2104      	movs	r1, #4
 800021c:	486e      	ldr	r0, [pc, #440]	; (80003d8 <display7SEG_East_West+0x28c>)
 800021e:	f001 fed6 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 8000222:	e0d5      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 2:
		HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 8000224:	2200      	movs	r2, #0
 8000226:	2101      	movs	r1, #1
 8000228:	486b      	ldr	r0, [pc, #428]	; (80003d8 <display7SEG_East_West+0x28c>)
 800022a:	f001 fed0 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 800022e:	2200      	movs	r2, #0
 8000230:	2102      	movs	r1, #2
 8000232:	4869      	ldr	r0, [pc, #420]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000234:	f001 fecb 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	2108      	movs	r1, #8
 800023c:	4866      	ldr	r0, [pc, #408]	; (80003d8 <display7SEG_East_West+0x28c>)
 800023e:	f001 fec6 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E, GPIO_PIN_RESET);
 8000242:	2200      	movs	r2, #0
 8000244:	2110      	movs	r1, #16
 8000246:	4864      	ldr	r0, [pc, #400]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000248:	f001 fec1 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 800024c:	2200      	movs	r2, #0
 800024e:	2140      	movs	r1, #64	; 0x40
 8000250:	4861      	ldr	r0, [pc, #388]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000252:	f001 febc 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 8000256:	e0bb      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 3:
		HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	2101      	movs	r1, #1
 800025c:	485e      	ldr	r0, [pc, #376]	; (80003d8 <display7SEG_East_West+0x28c>)
 800025e:	f001 feb6 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	2102      	movs	r1, #2
 8000266:	485c      	ldr	r0, [pc, #368]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000268:	f001 feb1 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 800026c:	2200      	movs	r2, #0
 800026e:	2104      	movs	r1, #4
 8000270:	4859      	ldr	r0, [pc, #356]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000272:	f001 feac 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	2108      	movs	r1, #8
 800027a:	4857      	ldr	r0, [pc, #348]	; (80003d8 <display7SEG_East_West+0x28c>)
 800027c:	f001 fea7 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	2140      	movs	r1, #64	; 0x40
 8000284:	4854      	ldr	r0, [pc, #336]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000286:	f001 fea2 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 800028a:	e0a1      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 4:
		HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 800028c:	2200      	movs	r2, #0
 800028e:	2102      	movs	r1, #2
 8000290:	4851      	ldr	r0, [pc, #324]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000292:	f001 fe9c 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 8000296:	2200      	movs	r2, #0
 8000298:	2104      	movs	r1, #4
 800029a:	484f      	ldr	r0, [pc, #316]	; (80003d8 <display7SEG_East_West+0x28c>)
 800029c:	f001 fe97 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2120      	movs	r1, #32
 80002a4:	484c      	ldr	r0, [pc, #304]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002a6:	f001 fe92 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 80002aa:	2200      	movs	r2, #0
 80002ac:	2140      	movs	r1, #64	; 0x40
 80002ae:	484a      	ldr	r0, [pc, #296]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002b0:	f001 fe8d 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 80002b4:	e08c      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 5:
		HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2101      	movs	r1, #1
 80002ba:	4847      	ldr	r0, [pc, #284]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002bc:	f001 fe87 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2104      	movs	r1, #4
 80002c4:	4844      	ldr	r0, [pc, #272]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002c6:	f001 fe82 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2108      	movs	r1, #8
 80002ce:	4842      	ldr	r0, [pc, #264]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002d0:	f001 fe7d 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2120      	movs	r1, #32
 80002d8:	483f      	ldr	r0, [pc, #252]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002da:	f001 fe78 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2140      	movs	r1, #64	; 0x40
 80002e2:	483d      	ldr	r0, [pc, #244]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002e4:	f001 fe73 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 80002e8:	e072      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 6:
		HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2101      	movs	r1, #1
 80002ee:	483a      	ldr	r0, [pc, #232]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002f0:	f001 fe6d 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2104      	movs	r1, #4
 80002f8:	4837      	ldr	r0, [pc, #220]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002fa:	f001 fe68 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 80002fe:	2200      	movs	r2, #0
 8000300:	2108      	movs	r1, #8
 8000302:	4835      	ldr	r0, [pc, #212]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000304:	f001 fe63 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2110      	movs	r1, #16
 800030c:	4832      	ldr	r0, [pc, #200]	; (80003d8 <display7SEG_East_West+0x28c>)
 800030e:	f001 fe5e 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2120      	movs	r1, #32
 8000316:	4830      	ldr	r0, [pc, #192]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000318:	f001 fe59 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	2140      	movs	r1, #64	; 0x40
 8000320:	482d      	ldr	r0, [pc, #180]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000322:	f001 fe54 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 8000326:	e053      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 7:
		HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	2101      	movs	r1, #1
 800032c:	482a      	ldr	r0, [pc, #168]	; (80003d8 <display7SEG_East_West+0x28c>)
 800032e:	f001 fe4e 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	2102      	movs	r1, #2
 8000336:	4828      	ldr	r0, [pc, #160]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000338:	f001 fe49 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2104      	movs	r1, #4
 8000340:	4825      	ldr	r0, [pc, #148]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000342:	f001 fe44 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 8000346:	e043      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 8:
		HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	2101      	movs	r1, #1
 800034c:	4822      	ldr	r0, [pc, #136]	; (80003d8 <display7SEG_East_West+0x28c>)
 800034e:	f001 fe3e 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	2102      	movs	r1, #2
 8000356:	4820      	ldr	r0, [pc, #128]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000358:	f001 fe39 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	2104      	movs	r1, #4
 8000360:	481d      	ldr	r0, [pc, #116]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000362:	f001 fe34 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	2108      	movs	r1, #8
 800036a:	481b      	ldr	r0, [pc, #108]	; (80003d8 <display7SEG_East_West+0x28c>)
 800036c:	f001 fe2f 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E, GPIO_PIN_RESET);
 8000370:	2200      	movs	r2, #0
 8000372:	2110      	movs	r1, #16
 8000374:	4818      	ldr	r0, [pc, #96]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000376:	f001 fe2a 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_RESET);
 800037a:	2200      	movs	r2, #0
 800037c:	2120      	movs	r1, #32
 800037e:	4816      	ldr	r0, [pc, #88]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000380:	f001 fe25 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2140      	movs	r1, #64	; 0x40
 8000388:	4813      	ldr	r0, [pc, #76]	; (80003d8 <display7SEG_East_West+0x28c>)
 800038a:	f001 fe20 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 800038e:	e01f      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 9:
		HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	2101      	movs	r1, #1
 8000394:	4810      	ldr	r0, [pc, #64]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000396:	f001 fe1a 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 800039a:	2200      	movs	r2, #0
 800039c:	2102      	movs	r1, #2
 800039e:	480e      	ldr	r0, [pc, #56]	; (80003d8 <display7SEG_East_West+0x28c>)
 80003a0:	f001 fe15 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2104      	movs	r1, #4
 80003a8:	480b      	ldr	r0, [pc, #44]	; (80003d8 <display7SEG_East_West+0x28c>)
 80003aa:	f001 fe10 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2108      	movs	r1, #8
 80003b2:	4809      	ldr	r0, [pc, #36]	; (80003d8 <display7SEG_East_West+0x28c>)
 80003b4:	f001 fe0b 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2120      	movs	r1, #32
 80003bc:	4806      	ldr	r0, [pc, #24]	; (80003d8 <display7SEG_East_West+0x28c>)
 80003be:	f001 fe06 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2140      	movs	r1, #64	; 0x40
 80003c6:	4804      	ldr	r0, [pc, #16]	; (80003d8 <display7SEG_East_West+0x28c>)
 80003c8:	f001 fe01 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 80003cc:	e000      	b.n	80003d0 <display7SEG_East_West+0x284>
	default:
		break; // khong lm gi ca
 80003ce:	bf00      	nop
	}

}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40010c00 	.word	0x40010c00

080003dc <display7SEG_North_South>:

void display7SEG_North_South(int num) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	// ban dau tat led 7 doan
	HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_SET);
 80003e4:	2201      	movs	r2, #1
 80003e6:	2180      	movs	r1, #128	; 0x80
 80003e8:	48b7      	ldr	r0, [pc, #732]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80003ea:	f001 fdf0 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f4:	48b4      	ldr	r0, [pc, #720]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80003f6:	f001 fdea 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000400:	48b1      	ldr	r0, [pc, #708]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000402:	f001 fde4 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_SET);
 8000406:	2201      	movs	r2, #1
 8000408:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800040c:	48ae      	ldr	r0, [pc, #696]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800040e:	f001 fdde 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_E1, GPIO_PIN_SET);
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000418:	48ab      	ldr	r0, [pc, #684]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800041a:	f001 fdd8 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_SET);
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000424:	48a8      	ldr	r0, [pc, #672]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000426:	f001 fdd2 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_SET);
 800042a:	2201      	movs	r2, #1
 800042c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000430:	48a5      	ldr	r0, [pc, #660]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000432:	f001 fdcc 	bl	8001fce <HAL_GPIO_WritePin>
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2b09      	cmp	r3, #9
 800043a:	f200 813f 	bhi.w	80006bc <display7SEG_North_South+0x2e0>
 800043e:	a201      	add	r2, pc, #4	; (adr r2, 8000444 <display7SEG_North_South+0x68>)
 8000440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000444:	0800046d 	.word	0x0800046d
 8000448:	080004b5 	.word	0x080004b5
 800044c:	080004cf 	.word	0x080004cf
 8000450:	0800050b 	.word	0x0800050b
 8000454:	08000547 	.word	0x08000547
 8000458:	08000579 	.word	0x08000579
 800045c:	080005b5 	.word	0x080005b5
 8000460:	080005fd 	.word	0x080005fd
 8000464:	08000621 	.word	0x08000621
 8000468:	08000675 	.word	0x08000675

	// dieu khien led 7 doan
	switch (num) {
	case 0:
		HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	2180      	movs	r1, #128	; 0x80
 8000470:	4895      	ldr	r0, [pc, #596]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000472:	f001 fdac 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	f44f 7180 	mov.w	r1, #256	; 0x100
 800047c:	4892      	ldr	r0, [pc, #584]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800047e:	f001 fda6 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000488:	488f      	ldr	r0, [pc, #572]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800048a:	f001 fda0 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 800048e:	2200      	movs	r2, #0
 8000490:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000494:	488c      	ldr	r0, [pc, #560]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000496:	f001 fd9a 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E1, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004a0:	4889      	ldr	r0, [pc, #548]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004a2:	f001 fd94 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004ac:	4886      	ldr	r0, [pc, #536]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004ae:	f001 fd8e 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 80004b2:	e104      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 1:
		HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ba:	4883      	ldr	r0, [pc, #524]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004bc:	f001 fd87 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004c6:	4880      	ldr	r0, [pc, #512]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004c8:	f001 fd81 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 80004cc:	e0f7      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 2:
		HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2180      	movs	r1, #128	; 0x80
 80004d2:	487d      	ldr	r0, [pc, #500]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004d4:	f001 fd7b 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004de:	487a      	ldr	r0, [pc, #488]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004e0:	f001 fd75 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ea:	4877      	ldr	r0, [pc, #476]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004ec:	f001 fd6f 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E1, GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f6:	4874      	ldr	r0, [pc, #464]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004f8:	f001 fd69 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000502:	4871      	ldr	r0, [pc, #452]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000504:	f001 fd63 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 8000508:	e0d9      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 3:
		HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	2180      	movs	r1, #128	; 0x80
 800050e:	486e      	ldr	r0, [pc, #440]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000510:	f001 fd5d 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 7180 	mov.w	r1, #256	; 0x100
 800051a:	486b      	ldr	r0, [pc, #428]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800051c:	f001 fd57 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000526:	4868      	ldr	r0, [pc, #416]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000528:	f001 fd51 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000532:	4865      	ldr	r0, [pc, #404]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000534:	f001 fd4b 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053e:	4862      	ldr	r0, [pc, #392]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000540:	f001 fd45 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 8000544:	e0bb      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 4:
		HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054c:	485e      	ldr	r0, [pc, #376]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800054e:	f001 fd3e 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000558:	485b      	ldr	r0, [pc, #364]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800055a:	f001 fd38 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000564:	4858      	ldr	r0, [pc, #352]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000566:	f001 fd32 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000570:	4855      	ldr	r0, [pc, #340]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000572:	f001 fd2c 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 8000576:	e0a2      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 5:
		HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2180      	movs	r1, #128	; 0x80
 800057c:	4852      	ldr	r0, [pc, #328]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800057e:	f001 fd26 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000588:	484f      	ldr	r0, [pc, #316]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800058a:	f001 fd20 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000594:	484c      	ldr	r0, [pc, #304]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000596:	f001 fd1a 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a0:	4849      	ldr	r0, [pc, #292]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005a2:	f001 fd14 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ac:	4846      	ldr	r0, [pc, #280]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005ae:	f001 fd0e 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 80005b2:	e084      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 6:
		HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2180      	movs	r1, #128	; 0x80
 80005b8:	4843      	ldr	r0, [pc, #268]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005ba:	f001 fd08 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c4:	4840      	ldr	r0, [pc, #256]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005c6:	f001 fd02 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d0:	483d      	ldr	r0, [pc, #244]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005d2:	f001 fcfc 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E1, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005dc:	483a      	ldr	r0, [pc, #232]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005de:	f001 fcf6 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e8:	4837      	ldr	r0, [pc, #220]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005ea:	f001 fcf0 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f4:	4834      	ldr	r0, [pc, #208]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005f6:	f001 fcea 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 80005fa:	e060      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 7:
		HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2180      	movs	r1, #128	; 0x80
 8000600:	4831      	ldr	r0, [pc, #196]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000602:	f001 fce4 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 7180 	mov.w	r1, #256	; 0x100
 800060c:	482e      	ldr	r0, [pc, #184]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800060e:	f001 fcde 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000618:	482b      	ldr	r0, [pc, #172]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800061a:	f001 fcd8 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 800061e:	e04e      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 8:
		HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2180      	movs	r1, #128	; 0x80
 8000624:	4828      	ldr	r0, [pc, #160]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000626:	f001 fcd2 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000630:	4825      	ldr	r0, [pc, #148]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000632:	f001 fccc 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 7100 	mov.w	r1, #512	; 0x200
 800063c:	4822      	ldr	r0, [pc, #136]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800063e:	f001 fcc6 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000648:	481f      	ldr	r0, [pc, #124]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800064a:	f001 fcc0 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E1, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000654:	481c      	ldr	r0, [pc, #112]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000656:	f001 fcba 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000660:	4819      	ldr	r0, [pc, #100]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000662:	f001 fcb4 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800066c:	4816      	ldr	r0, [pc, #88]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800066e:	f001 fcae 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 8000672:	e024      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 9:
		HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	2180      	movs	r1, #128	; 0x80
 8000678:	4813      	ldr	r0, [pc, #76]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800067a:	f001 fca8 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000684:	4810      	ldr	r0, [pc, #64]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000686:	f001 fca2 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000692:	f001 fc9c 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800069c:	480a      	ldr	r0, [pc, #40]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800069e:	f001 fc96 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a8:	4807      	ldr	r0, [pc, #28]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80006aa:	f001 fc90 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80006b6:	f001 fc8a 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 80006ba:	e000      	b.n	80006be <display7SEG_North_South+0x2e2>
	default:
		break; // khong lm gi ca
 80006bc:	bf00      	nop
	}

}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40010c00 	.word	0x40010c00

080006cc <isButton1Pressed>:

int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;

int isButton1Pressed() {
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
	if (button1_flag == 1) {
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <isButton1Pressed+0x20>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d104      	bne.n	80006e2 <isButton1Pressed+0x16>
		button1_flag = 0;
 80006d8:	4b04      	ldr	r3, [pc, #16]	; (80006ec <isButton1Pressed+0x20>)
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
		return 1;
 80006de:	2301      	movs	r3, #1
 80006e0:	e000      	b.n	80006e4 <isButton1Pressed+0x18>
	}
	return 0;
 80006e2:	2300      	movs	r3, #0
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	2000006c 	.word	0x2000006c

080006f0 <isButton2Pressed>:

int isButton2Pressed() {
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
	if (button2_flag == 1) {
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <isButton2Pressed+0x20>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d104      	bne.n	8000706 <isButton2Pressed+0x16>
		button2_flag = 0;
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <isButton2Pressed+0x20>)
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
		return 1;
 8000702:	2301      	movs	r3, #1
 8000704:	e000      	b.n	8000708 <isButton2Pressed+0x18>
	}
	return 0;
 8000706:	2300      	movs	r3, #0
}
 8000708:	4618      	mov	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	20000070 	.word	0x20000070

08000714 <isButton3Pressed>:

int isButton3Pressed() {
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
	if (button3_flag == 1) {
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <isButton3Pressed+0x20>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d104      	bne.n	800072a <isButton3Pressed+0x16>
		button3_flag = 0;
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <isButton3Pressed+0x20>)
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
		return 1;
 8000726:	2301      	movs	r3, #1
 8000728:	e000      	b.n	800072c <isButton3Pressed+0x18>
	}
	return 0;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	20000074 	.word	0x20000074

08000738 <getKeyInput>:

void getKeyInput() {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0

	KeyRegB1_0 = KeyRegB1_1;
 800073c:	4b6b      	ldr	r3, [pc, #428]	; (80008ec <getKeyInput+0x1b4>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a6b      	ldr	r2, [pc, #428]	; (80008f0 <getKeyInput+0x1b8>)
 8000742:	6013      	str	r3, [r2, #0]
	KeyRegB1_1 = KeyRegB1_2;
 8000744:	4b6b      	ldr	r3, [pc, #428]	; (80008f4 <getKeyInput+0x1bc>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a68      	ldr	r2, [pc, #416]	; (80008ec <getKeyInput+0x1b4>)
 800074a:	6013      	str	r3, [r2, #0]
	KeyRegB1_2 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 800074c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000750:	4869      	ldr	r0, [pc, #420]	; (80008f8 <getKeyInput+0x1c0>)
 8000752:	f001 fc25 	bl	8001fa0 <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	461a      	mov	r2, r3
 800075a:	4b66      	ldr	r3, [pc, #408]	; (80008f4 <getKeyInput+0x1bc>)
 800075c:	601a      	str	r2, [r3, #0]

	KeyRegB2_0 = KeyRegB2_1;
 800075e:	4b67      	ldr	r3, [pc, #412]	; (80008fc <getKeyInput+0x1c4>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a67      	ldr	r2, [pc, #412]	; (8000900 <getKeyInput+0x1c8>)
 8000764:	6013      	str	r3, [r2, #0]
	KeyRegB2_1 = KeyRegB2_2;
 8000766:	4b67      	ldr	r3, [pc, #412]	; (8000904 <getKeyInput+0x1cc>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a64      	ldr	r2, [pc, #400]	; (80008fc <getKeyInput+0x1c4>)
 800076c:	6013      	str	r3, [r2, #0]
	KeyRegB2_2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 800076e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000772:	4861      	ldr	r0, [pc, #388]	; (80008f8 <getKeyInput+0x1c0>)
 8000774:	f001 fc14 	bl	8001fa0 <HAL_GPIO_ReadPin>
 8000778:	4603      	mov	r3, r0
 800077a:	461a      	mov	r2, r3
 800077c:	4b61      	ldr	r3, [pc, #388]	; (8000904 <getKeyInput+0x1cc>)
 800077e:	601a      	str	r2, [r3, #0]

	KeyRegB3_0 = KeyRegB3_1;
 8000780:	4b61      	ldr	r3, [pc, #388]	; (8000908 <getKeyInput+0x1d0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a61      	ldr	r2, [pc, #388]	; (800090c <getKeyInput+0x1d4>)
 8000786:	6013      	str	r3, [r2, #0]
	KeyRegB3_1 = KeyRegB3_2;
 8000788:	4b61      	ldr	r3, [pc, #388]	; (8000910 <getKeyInput+0x1d8>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a5e      	ldr	r2, [pc, #376]	; (8000908 <getKeyInput+0x1d0>)
 800078e:	6013      	str	r3, [r2, #0]
	KeyRegB3_2 = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000790:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000794:	4858      	ldr	r0, [pc, #352]	; (80008f8 <getKeyInput+0x1c0>)
 8000796:	f001 fc03 	bl	8001fa0 <HAL_GPIO_ReadPin>
 800079a:	4603      	mov	r3, r0
 800079c:	461a      	mov	r2, r3
 800079e:	4b5c      	ldr	r3, [pc, #368]	; (8000910 <getKeyInput+0x1d8>)
 80007a0:	601a      	str	r2, [r3, #0]

	// xu ly button 1
	if ((KeyRegB1_0 == KeyRegB1_1) && (KeyRegB1_1 == KeyRegB1_2)) {
 80007a2:	4b53      	ldr	r3, [pc, #332]	; (80008f0 <getKeyInput+0x1b8>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	4b51      	ldr	r3, [pc, #324]	; (80008ec <getKeyInput+0x1b4>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d12f      	bne.n	800080e <getKeyInput+0xd6>
 80007ae:	4b4f      	ldr	r3, [pc, #316]	; (80008ec <getKeyInput+0x1b4>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	4b50      	ldr	r3, [pc, #320]	; (80008f4 <getKeyInput+0x1bc>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d129      	bne.n	800080e <getKeyInput+0xd6>
		if (KeyRegB1_3 != KeyRegB1_2) {
 80007ba:	4b56      	ldr	r3, [pc, #344]	; (8000914 <getKeyInput+0x1dc>)
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	4b4d      	ldr	r3, [pc, #308]	; (80008f4 <getKeyInput+0x1bc>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d00f      	beq.n	80007e6 <getKeyInput+0xae>
			KeyRegB1_3 = KeyRegB1_2;
 80007c6:	4b4b      	ldr	r3, [pc, #300]	; (80008f4 <getKeyInput+0x1bc>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a52      	ldr	r2, [pc, #328]	; (8000914 <getKeyInput+0x1dc>)
 80007cc:	6013      	str	r3, [r2, #0]

			if (KeyRegB1_2 == PRESSED_STATE) {
 80007ce:	4b49      	ldr	r3, [pc, #292]	; (80008f4 <getKeyInput+0x1bc>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d11b      	bne.n	800080e <getKeyInput+0xd6>
				TimeOutForKeyPress = 500;
 80007d6:	4b50      	ldr	r3, [pc, #320]	; (8000918 <getKeyInput+0x1e0>)
 80007d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007dc:	601a      	str	r2, [r3, #0]
				button1_flag = 1;
 80007de:	4b4f      	ldr	r3, [pc, #316]	; (800091c <getKeyInput+0x1e4>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	e013      	b.n	800080e <getKeyInput+0xd6>
			}

		} else {
			TimeOutForKeyPress--;
 80007e6:	4b4c      	ldr	r3, [pc, #304]	; (8000918 <getKeyInput+0x1e0>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	4a4a      	ldr	r2, [pc, #296]	; (8000918 <getKeyInput+0x1e0>)
 80007ee:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress == 0) {
 80007f0:	4b49      	ldr	r3, [pc, #292]	; (8000918 <getKeyInput+0x1e0>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d10a      	bne.n	800080e <getKeyInput+0xd6>
				TimeOutForKeyPress = 500;
 80007f8:	4b47      	ldr	r3, [pc, #284]	; (8000918 <getKeyInput+0x1e0>)
 80007fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007fe:	601a      	str	r2, [r3, #0]
				if (KeyRegB1_2 == PRESSED_STATE) {
 8000800:	4b3c      	ldr	r3, [pc, #240]	; (80008f4 <getKeyInput+0x1bc>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d102      	bne.n	800080e <getKeyInput+0xd6>
					button1_flag = 1;
 8000808:	4b44      	ldr	r3, [pc, #272]	; (800091c <getKeyInput+0x1e4>)
 800080a:	2201      	movs	r2, #1
 800080c:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
	// xu ly button 2
	if ((KeyRegB2_0 == KeyRegB2_1) && (KeyRegB2_1 == KeyRegB2_2)) {
 800080e:	4b3c      	ldr	r3, [pc, #240]	; (8000900 <getKeyInput+0x1c8>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	4b3a      	ldr	r3, [pc, #232]	; (80008fc <getKeyInput+0x1c4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	429a      	cmp	r2, r3
 8000818:	d12f      	bne.n	800087a <getKeyInput+0x142>
 800081a:	4b38      	ldr	r3, [pc, #224]	; (80008fc <getKeyInput+0x1c4>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	4b39      	ldr	r3, [pc, #228]	; (8000904 <getKeyInput+0x1cc>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	429a      	cmp	r2, r3
 8000824:	d129      	bne.n	800087a <getKeyInput+0x142>
		if (KeyRegB2_3 != KeyRegB2_2) {
 8000826:	4b3e      	ldr	r3, [pc, #248]	; (8000920 <getKeyInput+0x1e8>)
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	4b36      	ldr	r3, [pc, #216]	; (8000904 <getKeyInput+0x1cc>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	429a      	cmp	r2, r3
 8000830:	d00f      	beq.n	8000852 <getKeyInput+0x11a>
			KeyRegB2_3 = KeyRegB2_2;
 8000832:	4b34      	ldr	r3, [pc, #208]	; (8000904 <getKeyInput+0x1cc>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a3a      	ldr	r2, [pc, #232]	; (8000920 <getKeyInput+0x1e8>)
 8000838:	6013      	str	r3, [r2, #0]

			if (KeyRegB2_2 == PRESSED_STATE) {
 800083a:	4b32      	ldr	r3, [pc, #200]	; (8000904 <getKeyInput+0x1cc>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d11b      	bne.n	800087a <getKeyInput+0x142>
				TimeOutForKeyPress = 500;
 8000842:	4b35      	ldr	r3, [pc, #212]	; (8000918 <getKeyInput+0x1e0>)
 8000844:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000848:	601a      	str	r2, [r3, #0]
				button2_flag = 1;
 800084a:	4b36      	ldr	r3, [pc, #216]	; (8000924 <getKeyInput+0x1ec>)
 800084c:	2201      	movs	r2, #1
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	e013      	b.n	800087a <getKeyInput+0x142>
			}

		} else {
			TimeOutForKeyPress--;
 8000852:	4b31      	ldr	r3, [pc, #196]	; (8000918 <getKeyInput+0x1e0>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	3b01      	subs	r3, #1
 8000858:	4a2f      	ldr	r2, [pc, #188]	; (8000918 <getKeyInput+0x1e0>)
 800085a:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress == 0) {
 800085c:	4b2e      	ldr	r3, [pc, #184]	; (8000918 <getKeyInput+0x1e0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d10a      	bne.n	800087a <getKeyInput+0x142>
				TimeOutForKeyPress = 500;
 8000864:	4b2c      	ldr	r3, [pc, #176]	; (8000918 <getKeyInput+0x1e0>)
 8000866:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800086a:	601a      	str	r2, [r3, #0]
				if (KeyRegB2_2 == PRESSED_STATE) {
 800086c:	4b25      	ldr	r3, [pc, #148]	; (8000904 <getKeyInput+0x1cc>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d102      	bne.n	800087a <getKeyInput+0x142>
					button2_flag = 1;
 8000874:	4b2b      	ldr	r3, [pc, #172]	; (8000924 <getKeyInput+0x1ec>)
 8000876:	2201      	movs	r2, #1
 8000878:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
	// xu ly button 3
	if ((KeyRegB3_0 == KeyRegB3_1) && (KeyRegB3_1 == KeyRegB3_2)) {
 800087a:	4b24      	ldr	r3, [pc, #144]	; (800090c <getKeyInput+0x1d4>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4b22      	ldr	r3, [pc, #136]	; (8000908 <getKeyInput+0x1d0>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	429a      	cmp	r2, r3
 8000884:	d12f      	bne.n	80008e6 <getKeyInput+0x1ae>
 8000886:	4b20      	ldr	r3, [pc, #128]	; (8000908 <getKeyInput+0x1d0>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	4b21      	ldr	r3, [pc, #132]	; (8000910 <getKeyInput+0x1d8>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	429a      	cmp	r2, r3
 8000890:	d129      	bne.n	80008e6 <getKeyInput+0x1ae>
		if (KeyRegB3_3 != KeyRegB3_2) {
 8000892:	4b25      	ldr	r3, [pc, #148]	; (8000928 <getKeyInput+0x1f0>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <getKeyInput+0x1d8>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	429a      	cmp	r2, r3
 800089c:	d00f      	beq.n	80008be <getKeyInput+0x186>
			KeyRegB3_3 = KeyRegB3_2;
 800089e:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <getKeyInput+0x1d8>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a21      	ldr	r2, [pc, #132]	; (8000928 <getKeyInput+0x1f0>)
 80008a4:	6013      	str	r3, [r2, #0]

			if (KeyRegB3_2 == PRESSED_STATE) {
 80008a6:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <getKeyInput+0x1d8>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d11b      	bne.n	80008e6 <getKeyInput+0x1ae>
				TimeOutForKeyPress = 500;
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <getKeyInput+0x1e0>)
 80008b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008b4:	601a      	str	r2, [r3, #0]
				button3_flag = 1;
 80008b6:	4b1d      	ldr	r3, [pc, #116]	; (800092c <getKeyInput+0x1f4>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	601a      	str	r2, [r3, #0]
					button3_flag = 1;
				}
			}
		}
	}
}
 80008bc:	e013      	b.n	80008e6 <getKeyInput+0x1ae>
			TimeOutForKeyPress--;
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <getKeyInput+0x1e0>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	4a14      	ldr	r2, [pc, #80]	; (8000918 <getKeyInput+0x1e0>)
 80008c6:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress == 0) {
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <getKeyInput+0x1e0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d10a      	bne.n	80008e6 <getKeyInput+0x1ae>
				TimeOutForKeyPress = 500;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <getKeyInput+0x1e0>)
 80008d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008d6:	601a      	str	r2, [r3, #0]
				if (KeyRegB3_2 == PRESSED_STATE) {
 80008d8:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <getKeyInput+0x1d8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d102      	bne.n	80008e6 <getKeyInput+0x1ae>
					button3_flag = 1;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <getKeyInput+0x1f4>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	601a      	str	r2, [r3, #0]
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000004 	.word	0x20000004
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000008 	.word	0x20000008
 80008f8:	40010800 	.word	0x40010800
 80008fc:	20000014 	.word	0x20000014
 8000900:	20000010 	.word	0x20000010
 8000904:	20000018 	.word	0x20000018
 8000908:	20000024 	.word	0x20000024
 800090c:	20000020 	.word	0x20000020
 8000910:	20000028 	.word	0x20000028
 8000914:	2000000c 	.word	0x2000000c
 8000918:	20000030 	.word	0x20000030
 800091c:	2000006c 	.word	0x2000006c
 8000920:	2000001c 	.word	0x2000001c
 8000924:	20000070 	.word	0x20000070
 8000928:	2000002c 	.word	0x2000002c
 800092c:	20000074 	.word	0x20000074

08000930 <fsm_automatic_run>:
 *
 *  Created on: Oct 25, 2024
 *      Author: Admin
 */
#include "fsm_automatic.h"
void fsm_automatic_run() {
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af02      	add	r7, sp, #8
	switch (status) {
 8000936:	4b53      	ldr	r3, [pc, #332]	; (8000a84 <fsm_automatic_run+0x154>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d002      	beq.n	8000944 <fsm_automatic_run+0x14>
 800093e:	2b01      	cmp	r3, #1
 8000940:	d050      	beq.n	80009e4 <fsm_automatic_run+0xb4>
			setTimer1(50);
		}
		break;
	}

}
 8000942:	e09b      	b.n	8000a7c <fsm_automatic_run+0x14c>
		init_time_traffic(time_red, time_green, time_yellow);
 8000944:	4b50      	ldr	r3, [pc, #320]	; (8000a88 <fsm_automatic_run+0x158>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a50      	ldr	r2, [pc, #320]	; (8000a8c <fsm_automatic_run+0x15c>)
 800094a:	6811      	ldr	r1, [r2, #0]
 800094c:	4a50      	ldr	r2, [pc, #320]	; (8000a90 <fsm_automatic_run+0x160>)
 800094e:	6812      	ldr	r2, [r2, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f000 faeb 	bl	8000f2c <init_time_traffic>
		init_traffic_light(RED_COLOR, RED_AUTO, time_red, GREEN_COLOR,
 8000956:	4b4c      	ldr	r3, [pc, #304]	; (8000a88 <fsm_automatic_run+0x158>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	4b4c      	ldr	r3, [pc, #304]	; (8000a8c <fsm_automatic_run+0x15c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	9301      	str	r3, [sp, #4]
 8000960:	2306      	movs	r3, #6
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2317      	movs	r3, #23
 8000966:	2105      	movs	r1, #5
 8000968:	2016      	movs	r0, #22
 800096a:	f000 fcf5 	bl	8001358 <init_traffic_light>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000974:	4847      	ldr	r0, [pc, #284]	; (8000a94 <fsm_automatic_run+0x164>)
 8000976:	f001 fb2a 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800097a:	2201      	movs	r2, #1
 800097c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000980:	4844      	ldr	r0, [pc, #272]	; (8000a94 <fsm_automatic_run+0x164>)
 8000982:	f001 fb24 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800098c:	4841      	ldr	r0, [pc, #260]	; (8000a94 <fsm_automatic_run+0x164>)
 800098e:	f001 fb1e 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000992:	2201      	movs	r2, #1
 8000994:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000998:	483e      	ldr	r0, [pc, #248]	; (8000a94 <fsm_automatic_run+0x164>)
 800099a:	f001 fb18 	bl	8001fce <HAL_GPIO_WritePin>
		count = 0;
 800099e:	4b3e      	ldr	r3, [pc, #248]	; (8000a98 <fsm_automatic_run+0x168>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
		count1 = 0;
 80009a4:	4b3d      	ldr	r3, [pc, #244]	; (8000a9c <fsm_automatic_run+0x16c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
		updateClockBuffer(time_green, time_red);
 80009aa:	4b38      	ldr	r3, [pc, #224]	; (8000a8c <fsm_automatic_run+0x15c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a36      	ldr	r2, [pc, #216]	; (8000a88 <fsm_automatic_run+0x158>)
 80009b0:	6812      	ldr	r2, [r2, #0]
 80009b2:	4611      	mov	r1, r2
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fb83 	bl	80010c0 <updateClockBuffer>
		if (isButton1Pressed() == 1) {
 80009ba:	f7ff fe87 	bl	80006cc <isButton1Pressed>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d158      	bne.n	8000a76 <fsm_automatic_run+0x146>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ca:	4832      	ldr	r0, [pc, #200]	; (8000a94 <fsm_automatic_run+0x164>)
 80009cc:	f001 faff 	bl	8001fce <HAL_GPIO_WritePin>
			display7SEG_North_South(1);
 80009d0:	2001      	movs	r0, #1
 80009d2:	f7ff fd03 	bl	80003dc <display7SEG_North_South>
			status = MODE_1;
 80009d6:	4b2b      	ldr	r3, [pc, #172]	; (8000a84 <fsm_automatic_run+0x154>)
 80009d8:	2201      	movs	r2, #1
 80009da:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 80009dc:	2064      	movs	r0, #100	; 0x64
 80009de:	f000 ffa1 	bl	8001924 <setTimer1>
		break;
 80009e2:	e048      	b.n	8000a76 <fsm_automatic_run+0x146>
		if (timer1_flag == 1) {
 80009e4:	4b2e      	ldr	r3, [pc, #184]	; (8000aa0 <fsm_automatic_run+0x170>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d119      	bne.n	8000a20 <fsm_automatic_run+0xf0>
			display();
 80009ec:	f000 fc10 	bl	8001210 <display>
			dem--;
 80009f0:	4b2c      	ldr	r3, [pc, #176]	; (8000aa4 <fsm_automatic_run+0x174>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	3b01      	subs	r3, #1
 80009f6:	4a2b      	ldr	r2, [pc, #172]	; (8000aa4 <fsm_automatic_run+0x174>)
 80009f8:	6013      	str	r3, [r2, #0]
			if (dem == 0) {
 80009fa:	4b2a      	ldr	r3, [pc, #168]	; (8000aa4 <fsm_automatic_run+0x174>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d10b      	bne.n	8000a1a <fsm_automatic_run+0xea>
				light_traffic_run(time_red, time_yellow, time_green);
 8000a02:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <fsm_automatic_run+0x158>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a22      	ldr	r2, [pc, #136]	; (8000a90 <fsm_automatic_run+0x160>)
 8000a08:	6811      	ldr	r1, [r2, #0]
 8000a0a:	4a20      	ldr	r2, [pc, #128]	; (8000a8c <fsm_automatic_run+0x15c>)
 8000a0c:	6812      	ldr	r2, [r2, #0]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 fccc 	bl	80013ac <light_traffic_run>
				dem = 4;
 8000a14:	4b23      	ldr	r3, [pc, #140]	; (8000aa4 <fsm_automatic_run+0x174>)
 8000a16:	2204      	movs	r2, #4
 8000a18:	601a      	str	r2, [r3, #0]
			setTimer1(25);
 8000a1a:	2019      	movs	r0, #25
 8000a1c:	f000 ff82 	bl	8001924 <setTimer1>
		if (isButton1Pressed() == 1) {
 8000a20:	f7ff fe54 	bl	80006cc <isButton1Pressed>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d127      	bne.n	8000a7a <fsm_automatic_run+0x14a>
			status = MODE_2;
 8000a2a:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <fsm_automatic_run+0x154>)
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000a30:	2201      	movs	r2, #1
 8000a32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a36:	4817      	ldr	r0, [pc, #92]	; (8000a94 <fsm_automatic_run+0x164>)
 8000a38:	f001 fac9 	bl	8001fce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a42:	4814      	ldr	r0, [pc, #80]	; (8000a94 <fsm_automatic_run+0x164>)
 8000a44:	f001 fac3 	bl	8001fce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a4e:	4811      	ldr	r0, [pc, #68]	; (8000a94 <fsm_automatic_run+0x164>)
 8000a50:	f001 fabd 	bl	8001fce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a5a:	480e      	ldr	r0, [pc, #56]	; (8000a94 <fsm_automatic_run+0x164>)
 8000a5c:	f001 fab7 	bl	8001fce <HAL_GPIO_WritePin>
			display7SEG_North_South(2);
 8000a60:	2002      	movs	r0, #2
 8000a62:	f7ff fcbb 	bl	80003dc <display7SEG_North_South>
			clearLed();
 8000a66:	f000 fa7b 	bl	8000f60 <clearLed>
			clearLed1();
 8000a6a:	f000 fad1 	bl	8001010 <clearLed1>
			setTimer1(50);
 8000a6e:	2032      	movs	r0, #50	; 0x32
 8000a70:	f000 ff58 	bl	8001924 <setTimer1>
		break;
 8000a74:	e001      	b.n	8000a7a <fsm_automatic_run+0x14a>
		break;
 8000a76:	bf00      	nop
 8000a78:	e000      	b.n	8000a7c <fsm_automatic_run+0x14c>
		break;
 8000a7a:	bf00      	nop
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000084 	.word	0x20000084
 8000a88:	20000038 	.word	0x20000038
 8000a8c:	2000003c 	.word	0x2000003c
 8000a90:	20000040 	.word	0x20000040
 8000a94:	40010800 	.word	0x40010800
 8000a98:	200000b4 	.word	0x200000b4
 8000a9c:	200000b8 	.word	0x200000b8
 8000aa0:	200000c0 	.word	0x200000c0
 8000aa4:	20000034 	.word	0x20000034

08000aa8 <fsm_manual_run>:
 *
 *  Created on: Oct 26, 2024
 *      Author: Admin
 */
#include "fsm_manual.h"
void fsm_manual_run() {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	switch (status) {
 8000aac:	4b71      	ldr	r3, [pc, #452]	; (8000c74 <fsm_manual_run+0x1cc>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b04      	cmp	r3, #4
 8000ab2:	f000 8093 	beq.w	8000bdc <fsm_manual_run+0x134>
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	f300 80da 	bgt.w	8000c70 <fsm_manual_run+0x1c8>
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d002      	beq.n	8000ac6 <fsm_manual_run+0x1e>
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d046      	beq.n	8000b52 <fsm_manual_run+0xaa>
		}
		break;

	}

}
 8000ac4:	e0d4      	b.n	8000c70 <fsm_manual_run+0x1c8>
		if (timer1_flag == 1) {
 8000ac6:	4b6c      	ldr	r3, [pc, #432]	; (8000c78 <fsm_manual_run+0x1d0>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d10a      	bne.n	8000ae4 <fsm_manual_run+0x3c>
			HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000ace:	2104      	movs	r1, #4
 8000ad0:	486a      	ldr	r0, [pc, #424]	; (8000c7c <fsm_manual_run+0x1d4>)
 8000ad2:	f001 fa94 	bl	8001ffe <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000ad6:	2120      	movs	r1, #32
 8000ad8:	4868      	ldr	r0, [pc, #416]	; (8000c7c <fsm_manual_run+0x1d4>)
 8000ada:	f001 fa90 	bl	8001ffe <HAL_GPIO_TogglePin>
			setTimer1(50);
 8000ade:	2032      	movs	r0, #50	; 0x32
 8000ae0:	f000 ff20 	bl	8001924 <setTimer1>
		if (isButton1Pressed() == 1) {
 8000ae4:	f7ff fdf2 	bl	80006cc <isButton1Pressed>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d124      	bne.n	8000b38 <fsm_manual_run+0x90>
			status = MODE_3;
 8000aee:	4b61      	ldr	r3, [pc, #388]	; (8000c74 <fsm_manual_run+0x1cc>)
 8000af0:	2203      	movs	r2, #3
 8000af2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000afa:	4860      	ldr	r0, [pc, #384]	; (8000c7c <fsm_manual_run+0x1d4>)
 8000afc:	f001 fa67 	bl	8001fce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b06:	485d      	ldr	r0, [pc, #372]	; (8000c7c <fsm_manual_run+0x1d4>)
 8000b08:	f001 fa61 	bl	8001fce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b12:	485a      	ldr	r0, [pc, #360]	; (8000c7c <fsm_manual_run+0x1d4>)
 8000b14:	f001 fa5b 	bl	8001fce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b1e:	4857      	ldr	r0, [pc, #348]	; (8000c7c <fsm_manual_run+0x1d4>)
 8000b20:	f001 fa55 	bl	8001fce <HAL_GPIO_WritePin>
			display7SEG_North_South(3);
 8000b24:	2003      	movs	r0, #3
 8000b26:	f7ff fc59 	bl	80003dc <display7SEG_North_South>
			clearLed();
 8000b2a:	f000 fa19 	bl	8000f60 <clearLed>
			clearLed1();
 8000b2e:	f000 fa6f 	bl	8001010 <clearLed1>
			setTimer1(50);
 8000b32:	2032      	movs	r0, #50	; 0x32
 8000b34:	f000 fef6 	bl	8001924 <setTimer1>
		if (isButton2Pressed() == 1) {
 8000b38:	f7ff fdda 	bl	80006f0 <isButton2Pressed>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	f040 8091 	bne.w	8000c66 <fsm_manual_run+0x1be>
			status = RED_EDIT;
 8000b44:	4b4b      	ldr	r3, [pc, #300]	; (8000c74 <fsm_manual_run+0x1cc>)
 8000b46:	2208      	movs	r2, #8
 8000b48:	601a      	str	r2, [r3, #0]
			setTimer1(25);
 8000b4a:	2019      	movs	r0, #25
 8000b4c:	f000 feea 	bl	8001924 <setTimer1>
		break;
 8000b50:	e089      	b.n	8000c66 <fsm_manual_run+0x1be>
		if (timer1_flag == 1) {
 8000b52:	4b49      	ldr	r3, [pc, #292]	; (8000c78 <fsm_manual_run+0x1d0>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d10a      	bne.n	8000b70 <fsm_manual_run+0xc8>
			HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8000b5a:	2110      	movs	r1, #16
 8000b5c:	4847      	ldr	r0, [pc, #284]	; (8000c7c <fsm_manual_run+0x1d4>)
 8000b5e:	f001 fa4e 	bl	8001ffe <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000b62:	2180      	movs	r1, #128	; 0x80
 8000b64:	4845      	ldr	r0, [pc, #276]	; (8000c7c <fsm_manual_run+0x1d4>)
 8000b66:	f001 fa4a 	bl	8001ffe <HAL_GPIO_TogglePin>
			setTimer1(50);
 8000b6a:	2032      	movs	r0, #50	; 0x32
 8000b6c:	f000 feda 	bl	8001924 <setTimer1>
		if (isButton1Pressed() == 1) {
 8000b70:	f7ff fdac 	bl	80006cc <isButton1Pressed>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d124      	bne.n	8000bc4 <fsm_manual_run+0x11c>
			status = MODE_4;
 8000b7a:	4b3e      	ldr	r3, [pc, #248]	; (8000c74 <fsm_manual_run+0x1cc>)
 8000b7c:	2204      	movs	r2, #4
 8000b7e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b86:	483d      	ldr	r0, [pc, #244]	; (8000c7c <fsm_manual_run+0x1d4>)
 8000b88:	f001 fa21 	bl	8001fce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b92:	483a      	ldr	r0, [pc, #232]	; (8000c7c <fsm_manual_run+0x1d4>)
 8000b94:	f001 fa1b 	bl	8001fce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b9e:	4837      	ldr	r0, [pc, #220]	; (8000c7c <fsm_manual_run+0x1d4>)
 8000ba0:	f001 fa15 	bl	8001fce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000baa:	4834      	ldr	r0, [pc, #208]	; (8000c7c <fsm_manual_run+0x1d4>)
 8000bac:	f001 fa0f 	bl	8001fce <HAL_GPIO_WritePin>
			display7SEG_North_South(4);
 8000bb0:	2004      	movs	r0, #4
 8000bb2:	f7ff fc13 	bl	80003dc <display7SEG_North_South>
			clearLed();
 8000bb6:	f000 f9d3 	bl	8000f60 <clearLed>
			clearLed1();
 8000bba:	f000 fa29 	bl	8001010 <clearLed1>
			setTimer1(50);
 8000bbe:	2032      	movs	r0, #50	; 0x32
 8000bc0:	f000 feb0 	bl	8001924 <setTimer1>
		if (isButton2Pressed() == 1) {
 8000bc4:	f7ff fd94 	bl	80006f0 <isButton2Pressed>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d14d      	bne.n	8000c6a <fsm_manual_run+0x1c2>
			status = GREEN_EDIT;
 8000bce:	4b29      	ldr	r3, [pc, #164]	; (8000c74 <fsm_manual_run+0x1cc>)
 8000bd0:	220a      	movs	r2, #10
 8000bd2:	601a      	str	r2, [r3, #0]
			setTimer1(25);
 8000bd4:	2019      	movs	r0, #25
 8000bd6:	f000 fea5 	bl	8001924 <setTimer1>
		break;
 8000bda:	e046      	b.n	8000c6a <fsm_manual_run+0x1c2>
		if (timer1_flag == 1) {
 8000bdc:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <fsm_manual_run+0x1d0>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d10a      	bne.n	8000bfa <fsm_manual_run+0x152>
			HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8000be4:	2108      	movs	r1, #8
 8000be6:	4825      	ldr	r0, [pc, #148]	; (8000c7c <fsm_manual_run+0x1d4>)
 8000be8:	f001 fa09 	bl	8001ffe <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000bec:	2140      	movs	r1, #64	; 0x40
 8000bee:	4823      	ldr	r0, [pc, #140]	; (8000c7c <fsm_manual_run+0x1d4>)
 8000bf0:	f001 fa05 	bl	8001ffe <HAL_GPIO_TogglePin>
			setTimer1(50);
 8000bf4:	2032      	movs	r0, #50	; 0x32
 8000bf6:	f000 fe95 	bl	8001924 <setTimer1>
		if (isButton1Pressed() == 1) {
 8000bfa:	f7ff fd67 	bl	80006cc <isButton1Pressed>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d124      	bne.n	8000c4e <fsm_manual_run+0x1a6>
			status = MODE_1;
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <fsm_manual_run+0x1cc>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c10:	481a      	ldr	r0, [pc, #104]	; (8000c7c <fsm_manual_run+0x1d4>)
 8000c12:	f001 f9dc 	bl	8001fce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c1c:	4817      	ldr	r0, [pc, #92]	; (8000c7c <fsm_manual_run+0x1d4>)
 8000c1e:	f001 f9d6 	bl	8001fce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000c22:	2201      	movs	r2, #1
 8000c24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c28:	4814      	ldr	r0, [pc, #80]	; (8000c7c <fsm_manual_run+0x1d4>)
 8000c2a:	f001 f9d0 	bl	8001fce <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c34:	4811      	ldr	r0, [pc, #68]	; (8000c7c <fsm_manual_run+0x1d4>)
 8000c36:	f001 f9ca 	bl	8001fce <HAL_GPIO_WritePin>
			display7SEG_North_South(1);
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f7ff fbce 	bl	80003dc <display7SEG_North_South>
			clearLed();
 8000c40:	f000 f98e 	bl	8000f60 <clearLed>
			clearLed1();
 8000c44:	f000 f9e4 	bl	8001010 <clearLed1>
			setTimer1(25);
 8000c48:	2019      	movs	r0, #25
 8000c4a:	f000 fe6b 	bl	8001924 <setTimer1>
		if (isButton2Pressed() == 1) {
 8000c4e:	f7ff fd4f 	bl	80006f0 <isButton2Pressed>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d10a      	bne.n	8000c6e <fsm_manual_run+0x1c6>
			status = YELLOW_EDIT;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <fsm_manual_run+0x1cc>)
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	601a      	str	r2, [r3, #0]
			setTimer1(25);
 8000c5e:	2019      	movs	r0, #25
 8000c60:	f000 fe60 	bl	8001924 <setTimer1>
		break;
 8000c64:	e003      	b.n	8000c6e <fsm_manual_run+0x1c6>
		break;
 8000c66:	bf00      	nop
 8000c68:	e002      	b.n	8000c70 <fsm_manual_run+0x1c8>
		break;
 8000c6a:	bf00      	nop
 8000c6c:	e000      	b.n	8000c70 <fsm_manual_run+0x1c8>
		break;
 8000c6e:	bf00      	nop
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000084 	.word	0x20000084
 8000c78:	200000c0 	.word	0x200000c0
 8000c7c:	40010800 	.word	0x40010800

08000c80 <fsm_save_value_run>:
 *  Created on: Oct 27, 2024
 *      Author: Admin
 */

#include "fsm_save_value.h"
void fsm_save_value_run() {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	switch (status) {
 8000c84:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <fsm_save_value_run+0x88>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b0d      	cmp	r3, #13
 8000c8a:	d026      	beq.n	8000cda <fsm_save_value_run+0x5a>
 8000c8c:	2b0d      	cmp	r3, #13
 8000c8e:	dc39      	bgt.n	8000d04 <fsm_save_value_run+0x84>
 8000c90:	2b09      	cmp	r3, #9
 8000c92:	d002      	beq.n	8000c9a <fsm_save_value_run+0x1a>
 8000c94:	2b0b      	cmp	r3, #11
 8000c96:	d010      	beq.n	8000cba <fsm_save_value_run+0x3a>
		if (timer1_flag == 1) {
			status = INIT;
		}
		break;
	}
}
 8000c98:	e034      	b.n	8000d04 <fsm_save_value_run+0x84>
		time_red = time_red;
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <fsm_save_value_run+0x8c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a1b      	ldr	r2, [pc, #108]	; (8000d0c <fsm_save_value_run+0x8c>)
 8000ca0:	6013      	str	r3, [r2, #0]
		clearLed();
 8000ca2:	f000 f95d 	bl	8000f60 <clearLed>
		clearLed1();
 8000ca6:	f000 f9b3 	bl	8001010 <clearLed1>
		if (timer1_flag == 1) {
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <fsm_save_value_run+0x90>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d123      	bne.n	8000cfa <fsm_save_value_run+0x7a>
			status = INIT;
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <fsm_save_value_run+0x88>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
		break;
 8000cb8:	e01f      	b.n	8000cfa <fsm_save_value_run+0x7a>
		time_green = time_green;
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <fsm_save_value_run+0x94>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a15      	ldr	r2, [pc, #84]	; (8000d14 <fsm_save_value_run+0x94>)
 8000cc0:	6013      	str	r3, [r2, #0]
		clearLed();
 8000cc2:	f000 f94d 	bl	8000f60 <clearLed>
		clearLed1();
 8000cc6:	f000 f9a3 	bl	8001010 <clearLed1>
		if (timer1_flag == 1) {
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <fsm_save_value_run+0x90>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d115      	bne.n	8000cfe <fsm_save_value_run+0x7e>
			status = INIT;
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <fsm_save_value_run+0x88>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
		break;
 8000cd8:	e011      	b.n	8000cfe <fsm_save_value_run+0x7e>
		time_yellow = time_yellow;
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <fsm_save_value_run+0x98>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <fsm_save_value_run+0x98>)
 8000ce0:	6013      	str	r3, [r2, #0]
		clearLed();
 8000ce2:	f000 f93d 	bl	8000f60 <clearLed>
		clearLed1();
 8000ce6:	f000 f993 	bl	8001010 <clearLed1>
		if (timer1_flag == 1) {
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <fsm_save_value_run+0x90>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d107      	bne.n	8000d02 <fsm_save_value_run+0x82>
			status = INIT;
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <fsm_save_value_run+0x88>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
		break;
 8000cf8:	e003      	b.n	8000d02 <fsm_save_value_run+0x82>
		break;
 8000cfa:	bf00      	nop
 8000cfc:	e002      	b.n	8000d04 <fsm_save_value_run+0x84>
		break;
 8000cfe:	bf00      	nop
 8000d00:	e000      	b.n	8000d04 <fsm_save_value_run+0x84>
		break;
 8000d02:	bf00      	nop
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000084 	.word	0x20000084
 8000d0c:	20000038 	.word	0x20000038
 8000d10:	200000c0 	.word	0x200000c0
 8000d14:	2000003c 	.word	0x2000003c
 8000d18:	20000040 	.word	0x20000040

08000d1c <fsm_setting_run>:
 *
 *  Created on: Oct 27, 2024
 *      Author: Admin
 */
#include "fsm_setting.h"
void fsm_setting_run() {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	switch (status) {
 8000d20:	4b76      	ldr	r3, [pc, #472]	; (8000efc <fsm_setting_run+0x1e0>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b0c      	cmp	r3, #12
 8000d26:	f000 8099 	beq.w	8000e5c <fsm_setting_run+0x140>
 8000d2a:	2b0c      	cmp	r3, #12
 8000d2c:	f300 80e3 	bgt.w	8000ef6 <fsm_setting_run+0x1da>
 8000d30:	2b08      	cmp	r3, #8
 8000d32:	d002      	beq.n	8000d3a <fsm_setting_run+0x1e>
 8000d34:	2b0a      	cmp	r3, #10
 8000d36:	d049      	beq.n	8000dcc <fsm_setting_run+0xb0>
			status = YELLOW_SAVE;
			setTimer1(100);
		}
		break;
	}
}
 8000d38:	e0dd      	b.n	8000ef6 <fsm_setting_run+0x1da>
		if (timer1_flag == 1) {
 8000d3a:	4b71      	ldr	r3, [pc, #452]	; (8000f00 <fsm_setting_run+0x1e4>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d119      	bne.n	8000d76 <fsm_setting_run+0x5a>
			dem_red++;
 8000d42:	4b70      	ldr	r3, [pc, #448]	; (8000f04 <fsm_setting_run+0x1e8>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	3301      	adds	r3, #1
 8000d48:	4a6e      	ldr	r2, [pc, #440]	; (8000f04 <fsm_setting_run+0x1e8>)
 8000d4a:	6013      	str	r3, [r2, #0]
			display_value_edit(red_buffer);
 8000d4c:	486e      	ldr	r0, [pc, #440]	; (8000f08 <fsm_setting_run+0x1ec>)
 8000d4e:	f000 fac1 	bl	80012d4 <display_value_edit>
			if (dem_red == 2) {
 8000d52:	4b6c      	ldr	r3, [pc, #432]	; (8000f04 <fsm_setting_run+0x1e8>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d10a      	bne.n	8000d70 <fsm_setting_run+0x54>
				HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000d5a:	2104      	movs	r1, #4
 8000d5c:	486b      	ldr	r0, [pc, #428]	; (8000f0c <fsm_setting_run+0x1f0>)
 8000d5e:	f001 f94e 	bl	8001ffe <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000d62:	2120      	movs	r1, #32
 8000d64:	4869      	ldr	r0, [pc, #420]	; (8000f0c <fsm_setting_run+0x1f0>)
 8000d66:	f001 f94a 	bl	8001ffe <HAL_GPIO_TogglePin>
				dem_red = 0;
 8000d6a:	4b66      	ldr	r3, [pc, #408]	; (8000f04 <fsm_setting_run+0x1e8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
			setTimer1(25);
 8000d70:	2019      	movs	r0, #25
 8000d72:	f000 fdd7 	bl	8001924 <setTimer1>
		if (isButton2Pressed() == 1) {
 8000d76:	f7ff fcbb 	bl	80006f0 <isButton2Pressed>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d113      	bne.n	8000da8 <fsm_setting_run+0x8c>
			if (time_red < 7 || time_red > 0) {
 8000d80:	4b63      	ldr	r3, [pc, #396]	; (8000f10 <fsm_setting_run+0x1f4>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b06      	cmp	r3, #6
 8000d86:	dd03      	ble.n	8000d90 <fsm_setting_run+0x74>
 8000d88:	4b61      	ldr	r3, [pc, #388]	; (8000f10 <fsm_setting_run+0x1f4>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	dd0b      	ble.n	8000da8 <fsm_setting_run+0x8c>
				time_red++;
 8000d90:	4b5f      	ldr	r3, [pc, #380]	; (8000f10 <fsm_setting_run+0x1f4>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	3301      	adds	r3, #1
 8000d96:	4a5e      	ldr	r2, [pc, #376]	; (8000f10 <fsm_setting_run+0x1f4>)
 8000d98:	6013      	str	r3, [r2, #0]
				if (time_red == 7) {
 8000d9a:	4b5d      	ldr	r3, [pc, #372]	; (8000f10 <fsm_setting_run+0x1f4>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b07      	cmp	r3, #7
 8000da0:	d102      	bne.n	8000da8 <fsm_setting_run+0x8c>
					time_red = 1;
 8000da2:	4b5b      	ldr	r3, [pc, #364]	; (8000f10 <fsm_setting_run+0x1f4>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	601a      	str	r2, [r3, #0]
		redBuffer(time_red);
 8000da8:	4b59      	ldr	r3, [pc, #356]	; (8000f10 <fsm_setting_run+0x1f4>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 f9c3 	bl	8001138 <redBuffer>
		if (isButton3Pressed() == 1) {
 8000db2:	f7ff fcaf 	bl	8000714 <isButton3Pressed>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	f040 8097 	bne.w	8000eec <fsm_setting_run+0x1d0>
			status = RED_SAVE;
 8000dbe:	4b4f      	ldr	r3, [pc, #316]	; (8000efc <fsm_setting_run+0x1e0>)
 8000dc0:	2209      	movs	r2, #9
 8000dc2:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8000dc4:	2064      	movs	r0, #100	; 0x64
 8000dc6:	f000 fdad 	bl	8001924 <setTimer1>
		break;
 8000dca:	e08f      	b.n	8000eec <fsm_setting_run+0x1d0>
		if (timer1_flag == 1) {
 8000dcc:	4b4c      	ldr	r3, [pc, #304]	; (8000f00 <fsm_setting_run+0x1e4>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d119      	bne.n	8000e08 <fsm_setting_run+0xec>
			dem_green++;
 8000dd4:	4b4f      	ldr	r3, [pc, #316]	; (8000f14 <fsm_setting_run+0x1f8>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	4a4e      	ldr	r2, [pc, #312]	; (8000f14 <fsm_setting_run+0x1f8>)
 8000ddc:	6013      	str	r3, [r2, #0]
			display_value_edit(green_buffer);
 8000dde:	484e      	ldr	r0, [pc, #312]	; (8000f18 <fsm_setting_run+0x1fc>)
 8000de0:	f000 fa78 	bl	80012d4 <display_value_edit>
			if (dem_green == 2) {
 8000de4:	4b4b      	ldr	r3, [pc, #300]	; (8000f14 <fsm_setting_run+0x1f8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d10a      	bne.n	8000e02 <fsm_setting_run+0xe6>
				HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8000dec:	2110      	movs	r1, #16
 8000dee:	4847      	ldr	r0, [pc, #284]	; (8000f0c <fsm_setting_run+0x1f0>)
 8000df0:	f001 f905 	bl	8001ffe <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000df4:	2180      	movs	r1, #128	; 0x80
 8000df6:	4845      	ldr	r0, [pc, #276]	; (8000f0c <fsm_setting_run+0x1f0>)
 8000df8:	f001 f901 	bl	8001ffe <HAL_GPIO_TogglePin>
				dem_green = 0;
 8000dfc:	4b45      	ldr	r3, [pc, #276]	; (8000f14 <fsm_setting_run+0x1f8>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
			setTimer1(25);
 8000e02:	2019      	movs	r0, #25
 8000e04:	f000 fd8e 	bl	8001924 <setTimer1>
		if (isButton2Pressed() == 1) {
 8000e08:	f7ff fc72 	bl	80006f0 <isButton2Pressed>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d113      	bne.n	8000e3a <fsm_setting_run+0x11e>
			if (time_green < 7 || time_green > 0) {
 8000e12:	4b42      	ldr	r3, [pc, #264]	; (8000f1c <fsm_setting_run+0x200>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	dd03      	ble.n	8000e22 <fsm_setting_run+0x106>
 8000e1a:	4b40      	ldr	r3, [pc, #256]	; (8000f1c <fsm_setting_run+0x200>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	dd0b      	ble.n	8000e3a <fsm_setting_run+0x11e>
				time_green++;
 8000e22:	4b3e      	ldr	r3, [pc, #248]	; (8000f1c <fsm_setting_run+0x200>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	3301      	adds	r3, #1
 8000e28:	4a3c      	ldr	r2, [pc, #240]	; (8000f1c <fsm_setting_run+0x200>)
 8000e2a:	6013      	str	r3, [r2, #0]
				if (time_green == 7) {
 8000e2c:	4b3b      	ldr	r3, [pc, #236]	; (8000f1c <fsm_setting_run+0x200>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b07      	cmp	r3, #7
 8000e32:	d102      	bne.n	8000e3a <fsm_setting_run+0x11e>
					time_green = 1;
 8000e34:	4b39      	ldr	r3, [pc, #228]	; (8000f1c <fsm_setting_run+0x200>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	601a      	str	r2, [r3, #0]
		greenBuffer(time_green);
 8000e3a:	4b38      	ldr	r3, [pc, #224]	; (8000f1c <fsm_setting_run+0x200>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f99e 	bl	8001180 <greenBuffer>
		if (isButton3Pressed() == 1) {
 8000e44:	f7ff fc66 	bl	8000714 <isButton3Pressed>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d150      	bne.n	8000ef0 <fsm_setting_run+0x1d4>
			status = GREEN_SAVE;
 8000e4e:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <fsm_setting_run+0x1e0>)
 8000e50:	220b      	movs	r2, #11
 8000e52:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8000e54:	2064      	movs	r0, #100	; 0x64
 8000e56:	f000 fd65 	bl	8001924 <setTimer1>
		break;
 8000e5a:	e049      	b.n	8000ef0 <fsm_setting_run+0x1d4>
		if (timer1_flag == 1) {
 8000e5c:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <fsm_setting_run+0x1e4>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d119      	bne.n	8000e98 <fsm_setting_run+0x17c>
			dem_yellow++;
 8000e64:	4b2e      	ldr	r3, [pc, #184]	; (8000f20 <fsm_setting_run+0x204>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	4a2d      	ldr	r2, [pc, #180]	; (8000f20 <fsm_setting_run+0x204>)
 8000e6c:	6013      	str	r3, [r2, #0]
			display_value_edit(yellow_buffer);
 8000e6e:	482d      	ldr	r0, [pc, #180]	; (8000f24 <fsm_setting_run+0x208>)
 8000e70:	f000 fa30 	bl	80012d4 <display_value_edit>
			if (dem_yellow == 2) {
 8000e74:	4b2a      	ldr	r3, [pc, #168]	; (8000f20 <fsm_setting_run+0x204>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d10a      	bne.n	8000e92 <fsm_setting_run+0x176>
				HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8000e7c:	2108      	movs	r1, #8
 8000e7e:	4823      	ldr	r0, [pc, #140]	; (8000f0c <fsm_setting_run+0x1f0>)
 8000e80:	f001 f8bd 	bl	8001ffe <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000e84:	2140      	movs	r1, #64	; 0x40
 8000e86:	4821      	ldr	r0, [pc, #132]	; (8000f0c <fsm_setting_run+0x1f0>)
 8000e88:	f001 f8b9 	bl	8001ffe <HAL_GPIO_TogglePin>
				dem_yellow = 0;
 8000e8c:	4b24      	ldr	r3, [pc, #144]	; (8000f20 <fsm_setting_run+0x204>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
			setTimer1(25);
 8000e92:	2019      	movs	r0, #25
 8000e94:	f000 fd46 	bl	8001924 <setTimer1>
		if (isButton2Pressed() == 1) {
 8000e98:	f7ff fc2a 	bl	80006f0 <isButton2Pressed>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d113      	bne.n	8000eca <fsm_setting_run+0x1ae>
			if (time_yellow < 7 || time_yellow > 0) {
 8000ea2:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <fsm_setting_run+0x20c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b06      	cmp	r3, #6
 8000ea8:	dd03      	ble.n	8000eb2 <fsm_setting_run+0x196>
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <fsm_setting_run+0x20c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	dd0b      	ble.n	8000eca <fsm_setting_run+0x1ae>
				time_yellow++;
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <fsm_setting_run+0x20c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	4a1b      	ldr	r2, [pc, #108]	; (8000f28 <fsm_setting_run+0x20c>)
 8000eba:	6013      	str	r3, [r2, #0]
				if (time_yellow == 7) {
 8000ebc:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <fsm_setting_run+0x20c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b07      	cmp	r3, #7
 8000ec2:	d102      	bne.n	8000eca <fsm_setting_run+0x1ae>
					time_yellow = 1;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <fsm_setting_run+0x20c>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	601a      	str	r2, [r3, #0]
		yellowBuffer(time_yellow);
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <fsm_setting_run+0x20c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f97a 	bl	80011c8 <yellowBuffer>
		if (isButton3Pressed() == 1) {
 8000ed4:	f7ff fc1e 	bl	8000714 <isButton3Pressed>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d10a      	bne.n	8000ef4 <fsm_setting_run+0x1d8>
			status = YELLOW_SAVE;
 8000ede:	4b07      	ldr	r3, [pc, #28]	; (8000efc <fsm_setting_run+0x1e0>)
 8000ee0:	220d      	movs	r2, #13
 8000ee2:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8000ee4:	2064      	movs	r0, #100	; 0x64
 8000ee6:	f000 fd1d 	bl	8001924 <setTimer1>
		break;
 8000eea:	e003      	b.n	8000ef4 <fsm_setting_run+0x1d8>
		break;
 8000eec:	bf00      	nop
 8000eee:	e002      	b.n	8000ef6 <fsm_setting_run+0x1da>
		break;
 8000ef0:	bf00      	nop
 8000ef2:	e000      	b.n	8000ef6 <fsm_setting_run+0x1da>
		break;
 8000ef4:	bf00      	nop
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000084 	.word	0x20000084
 8000f00:	200000c0 	.word	0x200000c0
 8000f04:	20000078 	.word	0x20000078
 8000f08:	2000009c 	.word	0x2000009c
 8000f0c:	40010800 	.word	0x40010800
 8000f10:	20000038 	.word	0x20000038
 8000f14:	2000007c 	.word	0x2000007c
 8000f18:	200000ac 	.word	0x200000ac
 8000f1c:	2000003c 	.word	0x2000003c
 8000f20:	20000080 	.word	0x20000080
 8000f24:	200000a4 	.word	0x200000a4
 8000f28:	20000040 	.word	0x20000040

08000f2c <init_time_traffic>:
int time_yellow = 2;

int count = 0;
int count1 = 0;

void init_time_traffic(int red, int green, int yellow) {
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
	time_red = red;
 8000f38:	4a06      	ldr	r2, [pc, #24]	; (8000f54 <init_time_traffic+0x28>)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	6013      	str	r3, [r2, #0]
	;
	time_green = green;
 8000f3e:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <init_time_traffic+0x2c>)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	6013      	str	r3, [r2, #0]
	time_yellow = yellow;
 8000f44:	4a05      	ldr	r2, [pc, #20]	; (8000f5c <init_time_traffic+0x30>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6013      	str	r3, [r2, #0]
}
 8000f4a:	bf00      	nop
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	20000038 	.word	0x20000038
 8000f58:	2000003c 	.word	0x2000003c
 8000f5c:	20000040 	.word	0x20000040

08000f60 <clearLed>:
void clearLed() {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2120      	movs	r1, #32
 8000f68:	4807      	ldr	r0, [pc, #28]	; (8000f88 <clearLed+0x28>)
 8000f6a:	f001 f830 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2180      	movs	r1, #128	; 0x80
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <clearLed+0x28>)
 8000f74:	f001 f82b 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2140      	movs	r1, #64	; 0x40
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <clearLed+0x28>)
 8000f7e:	f001 f826 	bl	8001fce <HAL_GPIO_WritePin>
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40010800 	.word	0x40010800

08000f8c <setLedRed>:
void setLedRed() {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2120      	movs	r1, #32
 8000f94:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <setLedRed+0x28>)
 8000f96:	f001 f81a 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2180      	movs	r1, #128	; 0x80
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <setLedRed+0x28>)
 8000fa0:	f001 f815 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2140      	movs	r1, #64	; 0x40
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <setLedRed+0x28>)
 8000faa:	f001 f810 	bl	8001fce <HAL_GPIO_WritePin>
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40010800 	.word	0x40010800

08000fb8 <setLedGreen>:

void setLedGreen() {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2120      	movs	r1, #32
 8000fc0:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <setLedGreen+0x28>)
 8000fc2:	f001 f804 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2180      	movs	r1, #128	; 0x80
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <setLedGreen+0x28>)
 8000fcc:	f000 ffff 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2140      	movs	r1, #64	; 0x40
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <setLedGreen+0x28>)
 8000fd6:	f000 fffa 	bl	8001fce <HAL_GPIO_WritePin>
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40010800 	.word	0x40010800

08000fe4 <setLedYellow>:

void setLedYellow() {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2120      	movs	r1, #32
 8000fec:	4807      	ldr	r0, [pc, #28]	; (800100c <setLedYellow+0x28>)
 8000fee:	f000 ffee 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2180      	movs	r1, #128	; 0x80
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <setLedYellow+0x28>)
 8000ff8:	f000 ffe9 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2140      	movs	r1, #64	; 0x40
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <setLedYellow+0x28>)
 8001002:	f000 ffe4 	bl	8001fce <HAL_GPIO_WritePin>
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40010800 	.word	0x40010800

08001010 <clearLed1>:

void clearLed1() {
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	2104      	movs	r1, #4
 8001018:	4807      	ldr	r0, [pc, #28]	; (8001038 <clearLed1+0x28>)
 800101a:	f000 ffd8 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2110      	movs	r1, #16
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <clearLed1+0x28>)
 8001024:	f000 ffd3 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	2108      	movs	r1, #8
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <clearLed1+0x28>)
 800102e:	f000 ffce 	bl	8001fce <HAL_GPIO_WritePin>
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40010800 	.word	0x40010800

0800103c <setLedRed1>:
void setLedRed1() {
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	2104      	movs	r1, #4
 8001044:	4807      	ldr	r0, [pc, #28]	; (8001064 <setLedRed1+0x28>)
 8001046:	f000 ffc2 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2110      	movs	r1, #16
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <setLedRed1+0x28>)
 8001050:	f000 ffbd 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	2108      	movs	r1, #8
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <setLedRed1+0x28>)
 800105a:	f000 ffb8 	bl	8001fce <HAL_GPIO_WritePin>
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40010800 	.word	0x40010800

08001068 <setLedGreen1>:

void setLedGreen1() {
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	2104      	movs	r1, #4
 8001070:	4807      	ldr	r0, [pc, #28]	; (8001090 <setLedGreen1+0x28>)
 8001072:	f000 ffac 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8001076:	2201      	movs	r2, #1
 8001078:	2110      	movs	r1, #16
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <setLedGreen1+0x28>)
 800107c:	f000 ffa7 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	2108      	movs	r1, #8
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <setLedGreen1+0x28>)
 8001086:	f000 ffa2 	bl	8001fce <HAL_GPIO_WritePin>
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40010800 	.word	0x40010800

08001094 <setLedYellow1>:

void setLedYellow1() {
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	2104      	movs	r1, #4
 800109c:	4807      	ldr	r0, [pc, #28]	; (80010bc <setLedYellow1+0x28>)
 800109e:	f000 ff96 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2110      	movs	r1, #16
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <setLedYellow1+0x28>)
 80010a8:	f000 ff91 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 80010ac:	2201      	movs	r2, #1
 80010ae:	2108      	movs	r1, #8
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <setLedYellow1+0x28>)
 80010b2:	f000 ff8c 	bl	8001fce <HAL_GPIO_WritePin>
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40010800 	.word	0x40010800

080010c0 <updateClockBuffer>:

void updateClockBuffer(int hour, int minute) {
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	// Update the hour display
	led_buffer[0] = hour / 10;  // Tens digit of the hour
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a18      	ldr	r2, [pc, #96]	; (8001130 <updateClockBuffer+0x70>)
 80010ce:	fb82 1203 	smull	r1, r2, r2, r3
 80010d2:	1092      	asrs	r2, r2, #2
 80010d4:	17db      	asrs	r3, r3, #31
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	4a16      	ldr	r2, [pc, #88]	; (8001134 <updateClockBuffer+0x74>)
 80010da:	6013      	str	r3, [r2, #0]
	led_buffer[1] = hour % 10;  // Units digit of the hour
 80010dc:	6879      	ldr	r1, [r7, #4]
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <updateClockBuffer+0x70>)
 80010e0:	fb83 2301 	smull	r2, r3, r3, r1
 80010e4:	109a      	asrs	r2, r3, #2
 80010e6:	17cb      	asrs	r3, r1, #31
 80010e8:	1ad2      	subs	r2, r2, r3
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	1aca      	subs	r2, r1, r3
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <updateClockBuffer+0x74>)
 80010f6:	605a      	str	r2, [r3, #4]

	// Update the minute display
	led_buffer[2] = minute / 10;  // Tens digit of the minute
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <updateClockBuffer+0x70>)
 80010fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001100:	1092      	asrs	r2, r2, #2
 8001102:	17db      	asrs	r3, r3, #31
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	4a0b      	ldr	r2, [pc, #44]	; (8001134 <updateClockBuffer+0x74>)
 8001108:	6093      	str	r3, [r2, #8]
	led_buffer[3] = minute % 10;  // Units digit of the minute
 800110a:	6839      	ldr	r1, [r7, #0]
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <updateClockBuffer+0x70>)
 800110e:	fb83 2301 	smull	r2, r3, r3, r1
 8001112:	109a      	asrs	r2, r3, #2
 8001114:	17cb      	asrs	r3, r1, #31
 8001116:	1ad2      	subs	r2, r2, r3
 8001118:	4613      	mov	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	1aca      	subs	r2, r1, r3
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <updateClockBuffer+0x74>)
 8001124:	60da      	str	r2, [r3, #12]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	66666667 	.word	0x66666667
 8001134:	2000008c 	.word	0x2000008c

08001138 <redBuffer>:
void redBuffer(int red) {
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	red_buffer[0] = red / 10;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <redBuffer+0x40>)
 8001144:	fb82 1203 	smull	r1, r2, r2, r3
 8001148:	1092      	asrs	r2, r2, #2
 800114a:	17db      	asrs	r3, r3, #31
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	4a0b      	ldr	r2, [pc, #44]	; (800117c <redBuffer+0x44>)
 8001150:	6013      	str	r3, [r2, #0]
	red_buffer[1] = red % 10;
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <redBuffer+0x40>)
 8001156:	fb83 2301 	smull	r2, r3, r3, r1
 800115a:	109a      	asrs	r2, r3, #2
 800115c:	17cb      	asrs	r3, r1, #31
 800115e:	1ad2      	subs	r2, r2, r3
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	1aca      	subs	r2, r1, r3
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <redBuffer+0x44>)
 800116c:	605a      	str	r2, [r3, #4]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	66666667 	.word	0x66666667
 800117c:	2000009c 	.word	0x2000009c

08001180 <greenBuffer>:
void greenBuffer(int green) {
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	green_buffer[0] = green / 10;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a0d      	ldr	r2, [pc, #52]	; (80011c0 <greenBuffer+0x40>)
 800118c:	fb82 1203 	smull	r1, r2, r2, r3
 8001190:	1092      	asrs	r2, r2, #2
 8001192:	17db      	asrs	r3, r3, #31
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	4a0b      	ldr	r2, [pc, #44]	; (80011c4 <greenBuffer+0x44>)
 8001198:	6013      	str	r3, [r2, #0]
	green_buffer[1] = green % 10;
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <greenBuffer+0x40>)
 800119e:	fb83 2301 	smull	r2, r3, r3, r1
 80011a2:	109a      	asrs	r2, r3, #2
 80011a4:	17cb      	asrs	r3, r1, #31
 80011a6:	1ad2      	subs	r2, r2, r3
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	1aca      	subs	r2, r1, r3
 80011b2:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <greenBuffer+0x44>)
 80011b4:	605a      	str	r2, [r3, #4]
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	66666667 	.word	0x66666667
 80011c4:	200000ac 	.word	0x200000ac

080011c8 <yellowBuffer>:
void yellowBuffer(int yellow) {
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	yellow_buffer[0] = yellow / 10;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a0d      	ldr	r2, [pc, #52]	; (8001208 <yellowBuffer+0x40>)
 80011d4:	fb82 1203 	smull	r1, r2, r2, r3
 80011d8:	1092      	asrs	r2, r2, #2
 80011da:	17db      	asrs	r3, r3, #31
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	4a0b      	ldr	r2, [pc, #44]	; (800120c <yellowBuffer+0x44>)
 80011e0:	6013      	str	r3, [r2, #0]
	yellow_buffer[1] = yellow % 10;
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <yellowBuffer+0x40>)
 80011e6:	fb83 2301 	smull	r2, r3, r3, r1
 80011ea:	109a      	asrs	r2, r3, #2
 80011ec:	17cb      	asrs	r3, r1, #31
 80011ee:	1ad2      	subs	r2, r2, r3
 80011f0:	4613      	mov	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	1aca      	subs	r2, r1, r3
 80011fa:	4b04      	ldr	r3, [pc, #16]	; (800120c <yellowBuffer+0x44>)
 80011fc:	605a      	str	r2, [r3, #4]
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	66666667 	.word	0x66666667
 800120c:	200000a4 	.word	0x200000a4

08001210 <display>:

void display() {
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	switch (index_led) {
 8001214:	4b2c      	ldr	r3, [pc, #176]	; (80012c8 <display+0xb8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d002      	beq.n	8001222 <display+0x12>
 800121c:	2b01      	cmp	r3, #1
 800121e:	d023      	beq.n	8001268 <display+0x58>
 8001220:	e045      	b.n	80012ae <display+0x9e>
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001228:	4828      	ldr	r0, [pc, #160]	; (80012cc <display+0xbc>)
 800122a:	f000 fed0 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800122e:	2201      	movs	r2, #1
 8001230:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001234:	4825      	ldr	r0, [pc, #148]	; (80012cc <display+0xbc>)
 8001236:	f000 feca 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001240:	4822      	ldr	r0, [pc, #136]	; (80012cc <display+0xbc>)
 8001242:	f000 fec4 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001246:	2201      	movs	r2, #1
 8001248:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800124c:	481f      	ldr	r0, [pc, #124]	; (80012cc <display+0xbc>)
 800124e:	f000 febe 	bl	8001fce <HAL_GPIO_WritePin>
		display7SEG_North_South(led_buffer[0]);
 8001252:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <display+0xc0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f8c0 	bl	80003dc <display7SEG_North_South>
		display7SEG_East_West(led_buffer[2]);
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <display+0xc0>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	4618      	mov	r0, r3
 8001262:	f7fe ff73 	bl	800014c <display7SEG_East_West>
		break;
 8001266:	e022      	b.n	80012ae <display+0x9e>
	case 1:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800126e:	4817      	ldr	r0, [pc, #92]	; (80012cc <display+0xbc>)
 8001270:	f000 fead 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800127a:	4814      	ldr	r0, [pc, #80]	; (80012cc <display+0xbc>)
 800127c:	f000 fea7 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001280:	2201      	movs	r2, #1
 8001282:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001286:	4811      	ldr	r0, [pc, #68]	; (80012cc <display+0xbc>)
 8001288:	f000 fea1 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001292:	480e      	ldr	r0, [pc, #56]	; (80012cc <display+0xbc>)
 8001294:	f000 fe9b 	bl	8001fce <HAL_GPIO_WritePin>
		display7SEG_North_South(led_buffer[1]);
 8001298:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <display+0xc0>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f89d 	bl	80003dc <display7SEG_North_South>
		display7SEG_East_West(led_buffer[3]);
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <display+0xc0>)
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7fe ff50 	bl	800014c <display7SEG_East_West>
		break;
 80012ac:	bf00      	nop
	}

	index_led = (index_led + 1) % 2;
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <display+0xb8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	3301      	adds	r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	bfb8      	it	lt
 80012bc:	425b      	neglt	r3, r3
 80012be:	4a02      	ldr	r2, [pc, #8]	; (80012c8 <display+0xb8>)
 80012c0:	6013      	str	r3, [r2, #0]
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000088 	.word	0x20000088
 80012cc:	40010800 	.word	0x40010800
 80012d0:	2000008c 	.word	0x2000008c

080012d4 <display_value_edit>:

void display_value_edit(int led_buffer[2]) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	switch (index_led) {
 80012dc:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <display_value_edit+0x7c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d002      	beq.n	80012ea <display_value_edit+0x16>
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d012      	beq.n	800130e <display_value_edit+0x3a>
 80012e8:	e024      	b.n	8001334 <display_value_edit+0x60>
	case 0:
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f0:	4818      	ldr	r0, [pc, #96]	; (8001354 <display_value_edit+0x80>)
 80012f2:	f000 fe6c 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012fc:	4815      	ldr	r0, [pc, #84]	; (8001354 <display_value_edit+0x80>)
 80012fe:	f000 fe66 	bl	8001fce <HAL_GPIO_WritePin>
		display7SEG_East_West(led_buffer[0]);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7fe ff20 	bl	800014c <display7SEG_East_West>
		break;
 800130c:	e012      	b.n	8001334 <display_value_edit+0x60>
	case 1:
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800130e:	2201      	movs	r2, #1
 8001310:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001314:	480f      	ldr	r0, [pc, #60]	; (8001354 <display_value_edit+0x80>)
 8001316:	f000 fe5a 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001320:	480c      	ldr	r0, [pc, #48]	; (8001354 <display_value_edit+0x80>)
 8001322:	f000 fe54 	bl	8001fce <HAL_GPIO_WritePin>
		display7SEG_East_West(led_buffer[1]);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3304      	adds	r3, #4
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f7fe ff0d 	bl	800014c <display7SEG_East_West>
		break;
 8001332:	bf00      	nop
	}

	index_led = (index_led + 1) % 2;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <display_value_edit+0x7c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	3301      	adds	r3, #1
 800133a:	2b00      	cmp	r3, #0
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	bfb8      	it	lt
 8001342:	425b      	neglt	r3, r3
 8001344:	4a02      	ldr	r2, [pc, #8]	; (8001350 <display_value_edit+0x7c>)
 8001346:	6013      	str	r3, [r2, #0]
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000088 	.word	0x20000088
 8001354:	40010800 	.word	0x40010800

08001358 <init_traffic_light>:
int led_status_north_south;
//int count = 0;
//int count1 = 0;

void init_traffic_light(int check_color_ew, int led_status_ew, int counter_ew,
		int check_color_ns, int led_status_ns, int counter_ns) {
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
 8001364:	603b      	str	r3, [r7, #0]
	check_color_east_west = check_color_ew;
 8001366:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <init_traffic_light+0x3c>)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6013      	str	r3, [r2, #0]
	check_color_north_south = check_color_ns;
 800136c:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <init_traffic_light+0x40>)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	6013      	str	r3, [r2, #0]
	counter_north_south = counter_ns;
 8001372:	4a0a      	ldr	r2, [pc, #40]	; (800139c <init_traffic_light+0x44>)
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	6013      	str	r3, [r2, #0]
	counter_east_west = counter_ew;
 8001378:	4a09      	ldr	r2, [pc, #36]	; (80013a0 <init_traffic_light+0x48>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
	led_status_east_west = led_status_ew;
 800137e:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <init_traffic_light+0x4c>)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	6013      	str	r3, [r2, #0]
	led_status_north_south = led_status_ns;
 8001384:	4a08      	ldr	r2, [pc, #32]	; (80013a8 <init_traffic_light+0x50>)
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	6013      	str	r3, [r2, #0]
}
 800138a:	bf00      	nop
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	200000d8 	.word	0x200000d8
 8001398:	200000c8 	.word	0x200000c8
 800139c:	200000d4 	.word	0x200000d4
 80013a0:	200000cc 	.word	0x200000cc
 80013a4:	200000d0 	.word	0x200000d0
 80013a8:	200000c4 	.word	0x200000c4

080013ac <light_traffic_run>:
void light_traffic_run(int time_red, int time_yellow, int time_green) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]

	//  thiet lap trang thai va thoi gian chuyen tin hieu he thong den 1 (led 7 doan o tren)
	if (counter_north_south <= 0 && check_color_north_south == GREEN_COLOR) {
 80013b8:	4b80      	ldr	r3, [pc, #512]	; (80015bc <light_traffic_run+0x210>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	dc09      	bgt.n	80013d4 <light_traffic_run+0x28>
 80013c0:	4b7f      	ldr	r3, [pc, #508]	; (80015c0 <light_traffic_run+0x214>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b17      	cmp	r3, #23
 80013c6:	d105      	bne.n	80013d4 <light_traffic_run+0x28>
		counter_north_south = time_yellow;
 80013c8:	4a7c      	ldr	r2, [pc, #496]	; (80015bc <light_traffic_run+0x210>)
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	6013      	str	r3, [r2, #0]
		check_color_north_south = YELLOW_COLOR; // den vang
 80013ce:	4b7c      	ldr	r3, [pc, #496]	; (80015c0 <light_traffic_run+0x214>)
 80013d0:	2218      	movs	r2, #24
 80013d2:	601a      	str	r2, [r3, #0]
	}
	if (counter_north_south <= 0 && check_color_north_south == YELLOW_COLOR) {
 80013d4:	4b79      	ldr	r3, [pc, #484]	; (80015bc <light_traffic_run+0x210>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	dc09      	bgt.n	80013f0 <light_traffic_run+0x44>
 80013dc:	4b78      	ldr	r3, [pc, #480]	; (80015c0 <light_traffic_run+0x214>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b18      	cmp	r3, #24
 80013e2:	d105      	bne.n	80013f0 <light_traffic_run+0x44>
		counter_north_south = time_red;
 80013e4:	4a75      	ldr	r2, [pc, #468]	; (80015bc <light_traffic_run+0x210>)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6013      	str	r3, [r2, #0]
		check_color_north_south = RED_COLOR; // den do
 80013ea:	4b75      	ldr	r3, [pc, #468]	; (80015c0 <light_traffic_run+0x214>)
 80013ec:	2216      	movs	r2, #22
 80013ee:	601a      	str	r2, [r3, #0]
	}

	if (counter_north_south <= 0 && check_color_north_south == RED_COLOR) {
 80013f0:	4b72      	ldr	r3, [pc, #456]	; (80015bc <light_traffic_run+0x210>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	dc09      	bgt.n	800140c <light_traffic_run+0x60>
 80013f8:	4b71      	ldr	r3, [pc, #452]	; (80015c0 <light_traffic_run+0x214>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b16      	cmp	r3, #22
 80013fe:	d105      	bne.n	800140c <light_traffic_run+0x60>
		counter_north_south = time_green;
 8001400:	4a6e      	ldr	r2, [pc, #440]	; (80015bc <light_traffic_run+0x210>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6013      	str	r3, [r2, #0]
		check_color_north_south = GREEN_COLOR; // den xanh
 8001406:	4b6e      	ldr	r3, [pc, #440]	; (80015c0 <light_traffic_run+0x214>)
 8001408:	2217      	movs	r2, #23
 800140a:	601a      	str	r2, [r3, #0]
	}

	//  thiet lap trang thai va thoi gian chuyen tin hieu he thong den 2 (led 7 doan o duoi)
	if (counter_east_west <= 0 && check_color_east_west == RED_COLOR) {
 800140c:	4b6d      	ldr	r3, [pc, #436]	; (80015c4 <light_traffic_run+0x218>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	dc09      	bgt.n	8001428 <light_traffic_run+0x7c>
 8001414:	4b6c      	ldr	r3, [pc, #432]	; (80015c8 <light_traffic_run+0x21c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b16      	cmp	r3, #22
 800141a:	d105      	bne.n	8001428 <light_traffic_run+0x7c>
		counter_east_west = time_green;
 800141c:	4a69      	ldr	r2, [pc, #420]	; (80015c4 <light_traffic_run+0x218>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6013      	str	r3, [r2, #0]
		check_color_east_west = GREEN_COLOR; // den xanh
 8001422:	4b69      	ldr	r3, [pc, #420]	; (80015c8 <light_traffic_run+0x21c>)
 8001424:	2217      	movs	r2, #23
 8001426:	601a      	str	r2, [r3, #0]
	}
	if (counter_east_west <= 0 && check_color_east_west == GREEN_COLOR) {
 8001428:	4b66      	ldr	r3, [pc, #408]	; (80015c4 <light_traffic_run+0x218>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	dc09      	bgt.n	8001444 <light_traffic_run+0x98>
 8001430:	4b65      	ldr	r3, [pc, #404]	; (80015c8 <light_traffic_run+0x21c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b17      	cmp	r3, #23
 8001436:	d105      	bne.n	8001444 <light_traffic_run+0x98>
		counter_east_west = time_yellow;
 8001438:	4a62      	ldr	r2, [pc, #392]	; (80015c4 <light_traffic_run+0x218>)
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	6013      	str	r3, [r2, #0]
		check_color_east_west = YELLOW_COLOR; // den vang
 800143e:	4b62      	ldr	r3, [pc, #392]	; (80015c8 <light_traffic_run+0x21c>)
 8001440:	2218      	movs	r2, #24
 8001442:	601a      	str	r2, [r3, #0]
	}
	if (counter_east_west <= 0 && check_color_east_west == YELLOW_COLOR) {
 8001444:	4b5f      	ldr	r3, [pc, #380]	; (80015c4 <light_traffic_run+0x218>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	dc09      	bgt.n	8001460 <light_traffic_run+0xb4>
 800144c:	4b5e      	ldr	r3, [pc, #376]	; (80015c8 <light_traffic_run+0x21c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b18      	cmp	r3, #24
 8001452:	d105      	bne.n	8001460 <light_traffic_run+0xb4>
		counter_east_west = time_red;
 8001454:	4a5b      	ldr	r2, [pc, #364]	; (80015c4 <light_traffic_run+0x218>)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6013      	str	r3, [r2, #0]
		check_color_east_west = RED_COLOR; // den do
 800145a:	4b5b      	ldr	r3, [pc, #364]	; (80015c8 <light_traffic_run+0x21c>)
 800145c:	2216      	movs	r2, #22
 800145e:	601a      	str	r2, [r3, #0]

//		// hien thi led 7 doan he thong den 1
//		display7SEG_North_South(counter_north_south--);
//		// hien thi led 7 doan he thong den 2
//		display7SEG_East_West(counter_east_west--);
	updateClockBuffer(counter_north_south--, counter_east_west--);
 8001460:	4b56      	ldr	r3, [pc, #344]	; (80015bc <light_traffic_run+0x210>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	1e5a      	subs	r2, r3, #1
 8001466:	4955      	ldr	r1, [pc, #340]	; (80015bc <light_traffic_run+0x210>)
 8001468:	600a      	str	r2, [r1, #0]
 800146a:	4a56      	ldr	r2, [pc, #344]	; (80015c4 <light_traffic_run+0x218>)
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	1e51      	subs	r1, r2, #1
 8001470:	4854      	ldr	r0, [pc, #336]	; (80015c4 <light_traffic_run+0x218>)
 8001472:	6001      	str	r1, [r0, #0]
 8001474:	4611      	mov	r1, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fe22 	bl	80010c0 <updateClockBuffer>

	// dieu khien chuyen tin hieu he thong  den 1 (led 7 doan o tren)
	if (led_status_north_south == GREEN_AUTO) {
 800147c:	4b53      	ldr	r3, [pc, #332]	; (80015cc <light_traffic_run+0x220>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b06      	cmp	r3, #6
 8001482:	d106      	bne.n	8001492 <light_traffic_run+0xe6>
		setLedGreen1();
 8001484:	f7ff fdf0 	bl	8001068 <setLedGreen1>
		count1++;
 8001488:	4b51      	ldr	r3, [pc, #324]	; (80015d0 <light_traffic_run+0x224>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	3301      	adds	r3, #1
 800148e:	4a50      	ldr	r2, [pc, #320]	; (80015d0 <light_traffic_run+0x224>)
 8001490:	6013      	str	r3, [r2, #0]
	}
	if (led_status_north_south == YELLOW_AUTO) {
 8001492:	4b4e      	ldr	r3, [pc, #312]	; (80015cc <light_traffic_run+0x220>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b07      	cmp	r3, #7
 8001498:	d106      	bne.n	80014a8 <light_traffic_run+0xfc>
		setLedYellow1();
 800149a:	f7ff fdfb 	bl	8001094 <setLedYellow1>
		count1++;
 800149e:	4b4c      	ldr	r3, [pc, #304]	; (80015d0 <light_traffic_run+0x224>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	4a4a      	ldr	r2, [pc, #296]	; (80015d0 <light_traffic_run+0x224>)
 80014a6:	6013      	str	r3, [r2, #0]
	}
	if (led_status_north_south == RED_AUTO) {
 80014a8:	4b48      	ldr	r3, [pc, #288]	; (80015cc <light_traffic_run+0x220>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	d106      	bne.n	80014be <light_traffic_run+0x112>
		setLedRed1();
 80014b0:	f7ff fdc4 	bl	800103c <setLedRed1>
		count1++;
 80014b4:	4b46      	ldr	r3, [pc, #280]	; (80015d0 <light_traffic_run+0x224>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	3301      	adds	r3, #1
 80014ba:	4a45      	ldr	r2, [pc, #276]	; (80015d0 <light_traffic_run+0x224>)
 80014bc:	6013      	str	r3, [r2, #0]
	}
	if (count1 == time_green && led_status_north_south == GREEN_AUTO) {
 80014be:	4b44      	ldr	r3, [pc, #272]	; (80015d0 <light_traffic_run+0x224>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d109      	bne.n	80014dc <light_traffic_run+0x130>
 80014c8:	4b40      	ldr	r3, [pc, #256]	; (80015cc <light_traffic_run+0x220>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b06      	cmp	r3, #6
 80014ce:	d105      	bne.n	80014dc <light_traffic_run+0x130>
		led_status_north_south = YELLOW_AUTO;
 80014d0:	4b3e      	ldr	r3, [pc, #248]	; (80015cc <light_traffic_run+0x220>)
 80014d2:	2207      	movs	r2, #7
 80014d4:	601a      	str	r2, [r3, #0]
		count1 = 0;
 80014d6:	4b3e      	ldr	r3, [pc, #248]	; (80015d0 <light_traffic_run+0x224>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
	}
	if (count1 == time_yellow && led_status_north_south == YELLOW_AUTO) {
 80014dc:	4b3c      	ldr	r3, [pc, #240]	; (80015d0 <light_traffic_run+0x224>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68ba      	ldr	r2, [r7, #8]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d109      	bne.n	80014fa <light_traffic_run+0x14e>
 80014e6:	4b39      	ldr	r3, [pc, #228]	; (80015cc <light_traffic_run+0x220>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b07      	cmp	r3, #7
 80014ec:	d105      	bne.n	80014fa <light_traffic_run+0x14e>
		led_status_north_south = RED_AUTO;
 80014ee:	4b37      	ldr	r3, [pc, #220]	; (80015cc <light_traffic_run+0x220>)
 80014f0:	2205      	movs	r2, #5
 80014f2:	601a      	str	r2, [r3, #0]
		count1 = 0;
 80014f4:	4b36      	ldr	r3, [pc, #216]	; (80015d0 <light_traffic_run+0x224>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
	}
	if (count1 == time_red && led_status_north_south == RED_AUTO) {
 80014fa:	4b35      	ldr	r3, [pc, #212]	; (80015d0 <light_traffic_run+0x224>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	429a      	cmp	r2, r3
 8001502:	d109      	bne.n	8001518 <light_traffic_run+0x16c>
 8001504:	4b31      	ldr	r3, [pc, #196]	; (80015cc <light_traffic_run+0x220>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b05      	cmp	r3, #5
 800150a:	d105      	bne.n	8001518 <light_traffic_run+0x16c>
		led_status_north_south = GREEN_AUTO;
 800150c:	4b2f      	ldr	r3, [pc, #188]	; (80015cc <light_traffic_run+0x220>)
 800150e:	2206      	movs	r2, #6
 8001510:	601a      	str	r2, [r3, #0]
		count1 = 0;
 8001512:	4b2f      	ldr	r3, [pc, #188]	; (80015d0 <light_traffic_run+0x224>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
	}
	// dieu khien chuyen tin hieu he thong  den 2 ( led 7 doan o duoi)
	if (led_status_east_west == RED_AUTO) {
 8001518:	4b2e      	ldr	r3, [pc, #184]	; (80015d4 <light_traffic_run+0x228>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b05      	cmp	r3, #5
 800151e:	d106      	bne.n	800152e <light_traffic_run+0x182>
		setLedRed();
 8001520:	f7ff fd34 	bl	8000f8c <setLedRed>
		count++;
 8001524:	4b2c      	ldr	r3, [pc, #176]	; (80015d8 <light_traffic_run+0x22c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	4a2b      	ldr	r2, [pc, #172]	; (80015d8 <light_traffic_run+0x22c>)
 800152c:	6013      	str	r3, [r2, #0]
	}
	if (led_status_east_west == YELLOW_AUTO) {
 800152e:	4b29      	ldr	r3, [pc, #164]	; (80015d4 <light_traffic_run+0x228>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b07      	cmp	r3, #7
 8001534:	d106      	bne.n	8001544 <light_traffic_run+0x198>
		setLedYellow();
 8001536:	f7ff fd55 	bl	8000fe4 <setLedYellow>
		count++;
 800153a:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <light_traffic_run+0x22c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	3301      	adds	r3, #1
 8001540:	4a25      	ldr	r2, [pc, #148]	; (80015d8 <light_traffic_run+0x22c>)
 8001542:	6013      	str	r3, [r2, #0]
	}
	if (led_status_east_west == GREEN_AUTO) {
 8001544:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <light_traffic_run+0x228>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b06      	cmp	r3, #6
 800154a:	d106      	bne.n	800155a <light_traffic_run+0x1ae>
		setLedGreen();
 800154c:	f7ff fd34 	bl	8000fb8 <setLedGreen>
		count++;
 8001550:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <light_traffic_run+0x22c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	3301      	adds	r3, #1
 8001556:	4a20      	ldr	r2, [pc, #128]	; (80015d8 <light_traffic_run+0x22c>)
 8001558:	6013      	str	r3, [r2, #0]
	}
	if (count == time_red && led_status_east_west == RED_AUTO) {
 800155a:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <light_traffic_run+0x22c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	429a      	cmp	r2, r3
 8001562:	d109      	bne.n	8001578 <light_traffic_run+0x1cc>
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <light_traffic_run+0x228>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b05      	cmp	r3, #5
 800156a:	d105      	bne.n	8001578 <light_traffic_run+0x1cc>
		led_status_east_west = GREEN_AUTO;
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <light_traffic_run+0x228>)
 800156e:	2206      	movs	r2, #6
 8001570:	601a      	str	r2, [r3, #0]
		count = 0;
 8001572:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <light_traffic_run+0x22c>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
	}
	if (count == time_green && led_status_east_west == GREEN_AUTO) {
 8001578:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <light_traffic_run+0x22c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	429a      	cmp	r2, r3
 8001580:	d109      	bne.n	8001596 <light_traffic_run+0x1ea>
 8001582:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <light_traffic_run+0x228>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b06      	cmp	r3, #6
 8001588:	d105      	bne.n	8001596 <light_traffic_run+0x1ea>
		led_status_east_west = YELLOW_AUTO;
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <light_traffic_run+0x228>)
 800158c:	2207      	movs	r2, #7
 800158e:	601a      	str	r2, [r3, #0]
		count = 0;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <light_traffic_run+0x22c>)
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
	}
	if (count == time_yellow && led_status_east_west == YELLOW_AUTO) {
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <light_traffic_run+0x22c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	429a      	cmp	r2, r3
 800159e:	d109      	bne.n	80015b4 <light_traffic_run+0x208>
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <light_traffic_run+0x228>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b07      	cmp	r3, #7
 80015a6:	d105      	bne.n	80015b4 <light_traffic_run+0x208>
		led_status_east_west = RED_AUTO;
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <light_traffic_run+0x228>)
 80015aa:	2205      	movs	r2, #5
 80015ac:	601a      	str	r2, [r3, #0]
		count = 0;
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <light_traffic_run+0x22c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
	}

}
 80015b4:	bf00      	nop
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200000d4 	.word	0x200000d4
 80015c0:	200000c8 	.word	0x200000c8
 80015c4:	200000cc 	.word	0x200000cc
 80015c8:	200000d8 	.word	0x200000d8
 80015cc:	200000c4 	.word	0x200000c4
 80015d0:	200000b8 	.word	0x200000b8
 80015d4:	200000d0 	.word	0x200000d0
 80015d8:	200000b4 	.word	0x200000b4

080015dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015e0:	f000 f9f4 	bl	80019cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015e4:	f000 f812 	bl	800160c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e8:	f000 f898 	bl	800171c <MX_GPIO_Init>
  MX_TIM2_Init();
 80015ec:	f000 f84a 	bl	8001684 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 80015f0:	4805      	ldr	r0, [pc, #20]	; (8001608 <main+0x2c>)
 80015f2:	f001 f949 	bl	8002888 <HAL_TIM_Base_Start_IT>
//HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,GPIO_PIN_SET);
//HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,GPIO_PIN_SET);
//updateClockBuffer(3, 5);
  while (1)
  {
	  fsm_automatic_run();
 80015f6:	f7ff f99b 	bl	8000930 <fsm_automatic_run>
      fsm_manual_run();
 80015fa:	f7ff fa55 	bl	8000aa8 <fsm_manual_run>
      fsm_setting_run();
 80015fe:	f7ff fb8d 	bl	8000d1c <fsm_setting_run>
      fsm_save_value_run();
 8001602:	f7ff fb3d 	bl	8000c80 <fsm_save_value_run>
	  fsm_automatic_run();
 8001606:	e7f6      	b.n	80015f6 <main+0x1a>
 8001608:	200000dc 	.word	0x200000dc

0800160c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b090      	sub	sp, #64	; 0x40
 8001610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001612:	f107 0318 	add.w	r3, r7, #24
 8001616:	2228      	movs	r2, #40	; 0x28
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f001 fce4 	bl	8002fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
 800162c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800162e:	2302      	movs	r3, #2
 8001630:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001632:	2301      	movs	r3, #1
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001636:	2310      	movs	r3, #16
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800163a:	2300      	movs	r3, #0
 800163c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800163e:	f107 0318 	add.w	r3, r7, #24
 8001642:	4618      	mov	r0, r3
 8001644:	f000 fcf4 	bl	8002030 <HAL_RCC_OscConfig>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800164e:	f000 f8d5 	bl	80017fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001652:	230f      	movs	r3, #15
 8001654:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f000 ff60 	bl	8002530 <HAL_RCC_ClockConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001676:	f000 f8c1 	bl	80017fc <Error_Handler>
  }
}
 800167a:	bf00      	nop
 800167c:	3740      	adds	r7, #64	; 0x40
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800168a:	f107 0308 	add.w	r3, r7, #8
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001698:	463b      	mov	r3, r7
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016a0:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <MX_TIM2_Init+0x94>)
 80016a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80016a8:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <MX_TIM2_Init+0x94>)
 80016aa:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80016ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b0:	4b19      	ldr	r3, [pc, #100]	; (8001718 <MX_TIM2_Init+0x94>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80016b6:	4b18      	ldr	r3, [pc, #96]	; (8001718 <MX_TIM2_Init+0x94>)
 80016b8:	2209      	movs	r2, #9
 80016ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <MX_TIM2_Init+0x94>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <MX_TIM2_Init+0x94>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016c8:	4813      	ldr	r0, [pc, #76]	; (8001718 <MX_TIM2_Init+0x94>)
 80016ca:	f001 f88d 	bl	80027e8 <HAL_TIM_Base_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016d4:	f000 f892 	bl	80017fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016de:	f107 0308 	add.w	r3, r7, #8
 80016e2:	4619      	mov	r1, r3
 80016e4:	480c      	ldr	r0, [pc, #48]	; (8001718 <MX_TIM2_Init+0x94>)
 80016e6:	f001 fa0b 	bl	8002b00 <HAL_TIM_ConfigClockSource>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016f0:	f000 f884 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f4:	2300      	movs	r3, #0
 80016f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016fc:	463b      	mov	r3, r7
 80016fe:	4619      	mov	r1, r3
 8001700:	4805      	ldr	r0, [pc, #20]	; (8001718 <MX_TIM2_Init+0x94>)
 8001702:	f001 fbe3 	bl	8002ecc <HAL_TIMEx_MasterConfigSynchronization>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800170c:	f000 f876 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001710:	bf00      	nop
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	200000dc 	.word	0x200000dc

0800171c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001722:	f107 0308 	add.w	r3, r7, #8
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001730:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <MX_GPIO_Init+0xbc>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a28      	ldr	r2, [pc, #160]	; (80017d8 <MX_GPIO_Init+0xbc>)
 8001736:	f043 0304 	orr.w	r3, r3, #4
 800173a:	6193      	str	r3, [r2, #24]
 800173c:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <MX_GPIO_Init+0xbc>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001748:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <MX_GPIO_Init+0xbc>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	4a22      	ldr	r2, [pc, #136]	; (80017d8 <MX_GPIO_Init+0xbc>)
 800174e:	f043 0308 	orr.w	r3, r3, #8
 8001752:	6193      	str	r3, [r2, #24]
 8001754:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <MX_GPIO_Init+0xbc>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	603b      	str	r3, [r7, #0]
 800175e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED_Pin
 8001760:	2200      	movs	r2, #0
 8001762:	f647 01fc 	movw	r1, #30972	; 0x78fc
 8001766:	481d      	ldr	r0, [pc, #116]	; (80017dc <MX_GPIO_Init+0xc0>)
 8001768:	f000 fc31 	bl	8001fce <HAL_GPIO_WritePin>
                          |LED_YELLOW_Pin|LED_GREEN_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D1_Pin
 800176c:	2200      	movs	r2, #0
 800176e:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001772:	481b      	ldr	r0, [pc, #108]	; (80017e0 <MX_GPIO_Init+0xc4>)
 8001774:	f000 fc2b 	bl	8001fce <HAL_GPIO_WritePin>
                          |SEG_B1_Pin|SEG_C1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED_Pin
                           LED_YELLOW_Pin LED_GREEN_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED_Pin
 8001778:	f647 03fc 	movw	r3, #30972	; 0x78fc
 800177c:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_Pin|LED_GREEN_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177e:	2301      	movs	r3, #1
 8001780:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2302      	movs	r3, #2
 8001788:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	f107 0308 	add.w	r3, r7, #8
 800178e:	4619      	mov	r1, r3
 8001790:	4812      	ldr	r0, [pc, #72]	; (80017dc <MX_GPIO_Init+0xc0>)
 8001792:	f000 fa8b 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_A_Pin SEG_B_Pin SEG_C_Pin SEG_D1_Pin
                           SEG_E1_Pin SEG_F1_Pin SEG_G1_Pin SEG_D_Pin
                           SEG_E_Pin SEG_F_Pin SEG_G_Pin SEG_A1_Pin
                           SEG_B1_Pin SEG_C1_Pin */
  GPIO_InitStruct.Pin = SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D1_Pin
 8001796:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800179a:	60bb      	str	r3, [r7, #8]
                          |SEG_E1_Pin|SEG_F1_Pin|SEG_G1_Pin|SEG_D_Pin
                          |SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|SEG_A1_Pin
                          |SEG_B1_Pin|SEG_C1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179c:	2301      	movs	r3, #1
 800179e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2302      	movs	r3, #2
 80017a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a8:	f107 0308 	add.w	r3, r7, #8
 80017ac:	4619      	mov	r1, r3
 80017ae:	480c      	ldr	r0, [pc, #48]	; (80017e0 <MX_GPIO_Init+0xc4>)
 80017b0:	f000 fa7c 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 80017b4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80017b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017be:	2301      	movs	r3, #1
 80017c0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f107 0308 	add.w	r3, r7, #8
 80017c6:	4619      	mov	r1, r3
 80017c8:	4804      	ldr	r0, [pc, #16]	; (80017dc <MX_GPIO_Init+0xc0>)
 80017ca:	f000 fa6f 	bl	8001cac <HAL_GPIO_Init>

}
 80017ce:	bf00      	nop
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40010800 	.word	0x40010800
 80017e0:	40010c00 	.word	0x40010c00

080017e4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	timerRun();
 80017ec:	f000 f8ae 	bl	800194c <timerRun>
	getKeyInput();
 80017f0:	f7fe ffa2 	bl	8000738 <getKeyInput>
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001800:	b672      	cpsid	i
}
 8001802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001804:	e7fe      	b.n	8001804 <Error_Handler+0x8>
	...

08001808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_MspInit+0x5c>)
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	4a14      	ldr	r2, [pc, #80]	; (8001864 <HAL_MspInit+0x5c>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6193      	str	r3, [r2, #24]
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_MspInit+0x5c>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <HAL_MspInit+0x5c>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	4a0e      	ldr	r2, [pc, #56]	; (8001864 <HAL_MspInit+0x5c>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001830:	61d3      	str	r3, [r2, #28]
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <HAL_MspInit+0x5c>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800183e:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <HAL_MspInit+0x60>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	4a04      	ldr	r2, [pc, #16]	; (8001868 <HAL_MspInit+0x60>)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	40021000 	.word	0x40021000
 8001868:	40010000 	.word	0x40010000

0800186c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800187c:	d113      	bne.n	80018a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_TIM_Base_MspInit+0x44>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	4a0b      	ldr	r2, [pc, #44]	; (80018b0 <HAL_TIM_Base_MspInit+0x44>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	61d3      	str	r3, [r2, #28]
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_TIM_Base_MspInit+0x44>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2100      	movs	r1, #0
 800189a:	201c      	movs	r0, #28
 800189c:	f000 f9cf 	bl	8001c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018a0:	201c      	movs	r0, #28
 80018a2:	f000 f9e8 	bl	8001c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000

080018b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <NMI_Handler+0x4>

080018ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018be:	e7fe      	b.n	80018be <HardFault_Handler+0x4>

080018c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <MemManage_Handler+0x4>

080018c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <BusFault_Handler+0x4>

080018cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <UsageFault_Handler+0x4>

080018d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr

080018de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr

080018ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr

080018f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018fa:	f000 f8ad 	bl	8001a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <TIM2_IRQHandler+0x10>)
 800190a:	f001 f809 	bl	8002920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200000dc 	.word	0x200000dc

08001918 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <setTimer1>:
 */

#include "timer.h"
int timer1_counter = 0;
int timer1_flag = 0;
void setTimer1( int duration ){
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 800192c:	4a05      	ldr	r2, [pc, #20]	; (8001944 <setTimer1+0x20>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <setTimer1+0x24>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	200000bc 	.word	0x200000bc
 8001948:	200000c0 	.word	0x200000c0

0800194c <timerRun>:
void timerRun(){
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <timerRun+0x2c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	dd0b      	ble.n	8001970 <timerRun+0x24>
		timer1_counter --;
 8001958:	4b07      	ldr	r3, [pc, #28]	; (8001978 <timerRun+0x2c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	3b01      	subs	r3, #1
 800195e:	4a06      	ldr	r2, [pc, #24]	; (8001978 <timerRun+0x2c>)
 8001960:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <timerRun+0x2c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	dc02      	bgt.n	8001970 <timerRun+0x24>
			timer1_flag = 1;
 800196a:	4b04      	ldr	r3, [pc, #16]	; (800197c <timerRun+0x30>)
 800196c:	2201      	movs	r2, #1
 800196e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	200000bc 	.word	0x200000bc
 800197c:	200000c0 	.word	0x200000c0

08001980 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001980:	f7ff ffca 	bl	8001918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001984:	480b      	ldr	r0, [pc, #44]	; (80019b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001986:	490c      	ldr	r1, [pc, #48]	; (80019b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001988:	4a0c      	ldr	r2, [pc, #48]	; (80019bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800198c:	e002      	b.n	8001994 <LoopCopyDataInit>

0800198e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001992:	3304      	adds	r3, #4

08001994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001998:	d3f9      	bcc.n	800198e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199a:	4a09      	ldr	r2, [pc, #36]	; (80019c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800199c:	4c09      	ldr	r4, [pc, #36]	; (80019c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a0:	e001      	b.n	80019a6 <LoopFillZerobss>

080019a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a4:	3204      	adds	r2, #4

080019a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a8:	d3fb      	bcc.n	80019a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019aa:	f001 faf9 	bl	8002fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ae:	f7ff fe15 	bl	80015dc <main>
  bx lr
 80019b2:	4770      	bx	lr
  ldr r0, =_sdata
 80019b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b8:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80019bc:	0800303c 	.word	0x0800303c
  ldr r2, =_sbss
 80019c0:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80019c4:	20000128 	.word	0x20000128

080019c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019c8:	e7fe      	b.n	80019c8 <ADC1_2_IRQHandler>
	...

080019cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <HAL_Init+0x28>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a07      	ldr	r2, [pc, #28]	; (80019f4 <HAL_Init+0x28>)
 80019d6:	f043 0310 	orr.w	r3, r3, #16
 80019da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019dc:	2003      	movs	r0, #3
 80019de:	f000 f923 	bl	8001c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e2:	200f      	movs	r0, #15
 80019e4:	f000 f808 	bl	80019f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019e8:	f7ff ff0e 	bl	8001808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40022000 	.word	0x40022000

080019f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <HAL_InitTick+0x54>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_InitTick+0x58>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 f93b 	bl	8001c92 <HAL_SYSTICK_Config>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00e      	b.n	8001a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b0f      	cmp	r3, #15
 8001a2a:	d80a      	bhi.n	8001a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	f000 f903 	bl	8001c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a38:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <HAL_InitTick+0x5c>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e000      	b.n	8001a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000044 	.word	0x20000044
 8001a50:	2000004c 	.word	0x2000004c
 8001a54:	20000048 	.word	0x20000048

08001a58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_IncTick+0x1c>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_IncTick+0x20>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	4a03      	ldr	r2, [pc, #12]	; (8001a78 <HAL_IncTick+0x20>)
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	2000004c 	.word	0x2000004c
 8001a78:	20000124 	.word	0x20000124

08001a7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a80:	4b02      	ldr	r3, [pc, #8]	; (8001a8c <HAL_GetTick+0x10>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	20000124 	.word	0x20000124

08001a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aac:	4013      	ands	r3, r2
 8001aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac2:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	60d3      	str	r3, [r2, #12]
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	0a1b      	lsrs	r3, r3, #8
 8001ae2:	f003 0307 	and.w	r3, r3, #7
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	db0b      	blt.n	8001b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	f003 021f 	and.w	r2, r3, #31
 8001b0c:	4906      	ldr	r1, [pc, #24]	; (8001b28 <__NVIC_EnableIRQ+0x34>)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	095b      	lsrs	r3, r3, #5
 8001b14:	2001      	movs	r0, #1
 8001b16:	fa00 f202 	lsl.w	r2, r0, r2
 8001b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	e000e100 	.word	0xe000e100

08001b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	6039      	str	r1, [r7, #0]
 8001b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	db0a      	blt.n	8001b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	490c      	ldr	r1, [pc, #48]	; (8001b78 <__NVIC_SetPriority+0x4c>)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	0112      	lsls	r2, r2, #4
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	440b      	add	r3, r1
 8001b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b54:	e00a      	b.n	8001b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4908      	ldr	r1, [pc, #32]	; (8001b7c <__NVIC_SetPriority+0x50>)
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	3b04      	subs	r3, #4
 8001b64:	0112      	lsls	r2, r2, #4
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	440b      	add	r3, r1
 8001b6a:	761a      	strb	r2, [r3, #24]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000e100 	.word	0xe000e100
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	; 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f1c3 0307 	rsb	r3, r3, #7
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	bf28      	it	cs
 8001b9e:	2304      	movcs	r3, #4
 8001ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	2b06      	cmp	r3, #6
 8001ba8:	d902      	bls.n	8001bb0 <NVIC_EncodePriority+0x30>
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3b03      	subs	r3, #3
 8001bae:	e000      	b.n	8001bb2 <NVIC_EncodePriority+0x32>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd2:	43d9      	mvns	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd8:	4313      	orrs	r3, r2
         );
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3724      	adds	r7, #36	; 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr

08001be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf4:	d301      	bcc.n	8001bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00f      	b.n	8001c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <SysTick_Config+0x40>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c02:	210f      	movs	r1, #15
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	f7ff ff90 	bl	8001b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <SysTick_Config+0x40>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c12:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <SysTick_Config+0x40>)
 8001c14:	2207      	movs	r2, #7
 8001c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	e000e010 	.word	0xe000e010

08001c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ff2d 	bl	8001a90 <__NVIC_SetPriorityGrouping>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c50:	f7ff ff42 	bl	8001ad8 <__NVIC_GetPriorityGrouping>
 8001c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	6978      	ldr	r0, [r7, #20]
 8001c5c:	f7ff ff90 	bl	8001b80 <NVIC_EncodePriority>
 8001c60:	4602      	mov	r2, r0
 8001c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff5f 	bl	8001b2c <__NVIC_SetPriority>
}
 8001c6e:	bf00      	nop
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff35 	bl	8001af4 <__NVIC_EnableIRQ>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ffa2 	bl	8001be4 <SysTick_Config>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b08b      	sub	sp, #44	; 0x2c
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cbe:	e148      	b.n	8001f52 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	f040 8137 	bne.w	8001f4c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	4aa3      	ldr	r2, [pc, #652]	; (8001f70 <HAL_GPIO_Init+0x2c4>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d05e      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001ce8:	4aa1      	ldr	r2, [pc, #644]	; (8001f70 <HAL_GPIO_Init+0x2c4>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d875      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001cee:	4aa1      	ldr	r2, [pc, #644]	; (8001f74 <HAL_GPIO_Init+0x2c8>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d058      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001cf4:	4a9f      	ldr	r2, [pc, #636]	; (8001f74 <HAL_GPIO_Init+0x2c8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d86f      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001cfa:	4a9f      	ldr	r2, [pc, #636]	; (8001f78 <HAL_GPIO_Init+0x2cc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d052      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001d00:	4a9d      	ldr	r2, [pc, #628]	; (8001f78 <HAL_GPIO_Init+0x2cc>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d869      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d06:	4a9d      	ldr	r2, [pc, #628]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d04c      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001d0c:	4a9b      	ldr	r2, [pc, #620]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d863      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d12:	4a9b      	ldr	r2, [pc, #620]	; (8001f80 <HAL_GPIO_Init+0x2d4>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d046      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001d18:	4a99      	ldr	r2, [pc, #612]	; (8001f80 <HAL_GPIO_Init+0x2d4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d85d      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d1e:	2b12      	cmp	r3, #18
 8001d20:	d82a      	bhi.n	8001d78 <HAL_GPIO_Init+0xcc>
 8001d22:	2b12      	cmp	r3, #18
 8001d24:	d859      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d26:	a201      	add	r2, pc, #4	; (adr r2, 8001d2c <HAL_GPIO_Init+0x80>)
 8001d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2c:	08001da7 	.word	0x08001da7
 8001d30:	08001d81 	.word	0x08001d81
 8001d34:	08001d93 	.word	0x08001d93
 8001d38:	08001dd5 	.word	0x08001dd5
 8001d3c:	08001ddb 	.word	0x08001ddb
 8001d40:	08001ddb 	.word	0x08001ddb
 8001d44:	08001ddb 	.word	0x08001ddb
 8001d48:	08001ddb 	.word	0x08001ddb
 8001d4c:	08001ddb 	.word	0x08001ddb
 8001d50:	08001ddb 	.word	0x08001ddb
 8001d54:	08001ddb 	.word	0x08001ddb
 8001d58:	08001ddb 	.word	0x08001ddb
 8001d5c:	08001ddb 	.word	0x08001ddb
 8001d60:	08001ddb 	.word	0x08001ddb
 8001d64:	08001ddb 	.word	0x08001ddb
 8001d68:	08001ddb 	.word	0x08001ddb
 8001d6c:	08001ddb 	.word	0x08001ddb
 8001d70:	08001d89 	.word	0x08001d89
 8001d74:	08001d9d 	.word	0x08001d9d
 8001d78:	4a82      	ldr	r2, [pc, #520]	; (8001f84 <HAL_GPIO_Init+0x2d8>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d013      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d7e:	e02c      	b.n	8001dda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	623b      	str	r3, [r7, #32]
          break;
 8001d86:	e029      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	623b      	str	r3, [r7, #32]
          break;
 8001d90:	e024      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	3308      	adds	r3, #8
 8001d98:	623b      	str	r3, [r7, #32]
          break;
 8001d9a:	e01f      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	330c      	adds	r3, #12
 8001da2:	623b      	str	r3, [r7, #32]
          break;
 8001da4:	e01a      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d102      	bne.n	8001db4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dae:	2304      	movs	r3, #4
 8001db0:	623b      	str	r3, [r7, #32]
          break;
 8001db2:	e013      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d105      	bne.n	8001dc8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dbc:	2308      	movs	r3, #8
 8001dbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69fa      	ldr	r2, [r7, #28]
 8001dc4:	611a      	str	r2, [r3, #16]
          break;
 8001dc6:	e009      	b.n	8001ddc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dc8:	2308      	movs	r3, #8
 8001dca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	615a      	str	r2, [r3, #20]
          break;
 8001dd2:	e003      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	623b      	str	r3, [r7, #32]
          break;
 8001dd8:	e000      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          break;
 8001dda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2bff      	cmp	r3, #255	; 0xff
 8001de0:	d801      	bhi.n	8001de6 <HAL_GPIO_Init+0x13a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	e001      	b.n	8001dea <HAL_GPIO_Init+0x13e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3304      	adds	r3, #4
 8001dea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	2bff      	cmp	r3, #255	; 0xff
 8001df0:	d802      	bhi.n	8001df8 <HAL_GPIO_Init+0x14c>
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	e002      	b.n	8001dfe <HAL_GPIO_Init+0x152>
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	3b08      	subs	r3, #8
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	210f      	movs	r1, #15
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	401a      	ands	r2, r3
 8001e10:	6a39      	ldr	r1, [r7, #32]
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	fa01 f303 	lsl.w	r3, r1, r3
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 8090 	beq.w	8001f4c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e2c:	4b56      	ldr	r3, [pc, #344]	; (8001f88 <HAL_GPIO_Init+0x2dc>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4a55      	ldr	r2, [pc, #340]	; (8001f88 <HAL_GPIO_Init+0x2dc>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	6193      	str	r3, [r2, #24]
 8001e38:	4b53      	ldr	r3, [pc, #332]	; (8001f88 <HAL_GPIO_Init+0x2dc>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e44:	4a51      	ldr	r2, [pc, #324]	; (8001f8c <HAL_GPIO_Init+0x2e0>)
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4013      	ands	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a49      	ldr	r2, [pc, #292]	; (8001f90 <HAL_GPIO_Init+0x2e4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d00d      	beq.n	8001e8c <HAL_GPIO_Init+0x1e0>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a48      	ldr	r2, [pc, #288]	; (8001f94 <HAL_GPIO_Init+0x2e8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d007      	beq.n	8001e88 <HAL_GPIO_Init+0x1dc>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a47      	ldr	r2, [pc, #284]	; (8001f98 <HAL_GPIO_Init+0x2ec>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d101      	bne.n	8001e84 <HAL_GPIO_Init+0x1d8>
 8001e80:	2302      	movs	r3, #2
 8001e82:	e004      	b.n	8001e8e <HAL_GPIO_Init+0x1e2>
 8001e84:	2303      	movs	r3, #3
 8001e86:	e002      	b.n	8001e8e <HAL_GPIO_Init+0x1e2>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <HAL_GPIO_Init+0x1e2>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e90:	f002 0203 	and.w	r2, r2, #3
 8001e94:	0092      	lsls	r2, r2, #2
 8001e96:	4093      	lsls	r3, r2
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e9e:	493b      	ldr	r1, [pc, #236]	; (8001f8c <HAL_GPIO_Init+0x2e0>)
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d006      	beq.n	8001ec6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001eb8:	4b38      	ldr	r3, [pc, #224]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	4937      	ldr	r1, [pc, #220]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	608b      	str	r3, [r1, #8]
 8001ec4:	e006      	b.n	8001ed4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ec6:	4b35      	ldr	r3, [pc, #212]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	4933      	ldr	r1, [pc, #204]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d006      	beq.n	8001eee <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ee0:	4b2e      	ldr	r3, [pc, #184]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	492d      	ldr	r1, [pc, #180]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	60cb      	str	r3, [r1, #12]
 8001eec:	e006      	b.n	8001efc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001eee:	4b2b      	ldr	r3, [pc, #172]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	4929      	ldr	r1, [pc, #164]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d006      	beq.n	8001f16 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f08:	4b24      	ldr	r3, [pc, #144]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	4923      	ldr	r1, [pc, #140]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	604b      	str	r3, [r1, #4]
 8001f14:	e006      	b.n	8001f24 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f16:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	491f      	ldr	r1, [pc, #124]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d006      	beq.n	8001f3e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4919      	ldr	r1, [pc, #100]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	600b      	str	r3, [r1, #0]
 8001f3c:	e006      	b.n	8001f4c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	4915      	ldr	r1, [pc, #84]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	3301      	adds	r3, #1
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f47f aeaf 	bne.w	8001cc0 <HAL_GPIO_Init+0x14>
  }
}
 8001f62:	bf00      	nop
 8001f64:	bf00      	nop
 8001f66:	372c      	adds	r7, #44	; 0x2c
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	10320000 	.word	0x10320000
 8001f74:	10310000 	.word	0x10310000
 8001f78:	10220000 	.word	0x10220000
 8001f7c:	10210000 	.word	0x10210000
 8001f80:	10120000 	.word	0x10120000
 8001f84:	10110000 	.word	0x10110000
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40010000 	.word	0x40010000
 8001f90:	40010800 	.word	0x40010800
 8001f94:	40010c00 	.word	0x40010c00
 8001f98:	40011000 	.word	0x40011000
 8001f9c:	40010400 	.word	0x40010400

08001fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	887b      	ldrh	r3, [r7, #2]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	73fb      	strb	r3, [r7, #15]
 8001fbc:	e001      	b.n	8001fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr

08001fce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	807b      	strh	r3, [r7, #2]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fde:	787b      	ldrb	r3, [r7, #1]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fe4:	887a      	ldrh	r2, [r7, #2]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fea:	e003      	b.n	8001ff4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fec:	887b      	ldrh	r3, [r7, #2]
 8001fee:	041a      	lsls	r2, r3, #16
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	611a      	str	r2, [r3, #16]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr

08001ffe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b085      	sub	sp, #20
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	460b      	mov	r3, r1
 8002008:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002010:	887a      	ldrh	r2, [r7, #2]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4013      	ands	r3, r2
 8002016:	041a      	lsls	r2, r3, #16
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	43d9      	mvns	r1, r3
 800201c:	887b      	ldrh	r3, [r7, #2]
 800201e:	400b      	ands	r3, r1
 8002020:	431a      	orrs	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	611a      	str	r2, [r3, #16]
}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e26c      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8087 	beq.w	800215e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002050:	4b92      	ldr	r3, [pc, #584]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b04      	cmp	r3, #4
 800205a:	d00c      	beq.n	8002076 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800205c:	4b8f      	ldr	r3, [pc, #572]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b08      	cmp	r3, #8
 8002066:	d112      	bne.n	800208e <HAL_RCC_OscConfig+0x5e>
 8002068:	4b8c      	ldr	r3, [pc, #560]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002074:	d10b      	bne.n	800208e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002076:	4b89      	ldr	r3, [pc, #548]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d06c      	beq.n	800215c <HAL_RCC_OscConfig+0x12c>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d168      	bne.n	800215c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e246      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002096:	d106      	bne.n	80020a6 <HAL_RCC_OscConfig+0x76>
 8002098:	4b80      	ldr	r3, [pc, #512]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a7f      	ldr	r2, [pc, #508]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 800209e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	e02e      	b.n	8002104 <HAL_RCC_OscConfig+0xd4>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x98>
 80020ae:	4b7b      	ldr	r3, [pc, #492]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a7a      	ldr	r2, [pc, #488]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	4b78      	ldr	r3, [pc, #480]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a77      	ldr	r2, [pc, #476]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	e01d      	b.n	8002104 <HAL_RCC_OscConfig+0xd4>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020d0:	d10c      	bne.n	80020ec <HAL_RCC_OscConfig+0xbc>
 80020d2:	4b72      	ldr	r3, [pc, #456]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a71      	ldr	r2, [pc, #452]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	4b6f      	ldr	r3, [pc, #444]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a6e      	ldr	r2, [pc, #440]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	e00b      	b.n	8002104 <HAL_RCC_OscConfig+0xd4>
 80020ec:	4b6b      	ldr	r3, [pc, #428]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a6a      	ldr	r2, [pc, #424]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	4b68      	ldr	r3, [pc, #416]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a67      	ldr	r2, [pc, #412]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002102:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d013      	beq.n	8002134 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7ff fcb6 	bl	8001a7c <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002114:	f7ff fcb2 	bl	8001a7c <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e1fa      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002126:	4b5d      	ldr	r3, [pc, #372]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f0      	beq.n	8002114 <HAL_RCC_OscConfig+0xe4>
 8002132:	e014      	b.n	800215e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7ff fca2 	bl	8001a7c <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800213c:	f7ff fc9e 	bl	8001a7c <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b64      	cmp	r3, #100	; 0x64
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e1e6      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214e:	4b53      	ldr	r3, [pc, #332]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x10c>
 800215a:	e000      	b.n	800215e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d063      	beq.n	8002232 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800216a:	4b4c      	ldr	r3, [pc, #304]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00b      	beq.n	800218e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002176:	4b49      	ldr	r3, [pc, #292]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b08      	cmp	r3, #8
 8002180:	d11c      	bne.n	80021bc <HAL_RCC_OscConfig+0x18c>
 8002182:	4b46      	ldr	r3, [pc, #280]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d116      	bne.n	80021bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218e:	4b43      	ldr	r3, [pc, #268]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <HAL_RCC_OscConfig+0x176>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d001      	beq.n	80021a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e1ba      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a6:	4b3d      	ldr	r3, [pc, #244]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4939      	ldr	r1, [pc, #228]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ba:	e03a      	b.n	8002232 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d020      	beq.n	8002206 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c4:	4b36      	ldr	r3, [pc, #216]	; (80022a0 <HAL_RCC_OscConfig+0x270>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ca:	f7ff fc57 	bl	8001a7c <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d2:	f7ff fc53 	bl	8001a7c <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e19b      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e4:	4b2d      	ldr	r3, [pc, #180]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f0:	4b2a      	ldr	r3, [pc, #168]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	4927      	ldr	r1, [pc, #156]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002200:	4313      	orrs	r3, r2
 8002202:	600b      	str	r3, [r1, #0]
 8002204:	e015      	b.n	8002232 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002206:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <HAL_RCC_OscConfig+0x270>)
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7ff fc36 	bl	8001a7c <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002214:	f7ff fc32 	bl	8001a7c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e17a      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002226:	4b1d      	ldr	r3, [pc, #116]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d03a      	beq.n	80022b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d019      	beq.n	800227a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002246:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <HAL_RCC_OscConfig+0x274>)
 8002248:	2201      	movs	r2, #1
 800224a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224c:	f7ff fc16 	bl	8001a7c <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002254:	f7ff fc12 	bl	8001a7c <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e15a      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002266:	4b0d      	ldr	r3, [pc, #52]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002272:	2001      	movs	r0, #1
 8002274:	f000 fa9a 	bl	80027ac <RCC_Delay>
 8002278:	e01c      	b.n	80022b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800227a:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <HAL_RCC_OscConfig+0x274>)
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002280:	f7ff fbfc 	bl	8001a7c <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002286:	e00f      	b.n	80022a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002288:	f7ff fbf8 	bl	8001a7c <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d908      	bls.n	80022a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e140      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000
 80022a0:	42420000 	.word	0x42420000
 80022a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a8:	4b9e      	ldr	r3, [pc, #632]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1e9      	bne.n	8002288 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 80a6 	beq.w	800240e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c2:	2300      	movs	r3, #0
 80022c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c6:	4b97      	ldr	r3, [pc, #604]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10d      	bne.n	80022ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d2:	4b94      	ldr	r3, [pc, #592]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	4a93      	ldr	r2, [pc, #588]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80022d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022dc:	61d3      	str	r3, [r2, #28]
 80022de:	4b91      	ldr	r3, [pc, #580]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ea:	2301      	movs	r3, #1
 80022ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ee:	4b8e      	ldr	r3, [pc, #568]	; (8002528 <HAL_RCC_OscConfig+0x4f8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d118      	bne.n	800232c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022fa:	4b8b      	ldr	r3, [pc, #556]	; (8002528 <HAL_RCC_OscConfig+0x4f8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a8a      	ldr	r2, [pc, #552]	; (8002528 <HAL_RCC_OscConfig+0x4f8>)
 8002300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002306:	f7ff fbb9 	bl	8001a7c <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230e:	f7ff fbb5 	bl	8001a7c <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b64      	cmp	r3, #100	; 0x64
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e0fd      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002320:	4b81      	ldr	r3, [pc, #516]	; (8002528 <HAL_RCC_OscConfig+0x4f8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d106      	bne.n	8002342 <HAL_RCC_OscConfig+0x312>
 8002334:	4b7b      	ldr	r3, [pc, #492]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	4a7a      	ldr	r2, [pc, #488]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	6213      	str	r3, [r2, #32]
 8002340:	e02d      	b.n	800239e <HAL_RCC_OscConfig+0x36e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10c      	bne.n	8002364 <HAL_RCC_OscConfig+0x334>
 800234a:	4b76      	ldr	r3, [pc, #472]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	4a75      	ldr	r2, [pc, #468]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002350:	f023 0301 	bic.w	r3, r3, #1
 8002354:	6213      	str	r3, [r2, #32]
 8002356:	4b73      	ldr	r3, [pc, #460]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	4a72      	ldr	r2, [pc, #456]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800235c:	f023 0304 	bic.w	r3, r3, #4
 8002360:	6213      	str	r3, [r2, #32]
 8002362:	e01c      	b.n	800239e <HAL_RCC_OscConfig+0x36e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2b05      	cmp	r3, #5
 800236a:	d10c      	bne.n	8002386 <HAL_RCC_OscConfig+0x356>
 800236c:	4b6d      	ldr	r3, [pc, #436]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	4a6c      	ldr	r2, [pc, #432]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002372:	f043 0304 	orr.w	r3, r3, #4
 8002376:	6213      	str	r3, [r2, #32]
 8002378:	4b6a      	ldr	r3, [pc, #424]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	4a69      	ldr	r2, [pc, #420]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	6213      	str	r3, [r2, #32]
 8002384:	e00b      	b.n	800239e <HAL_RCC_OscConfig+0x36e>
 8002386:	4b67      	ldr	r3, [pc, #412]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	4a66      	ldr	r2, [pc, #408]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800238c:	f023 0301 	bic.w	r3, r3, #1
 8002390:	6213      	str	r3, [r2, #32]
 8002392:	4b64      	ldr	r3, [pc, #400]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	4a63      	ldr	r2, [pc, #396]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002398:	f023 0304 	bic.w	r3, r3, #4
 800239c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d015      	beq.n	80023d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a6:	f7ff fb69 	bl	8001a7c <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ac:	e00a      	b.n	80023c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ae:	f7ff fb65 	bl	8001a7c <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023bc:	4293      	cmp	r3, r2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e0ab      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c4:	4b57      	ldr	r3, [pc, #348]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0ee      	beq.n	80023ae <HAL_RCC_OscConfig+0x37e>
 80023d0:	e014      	b.n	80023fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d2:	f7ff fb53 	bl	8001a7c <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d8:	e00a      	b.n	80023f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7ff fb4f 	bl	8001a7c <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e095      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f0:	4b4c      	ldr	r3, [pc, #304]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1ee      	bne.n	80023da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023fc:	7dfb      	ldrb	r3, [r7, #23]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d105      	bne.n	800240e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002402:	4b48      	ldr	r3, [pc, #288]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	4a47      	ldr	r2, [pc, #284]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800240c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 8081 	beq.w	800251a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002418:	4b42      	ldr	r3, [pc, #264]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 030c 	and.w	r3, r3, #12
 8002420:	2b08      	cmp	r3, #8
 8002422:	d061      	beq.n	80024e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d146      	bne.n	80024ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242c:	4b3f      	ldr	r3, [pc, #252]	; (800252c <HAL_RCC_OscConfig+0x4fc>)
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002432:	f7ff fb23 	bl	8001a7c <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243a:	f7ff fb1f 	bl	8001a7c <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e067      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800244c:	4b35      	ldr	r3, [pc, #212]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f0      	bne.n	800243a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002460:	d108      	bne.n	8002474 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002462:	4b30      	ldr	r3, [pc, #192]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	492d      	ldr	r1, [pc, #180]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002470:	4313      	orrs	r3, r2
 8002472:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002474:	4b2b      	ldr	r3, [pc, #172]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a19      	ldr	r1, [r3, #32]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	430b      	orrs	r3, r1
 8002486:	4927      	ldr	r1, [pc, #156]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800248c:	4b27      	ldr	r3, [pc, #156]	; (800252c <HAL_RCC_OscConfig+0x4fc>)
 800248e:	2201      	movs	r2, #1
 8002490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002492:	f7ff faf3 	bl	8001a7c <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249a:	f7ff faef 	bl	8001a7c <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e037      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ac:	4b1d      	ldr	r3, [pc, #116]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x46a>
 80024b8:	e02f      	b.n	800251a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ba:	4b1c      	ldr	r3, [pc, #112]	; (800252c <HAL_RCC_OscConfig+0x4fc>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7ff fadc 	bl	8001a7c <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c8:	f7ff fad8 	bl	8001a7c <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e020      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024da:	4b12      	ldr	r3, [pc, #72]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x498>
 80024e6:	e018      	b.n	800251a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e013      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	429a      	cmp	r2, r3
 8002506:	d106      	bne.n	8002516 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d001      	beq.n	800251a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40021000 	.word	0x40021000
 8002528:	40007000 	.word	0x40007000
 800252c:	42420060 	.word	0x42420060

08002530 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0d0      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002544:	4b6a      	ldr	r3, [pc, #424]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d910      	bls.n	8002574 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4b67      	ldr	r3, [pc, #412]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 0207 	bic.w	r2, r3, #7
 800255a:	4965      	ldr	r1, [pc, #404]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b63      	ldr	r3, [pc, #396]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0b8      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d020      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800258c:	4b59      	ldr	r3, [pc, #356]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4a58      	ldr	r2, [pc, #352]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002592:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002596:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025a4:	4b53      	ldr	r3, [pc, #332]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	4a52      	ldr	r2, [pc, #328]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b0:	4b50      	ldr	r3, [pc, #320]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	494d      	ldr	r1, [pc, #308]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d040      	beq.n	8002650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d107      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d6:	4b47      	ldr	r3, [pc, #284]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d115      	bne.n	800260e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e07f      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d107      	bne.n	80025fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ee:	4b41      	ldr	r3, [pc, #260]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e073      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fe:	4b3d      	ldr	r3, [pc, #244]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e06b      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800260e:	4b39      	ldr	r3, [pc, #228]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f023 0203 	bic.w	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4936      	ldr	r1, [pc, #216]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	4313      	orrs	r3, r2
 800261e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002620:	f7ff fa2c 	bl	8001a7c <HAL_GetTick>
 8002624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002626:	e00a      	b.n	800263e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002628:	f7ff fa28 	bl	8001a7c <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	f241 3288 	movw	r2, #5000	; 0x1388
 8002636:	4293      	cmp	r3, r2
 8002638:	d901      	bls.n	800263e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e053      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263e:	4b2d      	ldr	r3, [pc, #180]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 020c 	and.w	r2, r3, #12
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	429a      	cmp	r2, r3
 800264e:	d1eb      	bne.n	8002628 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002650:	4b27      	ldr	r3, [pc, #156]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d210      	bcs.n	8002680 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265e:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 0207 	bic.w	r2, r3, #7
 8002666:	4922      	ldr	r1, [pc, #136]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	4313      	orrs	r3, r2
 800266c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266e:	4b20      	ldr	r3, [pc, #128]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d001      	beq.n	8002680 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e032      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4916      	ldr	r1, [pc, #88]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 800269a:	4313      	orrs	r3, r2
 800269c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d009      	beq.n	80026be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026aa:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	490e      	ldr	r1, [pc, #56]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026be:	f000 f821 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 80026c2:	4602      	mov	r2, r0
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	490a      	ldr	r1, [pc, #40]	; (80026f8 <HAL_RCC_ClockConfig+0x1c8>)
 80026d0:	5ccb      	ldrb	r3, [r1, r3]
 80026d2:	fa22 f303 	lsr.w	r3, r2, r3
 80026d6:	4a09      	ldr	r2, [pc, #36]	; (80026fc <HAL_RCC_ClockConfig+0x1cc>)
 80026d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <HAL_RCC_ClockConfig+0x1d0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff f98a 	bl	80019f8 <HAL_InitTick>

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40022000 	.word	0x40022000
 80026f4:	40021000 	.word	0x40021000
 80026f8:	08003010 	.word	0x08003010
 80026fc:	20000044 	.word	0x20000044
 8002700:	20000048 	.word	0x20000048

08002704 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	2300      	movs	r3, #0
 8002718:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800271e:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <HAL_RCC_GetSysClockFreq+0x94>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f003 030c 	and.w	r3, r3, #12
 800272a:	2b04      	cmp	r3, #4
 800272c:	d002      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0x30>
 800272e:	2b08      	cmp	r3, #8
 8002730:	d003      	beq.n	800273a <HAL_RCC_GetSysClockFreq+0x36>
 8002732:	e027      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002734:	4b19      	ldr	r3, [pc, #100]	; (800279c <HAL_RCC_GetSysClockFreq+0x98>)
 8002736:	613b      	str	r3, [r7, #16]
      break;
 8002738:	e027      	b.n	800278a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	0c9b      	lsrs	r3, r3, #18
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	4a17      	ldr	r2, [pc, #92]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002744:	5cd3      	ldrb	r3, [r2, r3]
 8002746:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d010      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002752:	4b11      	ldr	r3, [pc, #68]	; (8002798 <HAL_RCC_GetSysClockFreq+0x94>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	0c5b      	lsrs	r3, r3, #17
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	4a11      	ldr	r2, [pc, #68]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800275e:	5cd3      	ldrb	r3, [r2, r3]
 8002760:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a0d      	ldr	r2, [pc, #52]	; (800279c <HAL_RCC_GetSysClockFreq+0x98>)
 8002766:	fb02 f203 	mul.w	r2, r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	e004      	b.n	800277e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a0c      	ldr	r2, [pc, #48]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002778:	fb02 f303 	mul.w	r3, r2, r3
 800277c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	613b      	str	r3, [r7, #16]
      break;
 8002782:	e002      	b.n	800278a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <HAL_RCC_GetSysClockFreq+0x98>)
 8002786:	613b      	str	r3, [r7, #16]
      break;
 8002788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800278a:	693b      	ldr	r3, [r7, #16]
}
 800278c:	4618      	mov	r0, r3
 800278e:	371c      	adds	r7, #28
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000
 800279c:	007a1200 	.word	0x007a1200
 80027a0:	08003020 	.word	0x08003020
 80027a4:	08003030 	.word	0x08003030
 80027a8:	003d0900 	.word	0x003d0900

080027ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027b4:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <RCC_Delay+0x34>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <RCC_Delay+0x38>)
 80027ba:	fba2 2303 	umull	r2, r3, r2, r3
 80027be:	0a5b      	lsrs	r3, r3, #9
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	fb02 f303 	mul.w	r3, r2, r3
 80027c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027c8:	bf00      	nop
  }
  while (Delay --);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1e5a      	subs	r2, r3, #1
 80027ce:	60fa      	str	r2, [r7, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f9      	bne.n	80027c8 <RCC_Delay+0x1c>
}
 80027d4:	bf00      	nop
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	20000044 	.word	0x20000044
 80027e4:	10624dd3 	.word	0x10624dd3

080027e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e041      	b.n	800287e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d106      	bne.n	8002814 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff f82c 	bl	800186c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3304      	adds	r3, #4
 8002824:	4619      	mov	r1, r3
 8002826:	4610      	mov	r0, r2
 8002828:	f000 fa56 	bl	8002cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b01      	cmp	r3, #1
 800289a:	d001      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e035      	b.n	800290c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a16      	ldr	r2, [pc, #88]	; (8002918 <HAL_TIM_Base_Start_IT+0x90>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d009      	beq.n	80028d6 <HAL_TIM_Base_Start_IT+0x4e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ca:	d004      	beq.n	80028d6 <HAL_TIM_Base_Start_IT+0x4e>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a12      	ldr	r2, [pc, #72]	; (800291c <HAL_TIM_Base_Start_IT+0x94>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d111      	bne.n	80028fa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b06      	cmp	r3, #6
 80028e6:	d010      	beq.n	800290a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f8:	e007      	b.n	800290a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 0201 	orr.w	r2, r2, #1
 8002908:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40012c00 	.word	0x40012c00
 800291c:	40000400 	.word	0x40000400

08002920 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d020      	beq.n	8002984 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d01b      	beq.n	8002984 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f06f 0202 	mvn.w	r2, #2
 8002954:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f998 	bl	8002ca0 <HAL_TIM_IC_CaptureCallback>
 8002970:	e005      	b.n	800297e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f98b 	bl	8002c8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f99a 	bl	8002cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	2b00      	cmp	r3, #0
 800298c:	d020      	beq.n	80029d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d01b      	beq.n	80029d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0204 	mvn.w	r2, #4
 80029a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2202      	movs	r2, #2
 80029a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f972 	bl	8002ca0 <HAL_TIM_IC_CaptureCallback>
 80029bc:	e005      	b.n	80029ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f965 	bl	8002c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f974 	bl	8002cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d020      	beq.n	8002a1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d01b      	beq.n	8002a1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f06f 0208 	mvn.w	r2, #8
 80029ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2204      	movs	r2, #4
 80029f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f94c 	bl	8002ca0 <HAL_TIM_IC_CaptureCallback>
 8002a08:	e005      	b.n	8002a16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f93f 	bl	8002c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f94e 	bl	8002cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d020      	beq.n	8002a68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01b      	beq.n	8002a68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0210 	mvn.w	r2, #16
 8002a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2208      	movs	r2, #8
 8002a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f926 	bl	8002ca0 <HAL_TIM_IC_CaptureCallback>
 8002a54:	e005      	b.n	8002a62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f919 	bl	8002c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f928 	bl	8002cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00c      	beq.n	8002a8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d007      	beq.n	8002a8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0201 	mvn.w	r2, #1
 8002a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7fe feac 	bl	80017e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00c      	beq.n	8002ab0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d007      	beq.n	8002ab0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 fa6f 	bl	8002f8e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00c      	beq.n	8002ad4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d007      	beq.n	8002ad4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f8f8 	bl	8002cc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00c      	beq.n	8002af8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d007      	beq.n	8002af8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f06f 0220 	mvn.w	r2, #32
 8002af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fa42 	bl	8002f7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002af8:	bf00      	nop
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_TIM_ConfigClockSource+0x1c>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e0b4      	b.n	8002c86 <HAL_TIM_ConfigClockSource+0x186>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b54:	d03e      	beq.n	8002bd4 <HAL_TIM_ConfigClockSource+0xd4>
 8002b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b5a:	f200 8087 	bhi.w	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
 8002b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b62:	f000 8086 	beq.w	8002c72 <HAL_TIM_ConfigClockSource+0x172>
 8002b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b6a:	d87f      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
 8002b6c:	2b70      	cmp	r3, #112	; 0x70
 8002b6e:	d01a      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0xa6>
 8002b70:	2b70      	cmp	r3, #112	; 0x70
 8002b72:	d87b      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
 8002b74:	2b60      	cmp	r3, #96	; 0x60
 8002b76:	d050      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0x11a>
 8002b78:	2b60      	cmp	r3, #96	; 0x60
 8002b7a:	d877      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
 8002b7c:	2b50      	cmp	r3, #80	; 0x50
 8002b7e:	d03c      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0xfa>
 8002b80:	2b50      	cmp	r3, #80	; 0x50
 8002b82:	d873      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
 8002b84:	2b40      	cmp	r3, #64	; 0x40
 8002b86:	d058      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0x13a>
 8002b88:	2b40      	cmp	r3, #64	; 0x40
 8002b8a:	d86f      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
 8002b8c:	2b30      	cmp	r3, #48	; 0x30
 8002b8e:	d064      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x15a>
 8002b90:	2b30      	cmp	r3, #48	; 0x30
 8002b92:	d86b      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d060      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x15a>
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	d867      	bhi.n	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d05c      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x15a>
 8002ba0:	2b10      	cmp	r3, #16
 8002ba2:	d05a      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x15a>
 8002ba4:	e062      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	6899      	ldr	r1, [r3, #8]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f000 f96a 	bl	8002e8e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	609a      	str	r2, [r3, #8]
      break;
 8002bd2:	e04f      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6818      	ldr	r0, [r3, #0]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	6899      	ldr	r1, [r3, #8]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f000 f953 	bl	8002e8e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bf6:	609a      	str	r2, [r3, #8]
      break;
 8002bf8:	e03c      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6859      	ldr	r1, [r3, #4]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	461a      	mov	r2, r3
 8002c08:	f000 f8ca 	bl	8002da0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2150      	movs	r1, #80	; 0x50
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 f921 	bl	8002e5a <TIM_ITRx_SetConfig>
      break;
 8002c18:	e02c      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6859      	ldr	r1, [r3, #4]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f000 f8e8 	bl	8002dfc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2160      	movs	r1, #96	; 0x60
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 f911 	bl	8002e5a <TIM_ITRx_SetConfig>
      break;
 8002c38:	e01c      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	6859      	ldr	r1, [r3, #4]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	461a      	mov	r2, r3
 8002c48:	f000 f8aa 	bl	8002da0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2140      	movs	r1, #64	; 0x40
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 f901 	bl	8002e5a <TIM_ITRx_SetConfig>
      break;
 8002c58:	e00c      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4619      	mov	r1, r3
 8002c64:	4610      	mov	r0, r2
 8002c66:	f000 f8f8 	bl	8002e5a <TIM_ITRx_SetConfig>
      break;
 8002c6a:	e003      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c70:	e000      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr
	...

08002cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a2b      	ldr	r2, [pc, #172]	; (8002d98 <TIM_Base_SetConfig+0xc0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d007      	beq.n	8002d00 <TIM_Base_SetConfig+0x28>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf6:	d003      	beq.n	8002d00 <TIM_Base_SetConfig+0x28>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a28      	ldr	r2, [pc, #160]	; (8002d9c <TIM_Base_SetConfig+0xc4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d108      	bne.n	8002d12 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a20      	ldr	r2, [pc, #128]	; (8002d98 <TIM_Base_SetConfig+0xc0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d007      	beq.n	8002d2a <TIM_Base_SetConfig+0x52>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d20:	d003      	beq.n	8002d2a <TIM_Base_SetConfig+0x52>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a1d      	ldr	r2, [pc, #116]	; (8002d9c <TIM_Base_SetConfig+0xc4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d108      	bne.n	8002d3c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a0d      	ldr	r2, [pc, #52]	; (8002d98 <TIM_Base_SetConfig+0xc0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d103      	bne.n	8002d70 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f023 0201 	bic.w	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	611a      	str	r2, [r3, #16]
  }
}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	40012c00 	.word	0x40012c00
 8002d9c:	40000400 	.word	0x40000400

08002da0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	f023 0201 	bic.w	r2, r3, #1
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f023 030a 	bic.w	r3, r3, #10
 8002ddc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	621a      	str	r2, [r3, #32]
}
 8002df2:	bf00      	nop
 8002df4:	371c      	adds	r7, #28
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr

08002dfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	f023 0210 	bic.w	r2, r3, #16
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	031b      	lsls	r3, r3, #12
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e38:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	621a      	str	r2, [r3, #32]
}
 8002e50:	bf00      	nop
 8002e52:	371c      	adds	r7, #28
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr

08002e5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b085      	sub	sp, #20
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f043 0307 	orr.w	r3, r3, #7
 8002e7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	609a      	str	r2, [r3, #8]
}
 8002e84:	bf00      	nop
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b087      	sub	sp, #28
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
 8002e9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ea8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	021a      	lsls	r2, r3, #8
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	609a      	str	r2, [r3, #8]
}
 8002ec2:	bf00      	nop
 8002ec4:	371c      	adds	r7, #28
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e041      	b.n	8002f68 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a14      	ldr	r2, [pc, #80]	; (8002f74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d009      	beq.n	8002f3c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f30:	d004      	beq.n	8002f3c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a10      	ldr	r2, [pc, #64]	; (8002f78 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d10c      	bne.n	8002f56 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40012c00 	.word	0x40012c00
 8002f78:	40000400 	.word	0x40000400

08002f7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr

08002f8e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr

08002fa0 <__libc_init_array>:
 8002fa0:	b570      	push	{r4, r5, r6, lr}
 8002fa2:	2600      	movs	r6, #0
 8002fa4:	4d0c      	ldr	r5, [pc, #48]	; (8002fd8 <__libc_init_array+0x38>)
 8002fa6:	4c0d      	ldr	r4, [pc, #52]	; (8002fdc <__libc_init_array+0x3c>)
 8002fa8:	1b64      	subs	r4, r4, r5
 8002faa:	10a4      	asrs	r4, r4, #2
 8002fac:	42a6      	cmp	r6, r4
 8002fae:	d109      	bne.n	8002fc4 <__libc_init_array+0x24>
 8002fb0:	f000 f822 	bl	8002ff8 <_init>
 8002fb4:	2600      	movs	r6, #0
 8002fb6:	4d0a      	ldr	r5, [pc, #40]	; (8002fe0 <__libc_init_array+0x40>)
 8002fb8:	4c0a      	ldr	r4, [pc, #40]	; (8002fe4 <__libc_init_array+0x44>)
 8002fba:	1b64      	subs	r4, r4, r5
 8002fbc:	10a4      	asrs	r4, r4, #2
 8002fbe:	42a6      	cmp	r6, r4
 8002fc0:	d105      	bne.n	8002fce <__libc_init_array+0x2e>
 8002fc2:	bd70      	pop	{r4, r5, r6, pc}
 8002fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fc8:	4798      	blx	r3
 8002fca:	3601      	adds	r6, #1
 8002fcc:	e7ee      	b.n	8002fac <__libc_init_array+0xc>
 8002fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd2:	4798      	blx	r3
 8002fd4:	3601      	adds	r6, #1
 8002fd6:	e7f2      	b.n	8002fbe <__libc_init_array+0x1e>
 8002fd8:	08003034 	.word	0x08003034
 8002fdc:	08003034 	.word	0x08003034
 8002fe0:	08003034 	.word	0x08003034
 8002fe4:	08003038 	.word	0x08003038

08002fe8 <memset>:
 8002fe8:	4603      	mov	r3, r0
 8002fea:	4402      	add	r2, r0
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d100      	bne.n	8002ff2 <memset+0xa>
 8002ff0:	4770      	bx	lr
 8002ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ff6:	e7f9      	b.n	8002fec <memset+0x4>

08002ff8 <_init>:
 8002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffa:	bf00      	nop
 8002ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffe:	bc08      	pop	{r3}
 8003000:	469e      	mov	lr, r3
 8003002:	4770      	bx	lr

08003004 <_fini>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	bf00      	nop
 8003008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300a:	bc08      	pop	{r3}
 800300c:	469e      	mov	lr, r3
 800300e:	4770      	bx	lr
