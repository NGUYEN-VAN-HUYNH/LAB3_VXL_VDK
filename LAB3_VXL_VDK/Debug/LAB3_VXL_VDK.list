
LAB3_VXL_VDK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080032e4  080032e4  000132e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003308  08003308  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08003308  08003308  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003308  08003308  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003308  08003308  00013308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800330c  0800330c  0001330c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08003310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  20000050  08003360  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08003360  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5bc  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed4  00000000  00000000  0002a635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  0002c510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002d018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174bb  00000000  00000000  0002d9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d595  00000000  00000000  00044ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000829ef  00000000  00000000  00052438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4e27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a8c  00000000  00000000  000d4e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000050 	.word	0x20000050
 8000128:	00000000 	.word	0x00000000
 800012c:	080032cc 	.word	0x080032cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000054 	.word	0x20000054
 8000148:	080032cc 	.word	0x080032cc

0800014c <display7SEG_East_West>:
 *  Created on: Oct 25, 2024
 *      Author: Admin
 */
#include "7_Segment.h"
#include "main.h"
void display7SEG_East_West(int num) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	// ban dau tat led 7 doan
	HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_SET);
 8000154:	2201      	movs	r2, #1
 8000156:	2101      	movs	r1, #1
 8000158:	489f      	ldr	r0, [pc, #636]	; (80003d8 <display7SEG_East_West+0x28c>)
 800015a:	f002 f8a2 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_SET);
 800015e:	2201      	movs	r2, #1
 8000160:	2102      	movs	r1, #2
 8000162:	489d      	ldr	r0, [pc, #628]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000164:	f002 f89d 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	2104      	movs	r1, #4
 800016c:	489a      	ldr	r0, [pc, #616]	; (80003d8 <display7SEG_East_West+0x28c>)
 800016e:	f002 f898 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_SET);
 8000172:	2201      	movs	r2, #1
 8000174:	2108      	movs	r1, #8
 8000176:	4898      	ldr	r0, [pc, #608]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000178:	f002 f893 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_E, GPIO_PIN_SET);
 800017c:	2201      	movs	r2, #1
 800017e:	2110      	movs	r1, #16
 8000180:	4895      	ldr	r0, [pc, #596]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000182:	f002 f88e 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_SET);
 8000186:	2201      	movs	r2, #1
 8000188:	2120      	movs	r1, #32
 800018a:	4893      	ldr	r0, [pc, #588]	; (80003d8 <display7SEG_East_West+0x28c>)
 800018c:	f002 f889 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_SET);
 8000190:	2201      	movs	r2, #1
 8000192:	2140      	movs	r1, #64	; 0x40
 8000194:	4890      	ldr	r0, [pc, #576]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000196:	f002 f884 	bl	80022a2 <HAL_GPIO_WritePin>
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b09      	cmp	r3, #9
 800019e:	f200 8116 	bhi.w	80003ce <display7SEG_East_West+0x282>
 80001a2:	a201      	add	r2, pc, #4	; (adr r2, 80001a8 <display7SEG_East_West+0x5c>)
 80001a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001a8:	080001d1 	.word	0x080001d1
 80001ac:	0800020f 	.word	0x0800020f
 80001b0:	08000225 	.word	0x08000225
 80001b4:	08000259 	.word	0x08000259
 80001b8:	0800028d 	.word	0x0800028d
 80001bc:	080002b7 	.word	0x080002b7
 80001c0:	080002eb 	.word	0x080002eb
 80001c4:	08000329 	.word	0x08000329
 80001c8:	08000349 	.word	0x08000349
 80001cc:	08000391 	.word	0x08000391

	// dieu khien led 7 doan
	switch (num) {
	case 0:
		HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2101      	movs	r1, #1
 80001d4:	4880      	ldr	r0, [pc, #512]	; (80003d8 <display7SEG_East_West+0x28c>)
 80001d6:	f002 f864 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 80001da:	2200      	movs	r2, #0
 80001dc:	2102      	movs	r1, #2
 80001de:	487e      	ldr	r0, [pc, #504]	; (80003d8 <display7SEG_East_West+0x28c>)
 80001e0:	f002 f85f 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2104      	movs	r1, #4
 80001e8:	487b      	ldr	r0, [pc, #492]	; (80003d8 <display7SEG_East_West+0x28c>)
 80001ea:	f002 f85a 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 80001ee:	2200      	movs	r2, #0
 80001f0:	2108      	movs	r1, #8
 80001f2:	4879      	ldr	r0, [pc, #484]	; (80003d8 <display7SEG_East_West+0x28c>)
 80001f4:	f002 f855 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E, GPIO_PIN_RESET);
 80001f8:	2200      	movs	r2, #0
 80001fa:	2110      	movs	r1, #16
 80001fc:	4876      	ldr	r0, [pc, #472]	; (80003d8 <display7SEG_East_West+0x28c>)
 80001fe:	f002 f850 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_RESET);
 8000202:	2200      	movs	r2, #0
 8000204:	2120      	movs	r1, #32
 8000206:	4874      	ldr	r0, [pc, #464]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000208:	f002 f84b 	bl	80022a2 <HAL_GPIO_WritePin>
		break;
 800020c:	e0e0      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 1:
		HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	2102      	movs	r1, #2
 8000212:	4871      	ldr	r0, [pc, #452]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000214:	f002 f845 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 8000218:	2200      	movs	r2, #0
 800021a:	2104      	movs	r1, #4
 800021c:	486e      	ldr	r0, [pc, #440]	; (80003d8 <display7SEG_East_West+0x28c>)
 800021e:	f002 f840 	bl	80022a2 <HAL_GPIO_WritePin>
		break;
 8000222:	e0d5      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 2:
		HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 8000224:	2200      	movs	r2, #0
 8000226:	2101      	movs	r1, #1
 8000228:	486b      	ldr	r0, [pc, #428]	; (80003d8 <display7SEG_East_West+0x28c>)
 800022a:	f002 f83a 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 800022e:	2200      	movs	r2, #0
 8000230:	2102      	movs	r1, #2
 8000232:	4869      	ldr	r0, [pc, #420]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000234:	f002 f835 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	2108      	movs	r1, #8
 800023c:	4866      	ldr	r0, [pc, #408]	; (80003d8 <display7SEG_East_West+0x28c>)
 800023e:	f002 f830 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E, GPIO_PIN_RESET);
 8000242:	2200      	movs	r2, #0
 8000244:	2110      	movs	r1, #16
 8000246:	4864      	ldr	r0, [pc, #400]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000248:	f002 f82b 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 800024c:	2200      	movs	r2, #0
 800024e:	2140      	movs	r1, #64	; 0x40
 8000250:	4861      	ldr	r0, [pc, #388]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000252:	f002 f826 	bl	80022a2 <HAL_GPIO_WritePin>
		break;
 8000256:	e0bb      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 3:
		HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	2101      	movs	r1, #1
 800025c:	485e      	ldr	r0, [pc, #376]	; (80003d8 <display7SEG_East_West+0x28c>)
 800025e:	f002 f820 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	2102      	movs	r1, #2
 8000266:	485c      	ldr	r0, [pc, #368]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000268:	f002 f81b 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 800026c:	2200      	movs	r2, #0
 800026e:	2104      	movs	r1, #4
 8000270:	4859      	ldr	r0, [pc, #356]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000272:	f002 f816 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	2108      	movs	r1, #8
 800027a:	4857      	ldr	r0, [pc, #348]	; (80003d8 <display7SEG_East_West+0x28c>)
 800027c:	f002 f811 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	2140      	movs	r1, #64	; 0x40
 8000284:	4854      	ldr	r0, [pc, #336]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000286:	f002 f80c 	bl	80022a2 <HAL_GPIO_WritePin>
		break;
 800028a:	e0a1      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 4:
		HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 800028c:	2200      	movs	r2, #0
 800028e:	2102      	movs	r1, #2
 8000290:	4851      	ldr	r0, [pc, #324]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000292:	f002 f806 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 8000296:	2200      	movs	r2, #0
 8000298:	2104      	movs	r1, #4
 800029a:	484f      	ldr	r0, [pc, #316]	; (80003d8 <display7SEG_East_West+0x28c>)
 800029c:	f002 f801 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2120      	movs	r1, #32
 80002a4:	484c      	ldr	r0, [pc, #304]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002a6:	f001 fffc 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 80002aa:	2200      	movs	r2, #0
 80002ac:	2140      	movs	r1, #64	; 0x40
 80002ae:	484a      	ldr	r0, [pc, #296]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002b0:	f001 fff7 	bl	80022a2 <HAL_GPIO_WritePin>
		break;
 80002b4:	e08c      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 5:
		HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2101      	movs	r1, #1
 80002ba:	4847      	ldr	r0, [pc, #284]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002bc:	f001 fff1 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2104      	movs	r1, #4
 80002c4:	4844      	ldr	r0, [pc, #272]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002c6:	f001 ffec 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2108      	movs	r1, #8
 80002ce:	4842      	ldr	r0, [pc, #264]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002d0:	f001 ffe7 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2120      	movs	r1, #32
 80002d8:	483f      	ldr	r0, [pc, #252]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002da:	f001 ffe2 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2140      	movs	r1, #64	; 0x40
 80002e2:	483d      	ldr	r0, [pc, #244]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002e4:	f001 ffdd 	bl	80022a2 <HAL_GPIO_WritePin>
		break;
 80002e8:	e072      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 6:
		HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2101      	movs	r1, #1
 80002ee:	483a      	ldr	r0, [pc, #232]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002f0:	f001 ffd7 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2104      	movs	r1, #4
 80002f8:	4837      	ldr	r0, [pc, #220]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002fa:	f001 ffd2 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 80002fe:	2200      	movs	r2, #0
 8000300:	2108      	movs	r1, #8
 8000302:	4835      	ldr	r0, [pc, #212]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000304:	f001 ffcd 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2110      	movs	r1, #16
 800030c:	4832      	ldr	r0, [pc, #200]	; (80003d8 <display7SEG_East_West+0x28c>)
 800030e:	f001 ffc8 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2120      	movs	r1, #32
 8000316:	4830      	ldr	r0, [pc, #192]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000318:	f001 ffc3 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	2140      	movs	r1, #64	; 0x40
 8000320:	482d      	ldr	r0, [pc, #180]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000322:	f001 ffbe 	bl	80022a2 <HAL_GPIO_WritePin>
		break;
 8000326:	e053      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 7:
		HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	2101      	movs	r1, #1
 800032c:	482a      	ldr	r0, [pc, #168]	; (80003d8 <display7SEG_East_West+0x28c>)
 800032e:	f001 ffb8 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	2102      	movs	r1, #2
 8000336:	4828      	ldr	r0, [pc, #160]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000338:	f001 ffb3 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2104      	movs	r1, #4
 8000340:	4825      	ldr	r0, [pc, #148]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000342:	f001 ffae 	bl	80022a2 <HAL_GPIO_WritePin>
		break;
 8000346:	e043      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 8:
		HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	2101      	movs	r1, #1
 800034c:	4822      	ldr	r0, [pc, #136]	; (80003d8 <display7SEG_East_West+0x28c>)
 800034e:	f001 ffa8 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	2102      	movs	r1, #2
 8000356:	4820      	ldr	r0, [pc, #128]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000358:	f001 ffa3 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	2104      	movs	r1, #4
 8000360:	481d      	ldr	r0, [pc, #116]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000362:	f001 ff9e 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	2108      	movs	r1, #8
 800036a:	481b      	ldr	r0, [pc, #108]	; (80003d8 <display7SEG_East_West+0x28c>)
 800036c:	f001 ff99 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E, GPIO_PIN_RESET);
 8000370:	2200      	movs	r2, #0
 8000372:	2110      	movs	r1, #16
 8000374:	4818      	ldr	r0, [pc, #96]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000376:	f001 ff94 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_RESET);
 800037a:	2200      	movs	r2, #0
 800037c:	2120      	movs	r1, #32
 800037e:	4816      	ldr	r0, [pc, #88]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000380:	f001 ff8f 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2140      	movs	r1, #64	; 0x40
 8000388:	4813      	ldr	r0, [pc, #76]	; (80003d8 <display7SEG_East_West+0x28c>)
 800038a:	f001 ff8a 	bl	80022a2 <HAL_GPIO_WritePin>
		break;
 800038e:	e01f      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 9:
		HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	2101      	movs	r1, #1
 8000394:	4810      	ldr	r0, [pc, #64]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000396:	f001 ff84 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 800039a:	2200      	movs	r2, #0
 800039c:	2102      	movs	r1, #2
 800039e:	480e      	ldr	r0, [pc, #56]	; (80003d8 <display7SEG_East_West+0x28c>)
 80003a0:	f001 ff7f 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2104      	movs	r1, #4
 80003a8:	480b      	ldr	r0, [pc, #44]	; (80003d8 <display7SEG_East_West+0x28c>)
 80003aa:	f001 ff7a 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2108      	movs	r1, #8
 80003b2:	4809      	ldr	r0, [pc, #36]	; (80003d8 <display7SEG_East_West+0x28c>)
 80003b4:	f001 ff75 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2120      	movs	r1, #32
 80003bc:	4806      	ldr	r0, [pc, #24]	; (80003d8 <display7SEG_East_West+0x28c>)
 80003be:	f001 ff70 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2140      	movs	r1, #64	; 0x40
 80003c6:	4804      	ldr	r0, [pc, #16]	; (80003d8 <display7SEG_East_West+0x28c>)
 80003c8:	f001 ff6b 	bl	80022a2 <HAL_GPIO_WritePin>
		break;
 80003cc:	e000      	b.n	80003d0 <display7SEG_East_West+0x284>
	default:
		break; // khong lm gi ca
 80003ce:	bf00      	nop
	}

}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40010c00 	.word	0x40010c00

080003dc <display7SEG_North_South>:

void display7SEG_North_South(int num) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	// ban dau tat led 7 doan
	HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_SET);
 80003e4:	2201      	movs	r2, #1
 80003e6:	2180      	movs	r1, #128	; 0x80
 80003e8:	48b7      	ldr	r0, [pc, #732]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80003ea:	f001 ff5a 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f4:	48b4      	ldr	r0, [pc, #720]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80003f6:	f001 ff54 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000400:	48b1      	ldr	r0, [pc, #708]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000402:	f001 ff4e 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_SET);
 8000406:	2201      	movs	r2, #1
 8000408:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800040c:	48ae      	ldr	r0, [pc, #696]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800040e:	f001 ff48 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_E1, GPIO_PIN_SET);
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000418:	48ab      	ldr	r0, [pc, #684]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800041a:	f001 ff42 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_SET);
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000424:	48a8      	ldr	r0, [pc, #672]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000426:	f001 ff3c 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_SET);
 800042a:	2201      	movs	r2, #1
 800042c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000430:	48a5      	ldr	r0, [pc, #660]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000432:	f001 ff36 	bl	80022a2 <HAL_GPIO_WritePin>
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2b09      	cmp	r3, #9
 800043a:	f200 813f 	bhi.w	80006bc <display7SEG_North_South+0x2e0>
 800043e:	a201      	add	r2, pc, #4	; (adr r2, 8000444 <display7SEG_North_South+0x68>)
 8000440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000444:	0800046d 	.word	0x0800046d
 8000448:	080004b5 	.word	0x080004b5
 800044c:	080004cf 	.word	0x080004cf
 8000450:	0800050b 	.word	0x0800050b
 8000454:	08000547 	.word	0x08000547
 8000458:	08000579 	.word	0x08000579
 800045c:	080005b5 	.word	0x080005b5
 8000460:	080005fd 	.word	0x080005fd
 8000464:	08000621 	.word	0x08000621
 8000468:	08000675 	.word	0x08000675

	// dieu khien led 7 doan
	switch (num) {
	case 0:
		HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	2180      	movs	r1, #128	; 0x80
 8000470:	4895      	ldr	r0, [pc, #596]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000472:	f001 ff16 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	f44f 7180 	mov.w	r1, #256	; 0x100
 800047c:	4892      	ldr	r0, [pc, #584]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800047e:	f001 ff10 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000488:	488f      	ldr	r0, [pc, #572]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800048a:	f001 ff0a 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 800048e:	2200      	movs	r2, #0
 8000490:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000494:	488c      	ldr	r0, [pc, #560]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000496:	f001 ff04 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E1, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004a0:	4889      	ldr	r0, [pc, #548]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004a2:	f001 fefe 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004ac:	4886      	ldr	r0, [pc, #536]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004ae:	f001 fef8 	bl	80022a2 <HAL_GPIO_WritePin>
		break;
 80004b2:	e104      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 1:
		HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ba:	4883      	ldr	r0, [pc, #524]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004bc:	f001 fef1 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004c6:	4880      	ldr	r0, [pc, #512]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004c8:	f001 feeb 	bl	80022a2 <HAL_GPIO_WritePin>
		break;
 80004cc:	e0f7      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 2:
		HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2180      	movs	r1, #128	; 0x80
 80004d2:	487d      	ldr	r0, [pc, #500]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004d4:	f001 fee5 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004de:	487a      	ldr	r0, [pc, #488]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004e0:	f001 fedf 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ea:	4877      	ldr	r0, [pc, #476]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004ec:	f001 fed9 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E1, GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f6:	4874      	ldr	r0, [pc, #464]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004f8:	f001 fed3 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000502:	4871      	ldr	r0, [pc, #452]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000504:	f001 fecd 	bl	80022a2 <HAL_GPIO_WritePin>
		break;
 8000508:	e0d9      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 3:
		HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	2180      	movs	r1, #128	; 0x80
 800050e:	486e      	ldr	r0, [pc, #440]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000510:	f001 fec7 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 7180 	mov.w	r1, #256	; 0x100
 800051a:	486b      	ldr	r0, [pc, #428]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800051c:	f001 fec1 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000526:	4868      	ldr	r0, [pc, #416]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000528:	f001 febb 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000532:	4865      	ldr	r0, [pc, #404]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000534:	f001 feb5 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053e:	4862      	ldr	r0, [pc, #392]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000540:	f001 feaf 	bl	80022a2 <HAL_GPIO_WritePin>
		break;
 8000544:	e0bb      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 4:
		HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054c:	485e      	ldr	r0, [pc, #376]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800054e:	f001 fea8 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000558:	485b      	ldr	r0, [pc, #364]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800055a:	f001 fea2 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000564:	4858      	ldr	r0, [pc, #352]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000566:	f001 fe9c 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000570:	4855      	ldr	r0, [pc, #340]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000572:	f001 fe96 	bl	80022a2 <HAL_GPIO_WritePin>
		break;
 8000576:	e0a2      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 5:
		HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2180      	movs	r1, #128	; 0x80
 800057c:	4852      	ldr	r0, [pc, #328]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800057e:	f001 fe90 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000588:	484f      	ldr	r0, [pc, #316]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800058a:	f001 fe8a 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000594:	484c      	ldr	r0, [pc, #304]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000596:	f001 fe84 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a0:	4849      	ldr	r0, [pc, #292]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005a2:	f001 fe7e 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ac:	4846      	ldr	r0, [pc, #280]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005ae:	f001 fe78 	bl	80022a2 <HAL_GPIO_WritePin>
		break;
 80005b2:	e084      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 6:
		HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2180      	movs	r1, #128	; 0x80
 80005b8:	4843      	ldr	r0, [pc, #268]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005ba:	f001 fe72 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c4:	4840      	ldr	r0, [pc, #256]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005c6:	f001 fe6c 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d0:	483d      	ldr	r0, [pc, #244]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005d2:	f001 fe66 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E1, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005dc:	483a      	ldr	r0, [pc, #232]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005de:	f001 fe60 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e8:	4837      	ldr	r0, [pc, #220]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005ea:	f001 fe5a 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f4:	4834      	ldr	r0, [pc, #208]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005f6:	f001 fe54 	bl	80022a2 <HAL_GPIO_WritePin>
		break;
 80005fa:	e060      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 7:
		HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2180      	movs	r1, #128	; 0x80
 8000600:	4831      	ldr	r0, [pc, #196]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000602:	f001 fe4e 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 7180 	mov.w	r1, #256	; 0x100
 800060c:	482e      	ldr	r0, [pc, #184]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800060e:	f001 fe48 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000618:	482b      	ldr	r0, [pc, #172]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800061a:	f001 fe42 	bl	80022a2 <HAL_GPIO_WritePin>
		break;
 800061e:	e04e      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 8:
		HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2180      	movs	r1, #128	; 0x80
 8000624:	4828      	ldr	r0, [pc, #160]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000626:	f001 fe3c 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000630:	4825      	ldr	r0, [pc, #148]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000632:	f001 fe36 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 7100 	mov.w	r1, #512	; 0x200
 800063c:	4822      	ldr	r0, [pc, #136]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800063e:	f001 fe30 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000648:	481f      	ldr	r0, [pc, #124]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800064a:	f001 fe2a 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E1, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000654:	481c      	ldr	r0, [pc, #112]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000656:	f001 fe24 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000660:	4819      	ldr	r0, [pc, #100]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000662:	f001 fe1e 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800066c:	4816      	ldr	r0, [pc, #88]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800066e:	f001 fe18 	bl	80022a2 <HAL_GPIO_WritePin>
		break;
 8000672:	e024      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 9:
		HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	2180      	movs	r1, #128	; 0x80
 8000678:	4813      	ldr	r0, [pc, #76]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800067a:	f001 fe12 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000684:	4810      	ldr	r0, [pc, #64]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000686:	f001 fe0c 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000692:	f001 fe06 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800069c:	480a      	ldr	r0, [pc, #40]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800069e:	f001 fe00 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a8:	4807      	ldr	r0, [pc, #28]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80006aa:	f001 fdfa 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80006b6:	f001 fdf4 	bl	80022a2 <HAL_GPIO_WritePin>
		break;
 80006ba:	e000      	b.n	80006be <display7SEG_North_South+0x2e2>
	default:
		break; // khong lm gi ca
 80006bc:	bf00      	nop
	}

}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40010c00 	.word	0x40010c00

080006cc <isButton1Pressed>:

int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;

int isButton1Pressed() {
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
	if (button1_flag == 1) {
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <isButton1Pressed+0x20>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d104      	bne.n	80006e2 <isButton1Pressed+0x16>
		button1_flag = 0;
 80006d8:	4b04      	ldr	r3, [pc, #16]	; (80006ec <isButton1Pressed+0x20>)
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
		return 1;
 80006de:	2301      	movs	r3, #1
 80006e0:	e000      	b.n	80006e4 <isButton1Pressed+0x18>
	}
	return 0;
 80006e2:	2300      	movs	r3, #0
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	2000006c 	.word	0x2000006c

080006f0 <isButton2Pressed>:

int isButton2Pressed() {
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
	if (button2_flag == 1) {
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <isButton2Pressed+0x20>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d104      	bne.n	8000706 <isButton2Pressed+0x16>
		button2_flag = 0;
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <isButton2Pressed+0x20>)
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
		return 1;
 8000702:	2301      	movs	r3, #1
 8000704:	e000      	b.n	8000708 <isButton2Pressed+0x18>
	}
	return 0;
 8000706:	2300      	movs	r3, #0
}
 8000708:	4618      	mov	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	20000070 	.word	0x20000070

08000714 <isButton3Pressed>:

int isButton3Pressed() {
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
	if (button3_flag == 1) {
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <isButton3Pressed+0x20>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d104      	bne.n	800072a <isButton3Pressed+0x16>
		button3_flag = 0;
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <isButton3Pressed+0x20>)
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
		return 1;
 8000726:	2301      	movs	r3, #1
 8000728:	e000      	b.n	800072c <isButton3Pressed+0x18>
	}
	return 0;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	20000074 	.word	0x20000074

08000738 <getKeyInput>:

void getKeyInput() {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0

	KeyRegB1_0 = KeyRegB1_1;
 800073c:	4b68      	ldr	r3, [pc, #416]	; (80008e0 <getKeyInput+0x1a8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a68      	ldr	r2, [pc, #416]	; (80008e4 <getKeyInput+0x1ac>)
 8000742:	6013      	str	r3, [r2, #0]
	KeyRegB1_1 = KeyRegB1_2;
 8000744:	4b68      	ldr	r3, [pc, #416]	; (80008e8 <getKeyInput+0x1b0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a65      	ldr	r2, [pc, #404]	; (80008e0 <getKeyInput+0x1a8>)
 800074a:	6013      	str	r3, [r2, #0]
	KeyRegB1_2 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 800074c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000750:	4866      	ldr	r0, [pc, #408]	; (80008ec <getKeyInput+0x1b4>)
 8000752:	f001 fd8f 	bl	8002274 <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	461a      	mov	r2, r3
 800075a:	4b63      	ldr	r3, [pc, #396]	; (80008e8 <getKeyInput+0x1b0>)
 800075c:	601a      	str	r2, [r3, #0]

	KeyRegB2_0 = KeyRegB2_1;
 800075e:	4b64      	ldr	r3, [pc, #400]	; (80008f0 <getKeyInput+0x1b8>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a64      	ldr	r2, [pc, #400]	; (80008f4 <getKeyInput+0x1bc>)
 8000764:	6013      	str	r3, [r2, #0]
	KeyRegB2_1 = KeyRegB2_2;
 8000766:	4b64      	ldr	r3, [pc, #400]	; (80008f8 <getKeyInput+0x1c0>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a61      	ldr	r2, [pc, #388]	; (80008f0 <getKeyInput+0x1b8>)
 800076c:	6013      	str	r3, [r2, #0]
	KeyRegB2_2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 800076e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000772:	485e      	ldr	r0, [pc, #376]	; (80008ec <getKeyInput+0x1b4>)
 8000774:	f001 fd7e 	bl	8002274 <HAL_GPIO_ReadPin>
 8000778:	4603      	mov	r3, r0
 800077a:	461a      	mov	r2, r3
 800077c:	4b5e      	ldr	r3, [pc, #376]	; (80008f8 <getKeyInput+0x1c0>)
 800077e:	601a      	str	r2, [r3, #0]

	KeyRegB3_0 = KeyRegB3_1;
 8000780:	4b5e      	ldr	r3, [pc, #376]	; (80008fc <getKeyInput+0x1c4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a5e      	ldr	r2, [pc, #376]	; (8000900 <getKeyInput+0x1c8>)
 8000786:	6013      	str	r3, [r2, #0]
	KeyRegB3_1 = KeyRegB3_2;
 8000788:	4b5e      	ldr	r3, [pc, #376]	; (8000904 <getKeyInput+0x1cc>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a5b      	ldr	r2, [pc, #364]	; (80008fc <getKeyInput+0x1c4>)
 800078e:	6013      	str	r3, [r2, #0]
	KeyRegB3_2 = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000790:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000794:	4855      	ldr	r0, [pc, #340]	; (80008ec <getKeyInput+0x1b4>)
 8000796:	f001 fd6d 	bl	8002274 <HAL_GPIO_ReadPin>
 800079a:	4603      	mov	r3, r0
 800079c:	461a      	mov	r2, r3
 800079e:	4b59      	ldr	r3, [pc, #356]	; (8000904 <getKeyInput+0x1cc>)
 80007a0:	601a      	str	r2, [r3, #0]

	// xu ly button 1
	if ((KeyRegB1_0 == KeyRegB1_1) && (KeyRegB1_1 == KeyRegB1_2)) {
 80007a2:	4b50      	ldr	r3, [pc, #320]	; (80008e4 <getKeyInput+0x1ac>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	4b4e      	ldr	r3, [pc, #312]	; (80008e0 <getKeyInput+0x1a8>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d12d      	bne.n	800080a <getKeyInput+0xd2>
 80007ae:	4b4c      	ldr	r3, [pc, #304]	; (80008e0 <getKeyInput+0x1a8>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	4b4d      	ldr	r3, [pc, #308]	; (80008e8 <getKeyInput+0x1b0>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d127      	bne.n	800080a <getKeyInput+0xd2>
		if (KeyRegB1_3 != KeyRegB1_2) {
 80007ba:	4b53      	ldr	r3, [pc, #332]	; (8000908 <getKeyInput+0x1d0>)
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	4b4a      	ldr	r3, [pc, #296]	; (80008e8 <getKeyInput+0x1b0>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d00e      	beq.n	80007e4 <getKeyInput+0xac>
			KeyRegB1_3 = KeyRegB1_2;
 80007c6:	4b48      	ldr	r3, [pc, #288]	; (80008e8 <getKeyInput+0x1b0>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a4f      	ldr	r2, [pc, #316]	; (8000908 <getKeyInput+0x1d0>)
 80007cc:	6013      	str	r3, [r2, #0]

			if (KeyRegB1_2 == PRESSED_STATE) {
 80007ce:	4b46      	ldr	r3, [pc, #280]	; (80008e8 <getKeyInput+0x1b0>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d119      	bne.n	800080a <getKeyInput+0xd2>
				TimeOutForKeyPress = 200;
 80007d6:	4b4d      	ldr	r3, [pc, #308]	; (800090c <getKeyInput+0x1d4>)
 80007d8:	22c8      	movs	r2, #200	; 0xc8
 80007da:	601a      	str	r2, [r3, #0]
				button1_flag = 1;
 80007dc:	4b4c      	ldr	r3, [pc, #304]	; (8000910 <getKeyInput+0x1d8>)
 80007de:	2201      	movs	r2, #1
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	e012      	b.n	800080a <getKeyInput+0xd2>
			}

		} else {
			TimeOutForKeyPress--;
 80007e4:	4b49      	ldr	r3, [pc, #292]	; (800090c <getKeyInput+0x1d4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	3b01      	subs	r3, #1
 80007ea:	4a48      	ldr	r2, [pc, #288]	; (800090c <getKeyInput+0x1d4>)
 80007ec:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress == 0) {
 80007ee:	4b47      	ldr	r3, [pc, #284]	; (800090c <getKeyInput+0x1d4>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d109      	bne.n	800080a <getKeyInput+0xd2>
				TimeOutForKeyPress = 200;
 80007f6:	4b45      	ldr	r3, [pc, #276]	; (800090c <getKeyInput+0x1d4>)
 80007f8:	22c8      	movs	r2, #200	; 0xc8
 80007fa:	601a      	str	r2, [r3, #0]
				if (KeyRegB1_2 == PRESSED_STATE) {
 80007fc:	4b3a      	ldr	r3, [pc, #232]	; (80008e8 <getKeyInput+0x1b0>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d102      	bne.n	800080a <getKeyInput+0xd2>
					button1_flag = 1;
 8000804:	4b42      	ldr	r3, [pc, #264]	; (8000910 <getKeyInput+0x1d8>)
 8000806:	2201      	movs	r2, #1
 8000808:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
	// xu ly button 2
	if ((KeyRegB2_0 == KeyRegB2_1) && (KeyRegB2_1 == KeyRegB2_2)) {
 800080a:	4b3a      	ldr	r3, [pc, #232]	; (80008f4 <getKeyInput+0x1bc>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	4b38      	ldr	r3, [pc, #224]	; (80008f0 <getKeyInput+0x1b8>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	429a      	cmp	r2, r3
 8000814:	d12d      	bne.n	8000872 <getKeyInput+0x13a>
 8000816:	4b36      	ldr	r3, [pc, #216]	; (80008f0 <getKeyInput+0x1b8>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	4b37      	ldr	r3, [pc, #220]	; (80008f8 <getKeyInput+0x1c0>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	429a      	cmp	r2, r3
 8000820:	d127      	bne.n	8000872 <getKeyInput+0x13a>
		if (KeyRegB2_3 != KeyRegB2_2) {
 8000822:	4b3c      	ldr	r3, [pc, #240]	; (8000914 <getKeyInput+0x1dc>)
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <getKeyInput+0x1c0>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	429a      	cmp	r2, r3
 800082c:	d00e      	beq.n	800084c <getKeyInput+0x114>
			KeyRegB2_3 = KeyRegB2_2;
 800082e:	4b32      	ldr	r3, [pc, #200]	; (80008f8 <getKeyInput+0x1c0>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a38      	ldr	r2, [pc, #224]	; (8000914 <getKeyInput+0x1dc>)
 8000834:	6013      	str	r3, [r2, #0]

			if (KeyRegB2_2 == PRESSED_STATE) {
 8000836:	4b30      	ldr	r3, [pc, #192]	; (80008f8 <getKeyInput+0x1c0>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d119      	bne.n	8000872 <getKeyInput+0x13a>
				TimeOutForKeyPress = 200;
 800083e:	4b33      	ldr	r3, [pc, #204]	; (800090c <getKeyInput+0x1d4>)
 8000840:	22c8      	movs	r2, #200	; 0xc8
 8000842:	601a      	str	r2, [r3, #0]
				button2_flag = 1;
 8000844:	4b34      	ldr	r3, [pc, #208]	; (8000918 <getKeyInput+0x1e0>)
 8000846:	2201      	movs	r2, #1
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	e012      	b.n	8000872 <getKeyInput+0x13a>
			}

		} else {
			TimeOutForKeyPress--;
 800084c:	4b2f      	ldr	r3, [pc, #188]	; (800090c <getKeyInput+0x1d4>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	3b01      	subs	r3, #1
 8000852:	4a2e      	ldr	r2, [pc, #184]	; (800090c <getKeyInput+0x1d4>)
 8000854:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress == 0) {
 8000856:	4b2d      	ldr	r3, [pc, #180]	; (800090c <getKeyInput+0x1d4>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d109      	bne.n	8000872 <getKeyInput+0x13a>
				TimeOutForKeyPress = 200;
 800085e:	4b2b      	ldr	r3, [pc, #172]	; (800090c <getKeyInput+0x1d4>)
 8000860:	22c8      	movs	r2, #200	; 0xc8
 8000862:	601a      	str	r2, [r3, #0]
				if (KeyRegB2_2 == PRESSED_STATE) {
 8000864:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <getKeyInput+0x1c0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d102      	bne.n	8000872 <getKeyInput+0x13a>
					button2_flag = 1;
 800086c:	4b2a      	ldr	r3, [pc, #168]	; (8000918 <getKeyInput+0x1e0>)
 800086e:	2201      	movs	r2, #1
 8000870:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
	// xu ly button 3
	if ((KeyRegB3_0 == KeyRegB3_1) && (KeyRegB3_1 == KeyRegB3_2)) {
 8000872:	4b23      	ldr	r3, [pc, #140]	; (8000900 <getKeyInput+0x1c8>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	4b21      	ldr	r3, [pc, #132]	; (80008fc <getKeyInput+0x1c4>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	429a      	cmp	r2, r3
 800087c:	d12d      	bne.n	80008da <getKeyInput+0x1a2>
 800087e:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <getKeyInput+0x1c4>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	4b20      	ldr	r3, [pc, #128]	; (8000904 <getKeyInput+0x1cc>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	429a      	cmp	r2, r3
 8000888:	d127      	bne.n	80008da <getKeyInput+0x1a2>
		if (KeyRegB3_3 != KeyRegB3_2) {
 800088a:	4b24      	ldr	r3, [pc, #144]	; (800091c <getKeyInput+0x1e4>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <getKeyInput+0x1cc>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	429a      	cmp	r2, r3
 8000894:	d00e      	beq.n	80008b4 <getKeyInput+0x17c>
			KeyRegB3_3 = KeyRegB3_2;
 8000896:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <getKeyInput+0x1cc>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a20      	ldr	r2, [pc, #128]	; (800091c <getKeyInput+0x1e4>)
 800089c:	6013      	str	r3, [r2, #0]

			if (KeyRegB3_2 == PRESSED_STATE) {
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <getKeyInput+0x1cc>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d119      	bne.n	80008da <getKeyInput+0x1a2>
				TimeOutForKeyPress = 200;
 80008a6:	4b19      	ldr	r3, [pc, #100]	; (800090c <getKeyInput+0x1d4>)
 80008a8:	22c8      	movs	r2, #200	; 0xc8
 80008aa:	601a      	str	r2, [r3, #0]
				button3_flag = 1;
 80008ac:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <getKeyInput+0x1e8>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	601a      	str	r2, [r3, #0]
					button3_flag = 1;
				}
			}
		}
	}
}
 80008b2:	e012      	b.n	80008da <getKeyInput+0x1a2>
			TimeOutForKeyPress--;
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <getKeyInput+0x1d4>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	3b01      	subs	r3, #1
 80008ba:	4a14      	ldr	r2, [pc, #80]	; (800090c <getKeyInput+0x1d4>)
 80008bc:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress == 0) {
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <getKeyInput+0x1d4>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d109      	bne.n	80008da <getKeyInput+0x1a2>
				TimeOutForKeyPress = 200;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <getKeyInput+0x1d4>)
 80008c8:	22c8      	movs	r2, #200	; 0xc8
 80008ca:	601a      	str	r2, [r3, #0]
				if (KeyRegB3_2 == PRESSED_STATE) {
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <getKeyInput+0x1cc>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d102      	bne.n	80008da <getKeyInput+0x1a2>
					button3_flag = 1;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <getKeyInput+0x1e8>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	601a      	str	r2, [r3, #0]
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000004 	.word	0x20000004
 80008e4:	20000000 	.word	0x20000000
 80008e8:	20000008 	.word	0x20000008
 80008ec:	40010800 	.word	0x40010800
 80008f0:	20000014 	.word	0x20000014
 80008f4:	20000010 	.word	0x20000010
 80008f8:	20000018 	.word	0x20000018
 80008fc:	20000024 	.word	0x20000024
 8000900:	20000020 	.word	0x20000020
 8000904:	20000028 	.word	0x20000028
 8000908:	2000000c 	.word	0x2000000c
 800090c:	20000030 	.word	0x20000030
 8000910:	2000006c 	.word	0x2000006c
 8000914:	2000001c 	.word	0x2000001c
 8000918:	20000070 	.word	0x20000070
 800091c:	2000002c 	.word	0x2000002c
 8000920:	20000074 	.word	0x20000074

08000924 <fsm_automatic_run>:
 *
 *  Created on: Oct 25, 2024
 *      Author: Admin
 */
#include "fsm_automatic.h"
void fsm_automatic_run() {
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af02      	add	r7, sp, #8
	switch (status) {
 800092a:	4b54      	ldr	r3, [pc, #336]	; (8000a7c <fsm_automatic_run+0x158>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d002      	beq.n	8000938 <fsm_automatic_run+0x14>
 8000932:	2b01      	cmp	r3, #1
 8000934:	d04a      	beq.n	80009cc <fsm_automatic_run+0xa8>
			counter_sch = 2;
		}
		break;
	}

}
 8000936:	e09e      	b.n	8000a76 <fsm_automatic_run+0x152>
		init_time_traffic(time_red, time_green, time_yellow);
 8000938:	4b51      	ldr	r3, [pc, #324]	; (8000a80 <fsm_automatic_run+0x15c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a51      	ldr	r2, [pc, #324]	; (8000a84 <fsm_automatic_run+0x160>)
 800093e:	6811      	ldr	r1, [r2, #0]
 8000940:	4a51      	ldr	r2, [pc, #324]	; (8000a88 <fsm_automatic_run+0x164>)
 8000942:	6812      	ldr	r2, [r2, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fb3b 	bl	8000fc0 <init_time_traffic>
		init_traffic_light(RED_COLOR, RED_AUTO, time_red, GREEN_COLOR,
 800094a:	4b4d      	ldr	r3, [pc, #308]	; (8000a80 <fsm_automatic_run+0x15c>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	4b4d      	ldr	r3, [pc, #308]	; (8000a84 <fsm_automatic_run+0x160>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	9301      	str	r3, [sp, #4]
 8000954:	2306      	movs	r3, #6
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2317      	movs	r3, #23
 800095a:	2105      	movs	r1, #5
 800095c:	2016      	movs	r0, #22
 800095e:	f000 fd45 	bl	80013ec <init_traffic_light>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000962:	2201      	movs	r2, #1
 8000964:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000968:	4848      	ldr	r0, [pc, #288]	; (8000a8c <fsm_automatic_run+0x168>)
 800096a:	f001 fc9a 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000974:	4845      	ldr	r0, [pc, #276]	; (8000a8c <fsm_automatic_run+0x168>)
 8000976:	f001 fc94 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800097a:	2201      	movs	r2, #1
 800097c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000980:	4842      	ldr	r0, [pc, #264]	; (8000a8c <fsm_automatic_run+0x168>)
 8000982:	f001 fc8e 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800098c:	483f      	ldr	r0, [pc, #252]	; (8000a8c <fsm_automatic_run+0x168>)
 800098e:	f001 fc88 	bl	80022a2 <HAL_GPIO_WritePin>
		updateClockBuffer(time_green, time_red);
 8000992:	4b3c      	ldr	r3, [pc, #240]	; (8000a84 <fsm_automatic_run+0x160>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a3a      	ldr	r2, [pc, #232]	; (8000a80 <fsm_automatic_run+0x15c>)
 8000998:	6812      	ldr	r2, [r2, #0]
 800099a:	4611      	mov	r1, r2
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fbd9 	bl	8001154 <updateClockBuffer>
		if (isButton1Pressed() == 1) {
 80009a2:	f7ff fe93 	bl	80006cc <isButton1Pressed>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d161      	bne.n	8000a70 <fsm_automatic_run+0x14c>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009b2:	4836      	ldr	r0, [pc, #216]	; (8000a8c <fsm_automatic_run+0x168>)
 80009b4:	f001 fc75 	bl	80022a2 <HAL_GPIO_WritePin>
			display7SEG_North_South(1);
 80009b8:	2001      	movs	r0, #1
 80009ba:	f7ff fd0f 	bl	80003dc <display7SEG_North_South>
			status = MODE_1;
 80009be:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <fsm_automatic_run+0x158>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	601a      	str	r2, [r3, #0]
			counter_sch = 4;
 80009c4:	4b32      	ldr	r3, [pc, #200]	; (8000a90 <fsm_automatic_run+0x16c>)
 80009c6:	2204      	movs	r2, #4
 80009c8:	601a      	str	r2, [r3, #0]
		break;
 80009ca:	e051      	b.n	8000a70 <fsm_automatic_run+0x14c>
		if(counter_sch > 0){
 80009cc:	4b30      	ldr	r3, [pc, #192]	; (8000a90 <fsm_automatic_run+0x16c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	dd04      	ble.n	80009de <fsm_automatic_run+0xba>
			counter_sch--;
 80009d4:	4b2e      	ldr	r3, [pc, #184]	; (8000a90 <fsm_automatic_run+0x16c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	3b01      	subs	r3, #1
 80009da:	4a2d      	ldr	r2, [pc, #180]	; (8000a90 <fsm_automatic_run+0x16c>)
 80009dc:	6013      	str	r3, [r2, #0]
		if (counter_sch == 0) {
 80009de:	4b2c      	ldr	r3, [pc, #176]	; (8000a90 <fsm_automatic_run+0x16c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d119      	bne.n	8000a1a <fsm_automatic_run+0xf6>
			display();
 80009e6:	f000 fc5d 	bl	80012a4 <display>
			dem--;
 80009ea:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <fsm_automatic_run+0x170>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	4a28      	ldr	r2, [pc, #160]	; (8000a94 <fsm_automatic_run+0x170>)
 80009f2:	6013      	str	r3, [r2, #0]
			if (dem == 0) {
 80009f4:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <fsm_automatic_run+0x170>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d10b      	bne.n	8000a14 <fsm_automatic_run+0xf0>
				light_traffic_run(time_red, time_yellow, time_green);
 80009fc:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <fsm_automatic_run+0x15c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a21      	ldr	r2, [pc, #132]	; (8000a88 <fsm_automatic_run+0x164>)
 8000a02:	6811      	ldr	r1, [r2, #0]
 8000a04:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <fsm_automatic_run+0x160>)
 8000a06:	6812      	ldr	r2, [r2, #0]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 fd19 	bl	8001440 <light_traffic_run>
				dem = 4;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <fsm_automatic_run+0x170>)
 8000a10:	2204      	movs	r2, #4
 8000a12:	601a      	str	r2, [r3, #0]
			counter_sch = 1;
 8000a14:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <fsm_automatic_run+0x16c>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	601a      	str	r2, [r3, #0]
		if (isButton1Pressed() == 1) {
 8000a1a:	f7ff fe57 	bl	80006cc <isButton1Pressed>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d127      	bne.n	8000a74 <fsm_automatic_run+0x150>
			status = MODE_2;
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <fsm_automatic_run+0x158>)
 8000a26:	2202      	movs	r2, #2
 8000a28:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a30:	4816      	ldr	r0, [pc, #88]	; (8000a8c <fsm_automatic_run+0x168>)
 8000a32:	f001 fc36 	bl	80022a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3c:	4813      	ldr	r0, [pc, #76]	; (8000a8c <fsm_automatic_run+0x168>)
 8000a3e:	f001 fc30 	bl	80022a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a48:	4810      	ldr	r0, [pc, #64]	; (8000a8c <fsm_automatic_run+0x168>)
 8000a4a:	f001 fc2a 	bl	80022a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a54:	480d      	ldr	r0, [pc, #52]	; (8000a8c <fsm_automatic_run+0x168>)
 8000a56:	f001 fc24 	bl	80022a2 <HAL_GPIO_WritePin>
			display7SEG_North_South(2);
 8000a5a:	2002      	movs	r0, #2
 8000a5c:	f7ff fcbe 	bl	80003dc <display7SEG_North_South>
			clearLed();
 8000a60:	f000 fac8 	bl	8000ff4 <clearLed>
			clearLed1();
 8000a64:	f000 fb1e 	bl	80010a4 <clearLed1>
			counter_sch = 2;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <fsm_automatic_run+0x16c>)
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	601a      	str	r2, [r3, #0]
		break;
 8000a6e:	e001      	b.n	8000a74 <fsm_automatic_run+0x150>
		break;
 8000a70:	bf00      	nop
 8000a72:	e000      	b.n	8000a76 <fsm_automatic_run+0x152>
		break;
 8000a74:	bf00      	nop
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000084 	.word	0x20000084
 8000a80:	20000038 	.word	0x20000038
 8000a84:	2000003c 	.word	0x2000003c
 8000a88:	20000040 	.word	0x20000040
 8000a8c:	40010800 	.word	0x40010800
 8000a90:	200000b4 	.word	0x200000b4
 8000a94:	20000034 	.word	0x20000034

08000a98 <fsm_manual_run>:
 *
 *  Created on: Oct 26, 2024
 *      Author: Admin
 */
#include "fsm_manual.h"
void fsm_manual_run() {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	switch (status) {
 8000a9c:	4b7f      	ldr	r3, [pc, #508]	; (8000c9c <fsm_manual_run+0x204>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b04      	cmp	r3, #4
 8000aa2:	f000 80a5 	beq.w	8000bf0 <fsm_manual_run+0x158>
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	f300 80f5 	bgt.w	8000c96 <fsm_manual_run+0x1fe>
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d002      	beq.n	8000ab6 <fsm_manual_run+0x1e>
 8000ab0:	2b03      	cmp	r3, #3
 8000ab2:	d04f      	beq.n	8000b54 <fsm_manual_run+0xbc>
		}
		break;

	}

}
 8000ab4:	e0ef      	b.n	8000c96 <fsm_manual_run+0x1fe>
		if(counter_sch > 0){
 8000ab6:	4b7a      	ldr	r3, [pc, #488]	; (8000ca0 <fsm_manual_run+0x208>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	dd04      	ble.n	8000ac8 <fsm_manual_run+0x30>
			counter_sch --;
 8000abe:	4b78      	ldr	r3, [pc, #480]	; (8000ca0 <fsm_manual_run+0x208>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	4a76      	ldr	r2, [pc, #472]	; (8000ca0 <fsm_manual_run+0x208>)
 8000ac6:	6013      	str	r3, [r2, #0]
		if (counter_sch == 0) {
 8000ac8:	4b75      	ldr	r3, [pc, #468]	; (8000ca0 <fsm_manual_run+0x208>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d10a      	bne.n	8000ae6 <fsm_manual_run+0x4e>
			HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000ad0:	2104      	movs	r1, #4
 8000ad2:	4874      	ldr	r0, [pc, #464]	; (8000ca4 <fsm_manual_run+0x20c>)
 8000ad4:	f001 fbfd 	bl	80022d2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000ad8:	2120      	movs	r1, #32
 8000ada:	4872      	ldr	r0, [pc, #456]	; (8000ca4 <fsm_manual_run+0x20c>)
 8000adc:	f001 fbf9 	bl	80022d2 <HAL_GPIO_TogglePin>
			counter_sch = 2;
 8000ae0:	4b6f      	ldr	r3, [pc, #444]	; (8000ca0 <fsm_manual_run+0x208>)
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	601a      	str	r2, [r3, #0]
		if (isButton1Pressed() == 1) {
 8000ae6:	f7ff fdf1 	bl	80006cc <isButton1Pressed>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d124      	bne.n	8000b3a <fsm_manual_run+0xa2>
			status = MODE_3;
 8000af0:	4b6a      	ldr	r3, [pc, #424]	; (8000c9c <fsm_manual_run+0x204>)
 8000af2:	2203      	movs	r2, #3
 8000af4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000af6:	2201      	movs	r2, #1
 8000af8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000afc:	4869      	ldr	r0, [pc, #420]	; (8000ca4 <fsm_manual_run+0x20c>)
 8000afe:	f001 fbd0 	bl	80022a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b08:	4866      	ldr	r0, [pc, #408]	; (8000ca4 <fsm_manual_run+0x20c>)
 8000b0a:	f001 fbca 	bl	80022a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b14:	4863      	ldr	r0, [pc, #396]	; (8000ca4 <fsm_manual_run+0x20c>)
 8000b16:	f001 fbc4 	bl	80022a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b20:	4860      	ldr	r0, [pc, #384]	; (8000ca4 <fsm_manual_run+0x20c>)
 8000b22:	f001 fbbe 	bl	80022a2 <HAL_GPIO_WritePin>
			display7SEG_North_South(3);
 8000b26:	2003      	movs	r0, #3
 8000b28:	f7ff fc58 	bl	80003dc <display7SEG_North_South>
			clearLed();
 8000b2c:	f000 fa62 	bl	8000ff4 <clearLed>
			clearLed1();
 8000b30:	f000 fab8 	bl	80010a4 <clearLed1>
			counter_sch = 2;
 8000b34:	4b5a      	ldr	r3, [pc, #360]	; (8000ca0 <fsm_manual_run+0x208>)
 8000b36:	2202      	movs	r2, #2
 8000b38:	601a      	str	r2, [r3, #0]
		if (isButton2Pressed() == 1) {
 8000b3a:	f7ff fdd9 	bl	80006f0 <isButton2Pressed>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	f040 80a3 	bne.w	8000c8c <fsm_manual_run+0x1f4>
			status = RED_EDIT;
 8000b46:	4b55      	ldr	r3, [pc, #340]	; (8000c9c <fsm_manual_run+0x204>)
 8000b48:	2208      	movs	r2, #8
 8000b4a:	601a      	str	r2, [r3, #0]
			counter_sch = 1;
 8000b4c:	4b54      	ldr	r3, [pc, #336]	; (8000ca0 <fsm_manual_run+0x208>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
		break;
 8000b52:	e09b      	b.n	8000c8c <fsm_manual_run+0x1f4>
		if(counter_sch > 0){
 8000b54:	4b52      	ldr	r3, [pc, #328]	; (8000ca0 <fsm_manual_run+0x208>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	dd04      	ble.n	8000b66 <fsm_manual_run+0xce>
			counter_sch --;
 8000b5c:	4b50      	ldr	r3, [pc, #320]	; (8000ca0 <fsm_manual_run+0x208>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	3b01      	subs	r3, #1
 8000b62:	4a4f      	ldr	r2, [pc, #316]	; (8000ca0 <fsm_manual_run+0x208>)
 8000b64:	6013      	str	r3, [r2, #0]
		if (counter_sch == 0) {
 8000b66:	4b4e      	ldr	r3, [pc, #312]	; (8000ca0 <fsm_manual_run+0x208>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d10a      	bne.n	8000b84 <fsm_manual_run+0xec>
			HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8000b6e:	2110      	movs	r1, #16
 8000b70:	484c      	ldr	r0, [pc, #304]	; (8000ca4 <fsm_manual_run+0x20c>)
 8000b72:	f001 fbae 	bl	80022d2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	484a      	ldr	r0, [pc, #296]	; (8000ca4 <fsm_manual_run+0x20c>)
 8000b7a:	f001 fbaa 	bl	80022d2 <HAL_GPIO_TogglePin>
			counter_sch = 2;
 8000b7e:	4b48      	ldr	r3, [pc, #288]	; (8000ca0 <fsm_manual_run+0x208>)
 8000b80:	2202      	movs	r2, #2
 8000b82:	601a      	str	r2, [r3, #0]
		if (isButton1Pressed() == 1) {
 8000b84:	f7ff fda2 	bl	80006cc <isButton1Pressed>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d124      	bne.n	8000bd8 <fsm_manual_run+0x140>
			status = MODE_4;
 8000b8e:	4b43      	ldr	r3, [pc, #268]	; (8000c9c <fsm_manual_run+0x204>)
 8000b90:	2204      	movs	r2, #4
 8000b92:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b9a:	4842      	ldr	r0, [pc, #264]	; (8000ca4 <fsm_manual_run+0x20c>)
 8000b9c:	f001 fb81 	bl	80022a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ba6:	483f      	ldr	r0, [pc, #252]	; (8000ca4 <fsm_manual_run+0x20c>)
 8000ba8:	f001 fb7b 	bl	80022a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb2:	483c      	ldr	r0, [pc, #240]	; (8000ca4 <fsm_manual_run+0x20c>)
 8000bb4:	f001 fb75 	bl	80022a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bbe:	4839      	ldr	r0, [pc, #228]	; (8000ca4 <fsm_manual_run+0x20c>)
 8000bc0:	f001 fb6f 	bl	80022a2 <HAL_GPIO_WritePin>
			display7SEG_North_South(4);
 8000bc4:	2004      	movs	r0, #4
 8000bc6:	f7ff fc09 	bl	80003dc <display7SEG_North_South>
			clearLed();
 8000bca:	f000 fa13 	bl	8000ff4 <clearLed>
			clearLed1();
 8000bce:	f000 fa69 	bl	80010a4 <clearLed1>
			counter_sch = 2;
 8000bd2:	4b33      	ldr	r3, [pc, #204]	; (8000ca0 <fsm_manual_run+0x208>)
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	601a      	str	r2, [r3, #0]
		if (isButton2Pressed() == 1) {
 8000bd8:	f7ff fd8a 	bl	80006f0 <isButton2Pressed>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d156      	bne.n	8000c90 <fsm_manual_run+0x1f8>
			status = GREEN_EDIT;
 8000be2:	4b2e      	ldr	r3, [pc, #184]	; (8000c9c <fsm_manual_run+0x204>)
 8000be4:	220a      	movs	r2, #10
 8000be6:	601a      	str	r2, [r3, #0]
			counter_sch = 1;
 8000be8:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <fsm_manual_run+0x208>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	601a      	str	r2, [r3, #0]
		break;
 8000bee:	e04f      	b.n	8000c90 <fsm_manual_run+0x1f8>
		if(counter_sch > 0){
 8000bf0:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <fsm_manual_run+0x208>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	dd04      	ble.n	8000c02 <fsm_manual_run+0x16a>
			counter_sch --;
 8000bf8:	4b29      	ldr	r3, [pc, #164]	; (8000ca0 <fsm_manual_run+0x208>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	4a28      	ldr	r2, [pc, #160]	; (8000ca0 <fsm_manual_run+0x208>)
 8000c00:	6013      	str	r3, [r2, #0]
		if (counter_sch == 0) {
 8000c02:	4b27      	ldr	r3, [pc, #156]	; (8000ca0 <fsm_manual_run+0x208>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d10a      	bne.n	8000c20 <fsm_manual_run+0x188>
			HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8000c0a:	2108      	movs	r1, #8
 8000c0c:	4825      	ldr	r0, [pc, #148]	; (8000ca4 <fsm_manual_run+0x20c>)
 8000c0e:	f001 fb60 	bl	80022d2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000c12:	2140      	movs	r1, #64	; 0x40
 8000c14:	4823      	ldr	r0, [pc, #140]	; (8000ca4 <fsm_manual_run+0x20c>)
 8000c16:	f001 fb5c 	bl	80022d2 <HAL_GPIO_TogglePin>
			counter_sch = 2;
 8000c1a:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <fsm_manual_run+0x208>)
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	601a      	str	r2, [r3, #0]
		if (isButton1Pressed() == 1) {
 8000c20:	f7ff fd54 	bl	80006cc <isButton1Pressed>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d124      	bne.n	8000c74 <fsm_manual_run+0x1dc>
			status = MODE_1;
 8000c2a:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <fsm_manual_run+0x204>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000c30:	2201      	movs	r2, #1
 8000c32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c36:	481b      	ldr	r0, [pc, #108]	; (8000ca4 <fsm_manual_run+0x20c>)
 8000c38:	f001 fb33 	bl	80022a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c42:	4818      	ldr	r0, [pc, #96]	; (8000ca4 <fsm_manual_run+0x20c>)
 8000c44:	f001 fb2d 	bl	80022a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c4e:	4815      	ldr	r0, [pc, #84]	; (8000ca4 <fsm_manual_run+0x20c>)
 8000c50:	f001 fb27 	bl	80022a2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c5a:	4812      	ldr	r0, [pc, #72]	; (8000ca4 <fsm_manual_run+0x20c>)
 8000c5c:	f001 fb21 	bl	80022a2 <HAL_GPIO_WritePin>
			display7SEG_North_South(1);
 8000c60:	2001      	movs	r0, #1
 8000c62:	f7ff fbbb 	bl	80003dc <display7SEG_North_South>
			clearLed();
 8000c66:	f000 f9c5 	bl	8000ff4 <clearLed>
			clearLed1();
 8000c6a:	f000 fa1b 	bl	80010a4 <clearLed1>
			counter_sch = 1;
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <fsm_manual_run+0x208>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	601a      	str	r2, [r3, #0]
		if (isButton2Pressed() == 1) {
 8000c74:	f7ff fd3c 	bl	80006f0 <isButton2Pressed>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d10a      	bne.n	8000c94 <fsm_manual_run+0x1fc>
			status = YELLOW_EDIT;
 8000c7e:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <fsm_manual_run+0x204>)
 8000c80:	220c      	movs	r2, #12
 8000c82:	601a      	str	r2, [r3, #0]
			counter_sch = 1;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <fsm_manual_run+0x208>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	601a      	str	r2, [r3, #0]
		break;
 8000c8a:	e003      	b.n	8000c94 <fsm_manual_run+0x1fc>
		break;
 8000c8c:	bf00      	nop
 8000c8e:	e002      	b.n	8000c96 <fsm_manual_run+0x1fe>
		break;
 8000c90:	bf00      	nop
 8000c92:	e000      	b.n	8000c96 <fsm_manual_run+0x1fe>
		break;
 8000c94:	bf00      	nop
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000084 	.word	0x20000084
 8000ca0:	200000b4 	.word	0x200000b4
 8000ca4:	40010800 	.word	0x40010800

08000ca8 <fsm_save_value_run>:
 *  Created on: Oct 27, 2024
 *      Author: Admin
 */

#include "fsm_save_value.h"
void fsm_save_value_run() {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	switch (status) {
 8000cac:	4b2e      	ldr	r3, [pc, #184]	; (8000d68 <fsm_save_value_run+0xc0>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b0d      	cmp	r3, #13
 8000cb2:	d038      	beq.n	8000d26 <fsm_save_value_run+0x7e>
 8000cb4:	2b0d      	cmp	r3, #13
 8000cb6:	dc54      	bgt.n	8000d62 <fsm_save_value_run+0xba>
 8000cb8:	2b09      	cmp	r3, #9
 8000cba:	d002      	beq.n	8000cc2 <fsm_save_value_run+0x1a>
 8000cbc:	2b0b      	cmp	r3, #11
 8000cbe:	d019      	beq.n	8000cf4 <fsm_save_value_run+0x4c>
		if (counter_sch == 0) {
			status = INIT;
		}
		break;
	}
}
 8000cc0:	e04f      	b.n	8000d62 <fsm_save_value_run+0xba>
		if(counter_sch > 0){
 8000cc2:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <fsm_save_value_run+0xc4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	dd04      	ble.n	8000cd4 <fsm_save_value_run+0x2c>
			counter_sch --;
 8000cca:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <fsm_save_value_run+0xc4>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	4a26      	ldr	r2, [pc, #152]	; (8000d6c <fsm_save_value_run+0xc4>)
 8000cd2:	6013      	str	r3, [r2, #0]
		time_red = time_red;
 8000cd4:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <fsm_save_value_run+0xc8>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a25      	ldr	r2, [pc, #148]	; (8000d70 <fsm_save_value_run+0xc8>)
 8000cda:	6013      	str	r3, [r2, #0]
		clearLed();
 8000cdc:	f000 f98a 	bl	8000ff4 <clearLed>
		clearLed1();
 8000ce0:	f000 f9e0 	bl	80010a4 <clearLed1>
		if (counter_sch == 0) {
 8000ce4:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <fsm_save_value_run+0xc4>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d135      	bne.n	8000d58 <fsm_save_value_run+0xb0>
			status = INIT;
 8000cec:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <fsm_save_value_run+0xc0>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
		break;
 8000cf2:	e031      	b.n	8000d58 <fsm_save_value_run+0xb0>
		if(counter_sch > 0){
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <fsm_save_value_run+0xc4>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	dd04      	ble.n	8000d06 <fsm_save_value_run+0x5e>
			counter_sch --;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <fsm_save_value_run+0xc4>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	4a1a      	ldr	r2, [pc, #104]	; (8000d6c <fsm_save_value_run+0xc4>)
 8000d04:	6013      	str	r3, [r2, #0]
		time_green = time_green;
 8000d06:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <fsm_save_value_run+0xcc>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a1a      	ldr	r2, [pc, #104]	; (8000d74 <fsm_save_value_run+0xcc>)
 8000d0c:	6013      	str	r3, [r2, #0]
		clearLed();
 8000d0e:	f000 f971 	bl	8000ff4 <clearLed>
		clearLed1();
 8000d12:	f000 f9c7 	bl	80010a4 <clearLed1>
		if (counter_sch == 0) {
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <fsm_save_value_run+0xc4>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d11e      	bne.n	8000d5c <fsm_save_value_run+0xb4>
			status = INIT;
 8000d1e:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <fsm_save_value_run+0xc0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
		break;
 8000d24:	e01a      	b.n	8000d5c <fsm_save_value_run+0xb4>
		if(counter_sch > 0){
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <fsm_save_value_run+0xc4>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	dd04      	ble.n	8000d38 <fsm_save_value_run+0x90>
			counter_sch --;
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <fsm_save_value_run+0xc4>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <fsm_save_value_run+0xc4>)
 8000d36:	6013      	str	r3, [r2, #0]
		time_yellow = time_yellow;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <fsm_save_value_run+0xd0>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0e      	ldr	r2, [pc, #56]	; (8000d78 <fsm_save_value_run+0xd0>)
 8000d3e:	6013      	str	r3, [r2, #0]
		clearLed();
 8000d40:	f000 f958 	bl	8000ff4 <clearLed>
		clearLed1();
 8000d44:	f000 f9ae 	bl	80010a4 <clearLed1>
		if (counter_sch == 0) {
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <fsm_save_value_run+0xc4>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d107      	bne.n	8000d60 <fsm_save_value_run+0xb8>
			status = INIT;
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <fsm_save_value_run+0xc0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
		break;
 8000d56:	e003      	b.n	8000d60 <fsm_save_value_run+0xb8>
		break;
 8000d58:	bf00      	nop
 8000d5a:	e002      	b.n	8000d62 <fsm_save_value_run+0xba>
		break;
 8000d5c:	bf00      	nop
 8000d5e:	e000      	b.n	8000d62 <fsm_save_value_run+0xba>
		break;
 8000d60:	bf00      	nop
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000084 	.word	0x20000084
 8000d6c:	200000b4 	.word	0x200000b4
 8000d70:	20000038 	.word	0x20000038
 8000d74:	2000003c 	.word	0x2000003c
 8000d78:	20000040 	.word	0x20000040

08000d7c <fsm_setting_run>:
 *
 *  Created on: Oct 27, 2024
 *      Author: Admin
 */
#include "fsm_setting.h"
void fsm_setting_run() {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	switch (status) {
 8000d80:	4b83      	ldr	r3, [pc, #524]	; (8000f90 <fsm_setting_run+0x214>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b0c      	cmp	r3, #12
 8000d86:	f000 80ab 	beq.w	8000ee0 <fsm_setting_run+0x164>
 8000d8a:	2b0c      	cmp	r3, #12
 8000d8c:	f300 80fe 	bgt.w	8000f8c <fsm_setting_run+0x210>
 8000d90:	2b08      	cmp	r3, #8
 8000d92:	d002      	beq.n	8000d9a <fsm_setting_run+0x1e>
 8000d94:	2b0a      	cmp	r3, #10
 8000d96:	d052      	beq.n	8000e3e <fsm_setting_run+0xc2>
			status = YELLOW_SAVE;
			counter_sch = 4;
		}
		break;
	}
}
 8000d98:	e0f8      	b.n	8000f8c <fsm_setting_run+0x210>
		if(counter_sch > 0){
 8000d9a:	4b7e      	ldr	r3, [pc, #504]	; (8000f94 <fsm_setting_run+0x218>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	dd04      	ble.n	8000dac <fsm_setting_run+0x30>
			counter_sch --;
 8000da2:	4b7c      	ldr	r3, [pc, #496]	; (8000f94 <fsm_setting_run+0x218>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	4a7a      	ldr	r2, [pc, #488]	; (8000f94 <fsm_setting_run+0x218>)
 8000daa:	6013      	str	r3, [r2, #0]
		if (counter_sch == 0) {
 8000dac:	4b79      	ldr	r3, [pc, #484]	; (8000f94 <fsm_setting_run+0x218>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d119      	bne.n	8000de8 <fsm_setting_run+0x6c>
			dem_red++;
 8000db4:	4b78      	ldr	r3, [pc, #480]	; (8000f98 <fsm_setting_run+0x21c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	3301      	adds	r3, #1
 8000dba:	4a77      	ldr	r2, [pc, #476]	; (8000f98 <fsm_setting_run+0x21c>)
 8000dbc:	6013      	str	r3, [r2, #0]
			display_value_edit(red_buffer);
 8000dbe:	4877      	ldr	r0, [pc, #476]	; (8000f9c <fsm_setting_run+0x220>)
 8000dc0:	f000 fad2 	bl	8001368 <display_value_edit>
			if (dem_red == 2) {
 8000dc4:	4b74      	ldr	r3, [pc, #464]	; (8000f98 <fsm_setting_run+0x21c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d10a      	bne.n	8000de2 <fsm_setting_run+0x66>
				HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000dcc:	2104      	movs	r1, #4
 8000dce:	4874      	ldr	r0, [pc, #464]	; (8000fa0 <fsm_setting_run+0x224>)
 8000dd0:	f001 fa7f 	bl	80022d2 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000dd4:	2120      	movs	r1, #32
 8000dd6:	4872      	ldr	r0, [pc, #456]	; (8000fa0 <fsm_setting_run+0x224>)
 8000dd8:	f001 fa7b 	bl	80022d2 <HAL_GPIO_TogglePin>
				dem_red = 0;
 8000ddc:	4b6e      	ldr	r3, [pc, #440]	; (8000f98 <fsm_setting_run+0x21c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
			counter_sch = 1;
 8000de2:	4b6c      	ldr	r3, [pc, #432]	; (8000f94 <fsm_setting_run+0x218>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	601a      	str	r2, [r3, #0]
		if (isButton2Pressed() == 1) {
 8000de8:	f7ff fc82 	bl	80006f0 <isButton2Pressed>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d113      	bne.n	8000e1a <fsm_setting_run+0x9e>
			if (time_red < 7 || time_red > 0) {
 8000df2:	4b6c      	ldr	r3, [pc, #432]	; (8000fa4 <fsm_setting_run+0x228>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	dd03      	ble.n	8000e02 <fsm_setting_run+0x86>
 8000dfa:	4b6a      	ldr	r3, [pc, #424]	; (8000fa4 <fsm_setting_run+0x228>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	dd0b      	ble.n	8000e1a <fsm_setting_run+0x9e>
				time_red++;
 8000e02:	4b68      	ldr	r3, [pc, #416]	; (8000fa4 <fsm_setting_run+0x228>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	3301      	adds	r3, #1
 8000e08:	4a66      	ldr	r2, [pc, #408]	; (8000fa4 <fsm_setting_run+0x228>)
 8000e0a:	6013      	str	r3, [r2, #0]
				if (time_red == 7) {
 8000e0c:	4b65      	ldr	r3, [pc, #404]	; (8000fa4 <fsm_setting_run+0x228>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b07      	cmp	r3, #7
 8000e12:	d102      	bne.n	8000e1a <fsm_setting_run+0x9e>
					time_red = 1;
 8000e14:	4b63      	ldr	r3, [pc, #396]	; (8000fa4 <fsm_setting_run+0x228>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	601a      	str	r2, [r3, #0]
		redBuffer(time_red);
 8000e1a:	4b62      	ldr	r3, [pc, #392]	; (8000fa4 <fsm_setting_run+0x228>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f9d4 	bl	80011cc <redBuffer>
		if (isButton3Pressed() == 1) {
 8000e24:	f7ff fc76 	bl	8000714 <isButton3Pressed>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	f040 80a9 	bne.w	8000f82 <fsm_setting_run+0x206>
			status = RED_SAVE;
 8000e30:	4b57      	ldr	r3, [pc, #348]	; (8000f90 <fsm_setting_run+0x214>)
 8000e32:	2209      	movs	r2, #9
 8000e34:	601a      	str	r2, [r3, #0]
			counter_sch = 4;
 8000e36:	4b57      	ldr	r3, [pc, #348]	; (8000f94 <fsm_setting_run+0x218>)
 8000e38:	2204      	movs	r2, #4
 8000e3a:	601a      	str	r2, [r3, #0]
		break;
 8000e3c:	e0a1      	b.n	8000f82 <fsm_setting_run+0x206>
		if(counter_sch > 0){
 8000e3e:	4b55      	ldr	r3, [pc, #340]	; (8000f94 <fsm_setting_run+0x218>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	dd04      	ble.n	8000e50 <fsm_setting_run+0xd4>
			counter_sch --;
 8000e46:	4b53      	ldr	r3, [pc, #332]	; (8000f94 <fsm_setting_run+0x218>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	4a51      	ldr	r2, [pc, #324]	; (8000f94 <fsm_setting_run+0x218>)
 8000e4e:	6013      	str	r3, [r2, #0]
		if (counter_sch == 0) {
 8000e50:	4b50      	ldr	r3, [pc, #320]	; (8000f94 <fsm_setting_run+0x218>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d119      	bne.n	8000e8c <fsm_setting_run+0x110>
			dem_green++;
 8000e58:	4b53      	ldr	r3, [pc, #332]	; (8000fa8 <fsm_setting_run+0x22c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	4a52      	ldr	r2, [pc, #328]	; (8000fa8 <fsm_setting_run+0x22c>)
 8000e60:	6013      	str	r3, [r2, #0]
			display_value_edit(green_buffer);
 8000e62:	4852      	ldr	r0, [pc, #328]	; (8000fac <fsm_setting_run+0x230>)
 8000e64:	f000 fa80 	bl	8001368 <display_value_edit>
			if (dem_green == 2) {
 8000e68:	4b4f      	ldr	r3, [pc, #316]	; (8000fa8 <fsm_setting_run+0x22c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d10a      	bne.n	8000e86 <fsm_setting_run+0x10a>
				HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8000e70:	2110      	movs	r1, #16
 8000e72:	484b      	ldr	r0, [pc, #300]	; (8000fa0 <fsm_setting_run+0x224>)
 8000e74:	f001 fa2d 	bl	80022d2 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000e78:	2180      	movs	r1, #128	; 0x80
 8000e7a:	4849      	ldr	r0, [pc, #292]	; (8000fa0 <fsm_setting_run+0x224>)
 8000e7c:	f001 fa29 	bl	80022d2 <HAL_GPIO_TogglePin>
				dem_green = 0;
 8000e80:	4b49      	ldr	r3, [pc, #292]	; (8000fa8 <fsm_setting_run+0x22c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
			counter_sch = 1;
 8000e86:	4b43      	ldr	r3, [pc, #268]	; (8000f94 <fsm_setting_run+0x218>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]
		if (isButton2Pressed() == 1) {
 8000e8c:	f7ff fc30 	bl	80006f0 <isButton2Pressed>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d113      	bne.n	8000ebe <fsm_setting_run+0x142>
			if (time_green < 7 || time_green > 0) {
 8000e96:	4b46      	ldr	r3, [pc, #280]	; (8000fb0 <fsm_setting_run+0x234>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b06      	cmp	r3, #6
 8000e9c:	dd03      	ble.n	8000ea6 <fsm_setting_run+0x12a>
 8000e9e:	4b44      	ldr	r3, [pc, #272]	; (8000fb0 <fsm_setting_run+0x234>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	dd0b      	ble.n	8000ebe <fsm_setting_run+0x142>
				time_green++;
 8000ea6:	4b42      	ldr	r3, [pc, #264]	; (8000fb0 <fsm_setting_run+0x234>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	4a40      	ldr	r2, [pc, #256]	; (8000fb0 <fsm_setting_run+0x234>)
 8000eae:	6013      	str	r3, [r2, #0]
				if (time_green == 7) {
 8000eb0:	4b3f      	ldr	r3, [pc, #252]	; (8000fb0 <fsm_setting_run+0x234>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b07      	cmp	r3, #7
 8000eb6:	d102      	bne.n	8000ebe <fsm_setting_run+0x142>
					time_green = 1;
 8000eb8:	4b3d      	ldr	r3, [pc, #244]	; (8000fb0 <fsm_setting_run+0x234>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]
		greenBuffer(time_green);
 8000ebe:	4b3c      	ldr	r3, [pc, #240]	; (8000fb0 <fsm_setting_run+0x234>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f9a6 	bl	8001214 <greenBuffer>
		if (isButton3Pressed() == 1) {
 8000ec8:	f7ff fc24 	bl	8000714 <isButton3Pressed>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d159      	bne.n	8000f86 <fsm_setting_run+0x20a>
			status = GREEN_SAVE;
 8000ed2:	4b2f      	ldr	r3, [pc, #188]	; (8000f90 <fsm_setting_run+0x214>)
 8000ed4:	220b      	movs	r2, #11
 8000ed6:	601a      	str	r2, [r3, #0]
			counter_sch = 4;
 8000ed8:	4b2e      	ldr	r3, [pc, #184]	; (8000f94 <fsm_setting_run+0x218>)
 8000eda:	2204      	movs	r2, #4
 8000edc:	601a      	str	r2, [r3, #0]
		break;
 8000ede:	e052      	b.n	8000f86 <fsm_setting_run+0x20a>
		if(counter_sch > 0){
 8000ee0:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <fsm_setting_run+0x218>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	dd04      	ble.n	8000ef2 <fsm_setting_run+0x176>
			counter_sch --;
 8000ee8:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <fsm_setting_run+0x218>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	4a29      	ldr	r2, [pc, #164]	; (8000f94 <fsm_setting_run+0x218>)
 8000ef0:	6013      	str	r3, [r2, #0]
		if (counter_sch == 0) {
 8000ef2:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <fsm_setting_run+0x218>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d119      	bne.n	8000f2e <fsm_setting_run+0x1b2>
			dem_yellow++;
 8000efa:	4b2e      	ldr	r3, [pc, #184]	; (8000fb4 <fsm_setting_run+0x238>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	3301      	adds	r3, #1
 8000f00:	4a2c      	ldr	r2, [pc, #176]	; (8000fb4 <fsm_setting_run+0x238>)
 8000f02:	6013      	str	r3, [r2, #0]
			display_value_edit(yellow_buffer);
 8000f04:	482c      	ldr	r0, [pc, #176]	; (8000fb8 <fsm_setting_run+0x23c>)
 8000f06:	f000 fa2f 	bl	8001368 <display_value_edit>
			if (dem_yellow == 2) {
 8000f0a:	4b2a      	ldr	r3, [pc, #168]	; (8000fb4 <fsm_setting_run+0x238>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d10a      	bne.n	8000f28 <fsm_setting_run+0x1ac>
				HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8000f12:	2108      	movs	r1, #8
 8000f14:	4822      	ldr	r0, [pc, #136]	; (8000fa0 <fsm_setting_run+0x224>)
 8000f16:	f001 f9dc 	bl	80022d2 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000f1a:	2140      	movs	r1, #64	; 0x40
 8000f1c:	4820      	ldr	r0, [pc, #128]	; (8000fa0 <fsm_setting_run+0x224>)
 8000f1e:	f001 f9d8 	bl	80022d2 <HAL_GPIO_TogglePin>
				dem_yellow = 0;
 8000f22:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <fsm_setting_run+0x238>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
			counter_sch = 1;
 8000f28:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <fsm_setting_run+0x218>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	601a      	str	r2, [r3, #0]
		if (isButton2Pressed() == 1) {
 8000f2e:	f7ff fbdf 	bl	80006f0 <isButton2Pressed>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d113      	bne.n	8000f60 <fsm_setting_run+0x1e4>
			if (time_yellow < 7 || time_yellow > 0) {
 8000f38:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <fsm_setting_run+0x240>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b06      	cmp	r3, #6
 8000f3e:	dd03      	ble.n	8000f48 <fsm_setting_run+0x1cc>
 8000f40:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <fsm_setting_run+0x240>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	dd0b      	ble.n	8000f60 <fsm_setting_run+0x1e4>
				time_yellow++;
 8000f48:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <fsm_setting_run+0x240>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	4a1b      	ldr	r2, [pc, #108]	; (8000fbc <fsm_setting_run+0x240>)
 8000f50:	6013      	str	r3, [r2, #0]
				if (time_yellow == 7) {
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <fsm_setting_run+0x240>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b07      	cmp	r3, #7
 8000f58:	d102      	bne.n	8000f60 <fsm_setting_run+0x1e4>
					time_yellow = 1;
 8000f5a:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <fsm_setting_run+0x240>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]
		yellowBuffer(time_yellow);
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <fsm_setting_run+0x240>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 f979 	bl	800125c <yellowBuffer>
		if (isButton3Pressed() == 1) {
 8000f6a:	f7ff fbd3 	bl	8000714 <isButton3Pressed>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d10a      	bne.n	8000f8a <fsm_setting_run+0x20e>
			status = YELLOW_SAVE;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <fsm_setting_run+0x214>)
 8000f76:	220d      	movs	r2, #13
 8000f78:	601a      	str	r2, [r3, #0]
			counter_sch = 4;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <fsm_setting_run+0x218>)
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	601a      	str	r2, [r3, #0]
		break;
 8000f80:	e003      	b.n	8000f8a <fsm_setting_run+0x20e>
		break;
 8000f82:	bf00      	nop
 8000f84:	e002      	b.n	8000f8c <fsm_setting_run+0x210>
		break;
 8000f86:	bf00      	nop
 8000f88:	e000      	b.n	8000f8c <fsm_setting_run+0x210>
		break;
 8000f8a:	bf00      	nop
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000084 	.word	0x20000084
 8000f94:	200000b4 	.word	0x200000b4
 8000f98:	20000078 	.word	0x20000078
 8000f9c:	2000009c 	.word	0x2000009c
 8000fa0:	40010800 	.word	0x40010800
 8000fa4:	20000038 	.word	0x20000038
 8000fa8:	2000007c 	.word	0x2000007c
 8000fac:	200000ac 	.word	0x200000ac
 8000fb0:	2000003c 	.word	0x2000003c
 8000fb4:	20000080 	.word	0x20000080
 8000fb8:	200000a4 	.word	0x200000a4
 8000fbc:	20000040 	.word	0x20000040

08000fc0 <init_time_traffic>:
int time_green = 3;
int time_yellow = 2;

int counter_sch = 0;

void init_time_traffic(int red, int green, int yellow) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
	time_red = red;
 8000fcc:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <init_time_traffic+0x28>)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6013      	str	r3, [r2, #0]
	;
	time_green = green;
 8000fd2:	4a06      	ldr	r2, [pc, #24]	; (8000fec <init_time_traffic+0x2c>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	6013      	str	r3, [r2, #0]
	time_yellow = yellow;
 8000fd8:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <init_time_traffic+0x30>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6013      	str	r3, [r2, #0]
}
 8000fde:	bf00      	nop
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	20000038 	.word	0x20000038
 8000fec:	2000003c 	.word	0x2000003c
 8000ff0:	20000040 	.word	0x20000040

08000ff4 <clearLed>:
void clearLed() {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2120      	movs	r1, #32
 8000ffc:	4807      	ldr	r0, [pc, #28]	; (800101c <clearLed+0x28>)
 8000ffe:	f001 f950 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	2180      	movs	r1, #128	; 0x80
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <clearLed+0x28>)
 8001008:	f001 f94b 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	2140      	movs	r1, #64	; 0x40
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <clearLed+0x28>)
 8001012:	f001 f946 	bl	80022a2 <HAL_GPIO_WritePin>
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40010800 	.word	0x40010800

08001020 <setLedRed>:
void setLedRed() {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	2120      	movs	r1, #32
 8001028:	4807      	ldr	r0, [pc, #28]	; (8001048 <setLedRed+0x28>)
 800102a:	f001 f93a 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2180      	movs	r1, #128	; 0x80
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <setLedRed+0x28>)
 8001034:	f001 f935 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	2140      	movs	r1, #64	; 0x40
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <setLedRed+0x28>)
 800103e:	f001 f930 	bl	80022a2 <HAL_GPIO_WritePin>
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40010800 	.word	0x40010800

0800104c <setLedGreen>:

void setLedGreen() {
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2120      	movs	r1, #32
 8001054:	4807      	ldr	r0, [pc, #28]	; (8001074 <setLedGreen+0x28>)
 8001056:	f001 f924 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800105a:	2201      	movs	r2, #1
 800105c:	2180      	movs	r1, #128	; 0x80
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <setLedGreen+0x28>)
 8001060:	f001 f91f 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	2140      	movs	r1, #64	; 0x40
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <setLedGreen+0x28>)
 800106a:	f001 f91a 	bl	80022a2 <HAL_GPIO_WritePin>
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40010800 	.word	0x40010800

08001078 <setLedYellow>:

void setLedYellow() {
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2120      	movs	r1, #32
 8001080:	4807      	ldr	r0, [pc, #28]	; (80010a0 <setLedYellow+0x28>)
 8001082:	f001 f90e 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	2180      	movs	r1, #128	; 0x80
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <setLedYellow+0x28>)
 800108c:	f001 f909 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8001090:	2201      	movs	r2, #1
 8001092:	2140      	movs	r1, #64	; 0x40
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <setLedYellow+0x28>)
 8001096:	f001 f904 	bl	80022a2 <HAL_GPIO_WritePin>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40010800 	.word	0x40010800

080010a4 <clearLed1>:

void clearLed1() {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2104      	movs	r1, #4
 80010ac:	4807      	ldr	r0, [pc, #28]	; (80010cc <clearLed1+0x28>)
 80010ae:	f001 f8f8 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2110      	movs	r1, #16
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <clearLed1+0x28>)
 80010b8:	f001 f8f3 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	2108      	movs	r1, #8
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <clearLed1+0x28>)
 80010c2:	f001 f8ee 	bl	80022a2 <HAL_GPIO_WritePin>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40010800 	.word	0x40010800

080010d0 <setLedRed1>:
void setLedRed1() {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 80010d4:	2201      	movs	r2, #1
 80010d6:	2104      	movs	r1, #4
 80010d8:	4807      	ldr	r0, [pc, #28]	; (80010f8 <setLedRed1+0x28>)
 80010da:	f001 f8e2 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	2110      	movs	r1, #16
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <setLedRed1+0x28>)
 80010e4:	f001 f8dd 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2108      	movs	r1, #8
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <setLedRed1+0x28>)
 80010ee:	f001 f8d8 	bl	80022a2 <HAL_GPIO_WritePin>
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40010800 	.word	0x40010800

080010fc <setLedGreen1>:

void setLedGreen1() {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	2104      	movs	r1, #4
 8001104:	4807      	ldr	r0, [pc, #28]	; (8001124 <setLedGreen1+0x28>)
 8001106:	f001 f8cc 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	2110      	movs	r1, #16
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <setLedGreen1+0x28>)
 8001110:	f001 f8c7 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	2108      	movs	r1, #8
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <setLedGreen1+0x28>)
 800111a:	f001 f8c2 	bl	80022a2 <HAL_GPIO_WritePin>
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40010800 	.word	0x40010800

08001128 <setLedYellow1>:

void setLedYellow1() {
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	2104      	movs	r1, #4
 8001130:	4807      	ldr	r0, [pc, #28]	; (8001150 <setLedYellow1+0x28>)
 8001132:	f001 f8b6 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	2110      	movs	r1, #16
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <setLedYellow1+0x28>)
 800113c:	f001 f8b1 	bl	80022a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8001140:	2201      	movs	r2, #1
 8001142:	2108      	movs	r1, #8
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <setLedYellow1+0x28>)
 8001146:	f001 f8ac 	bl	80022a2 <HAL_GPIO_WritePin>
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40010800 	.word	0x40010800

08001154 <updateClockBuffer>:

void updateClockBuffer(int hour, int minute) {
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
	// Update the hour display
	led_buffer[0] = hour / 10;  // Tens digit of the hour
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a18      	ldr	r2, [pc, #96]	; (80011c4 <updateClockBuffer+0x70>)
 8001162:	fb82 1203 	smull	r1, r2, r2, r3
 8001166:	1092      	asrs	r2, r2, #2
 8001168:	17db      	asrs	r3, r3, #31
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	4a16      	ldr	r2, [pc, #88]	; (80011c8 <updateClockBuffer+0x74>)
 800116e:	6013      	str	r3, [r2, #0]
	led_buffer[1] = hour % 10;  // Units digit of the hour
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <updateClockBuffer+0x70>)
 8001174:	fb83 2301 	smull	r2, r3, r3, r1
 8001178:	109a      	asrs	r2, r3, #2
 800117a:	17cb      	asrs	r3, r1, #31
 800117c:	1ad2      	subs	r2, r2, r3
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	1aca      	subs	r2, r1, r3
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <updateClockBuffer+0x74>)
 800118a:	605a      	str	r2, [r3, #4]

	// Update the minute display
	led_buffer[2] = minute / 10;  // Tens digit of the minute
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <updateClockBuffer+0x70>)
 8001190:	fb82 1203 	smull	r1, r2, r2, r3
 8001194:	1092      	asrs	r2, r2, #2
 8001196:	17db      	asrs	r3, r3, #31
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <updateClockBuffer+0x74>)
 800119c:	6093      	str	r3, [r2, #8]
	led_buffer[3] = minute % 10;  // Units digit of the minute
 800119e:	6839      	ldr	r1, [r7, #0]
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <updateClockBuffer+0x70>)
 80011a2:	fb83 2301 	smull	r2, r3, r3, r1
 80011a6:	109a      	asrs	r2, r3, #2
 80011a8:	17cb      	asrs	r3, r1, #31
 80011aa:	1ad2      	subs	r2, r2, r3
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	1aca      	subs	r2, r1, r3
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <updateClockBuffer+0x74>)
 80011b8:	60da      	str	r2, [r3, #12]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	66666667 	.word	0x66666667
 80011c8:	2000008c 	.word	0x2000008c

080011cc <redBuffer>:
void redBuffer(int red) {
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	red_buffer[0] = red / 10;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a0d      	ldr	r2, [pc, #52]	; (800120c <redBuffer+0x40>)
 80011d8:	fb82 1203 	smull	r1, r2, r2, r3
 80011dc:	1092      	asrs	r2, r2, #2
 80011de:	17db      	asrs	r3, r3, #31
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <redBuffer+0x44>)
 80011e4:	6013      	str	r3, [r2, #0]
	red_buffer[1] = red % 10;
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <redBuffer+0x40>)
 80011ea:	fb83 2301 	smull	r2, r3, r3, r1
 80011ee:	109a      	asrs	r2, r3, #2
 80011f0:	17cb      	asrs	r3, r1, #31
 80011f2:	1ad2      	subs	r2, r2, r3
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	1aca      	subs	r2, r1, r3
 80011fe:	4b04      	ldr	r3, [pc, #16]	; (8001210 <redBuffer+0x44>)
 8001200:	605a      	str	r2, [r3, #4]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	66666667 	.word	0x66666667
 8001210:	2000009c 	.word	0x2000009c

08001214 <greenBuffer>:
void greenBuffer(int green) {
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	green_buffer[0] = green / 10;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a0d      	ldr	r2, [pc, #52]	; (8001254 <greenBuffer+0x40>)
 8001220:	fb82 1203 	smull	r1, r2, r2, r3
 8001224:	1092      	asrs	r2, r2, #2
 8001226:	17db      	asrs	r3, r3, #31
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <greenBuffer+0x44>)
 800122c:	6013      	str	r3, [r2, #0]
	green_buffer[1] = green % 10;
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <greenBuffer+0x40>)
 8001232:	fb83 2301 	smull	r2, r3, r3, r1
 8001236:	109a      	asrs	r2, r3, #2
 8001238:	17cb      	asrs	r3, r1, #31
 800123a:	1ad2      	subs	r2, r2, r3
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	1aca      	subs	r2, r1, r3
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <greenBuffer+0x44>)
 8001248:	605a      	str	r2, [r3, #4]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr
 8001254:	66666667 	.word	0x66666667
 8001258:	200000ac 	.word	0x200000ac

0800125c <yellowBuffer>:
void yellowBuffer(int yellow) {
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	yellow_buffer[0] = yellow / 10;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a0d      	ldr	r2, [pc, #52]	; (800129c <yellowBuffer+0x40>)
 8001268:	fb82 1203 	smull	r1, r2, r2, r3
 800126c:	1092      	asrs	r2, r2, #2
 800126e:	17db      	asrs	r3, r3, #31
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <yellowBuffer+0x44>)
 8001274:	6013      	str	r3, [r2, #0]
	yellow_buffer[1] = yellow % 10;
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <yellowBuffer+0x40>)
 800127a:	fb83 2301 	smull	r2, r3, r3, r1
 800127e:	109a      	asrs	r2, r3, #2
 8001280:	17cb      	asrs	r3, r1, #31
 8001282:	1ad2      	subs	r2, r2, r3
 8001284:	4613      	mov	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	1aca      	subs	r2, r1, r3
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <yellowBuffer+0x44>)
 8001290:	605a      	str	r2, [r3, #4]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	66666667 	.word	0x66666667
 80012a0:	200000a4 	.word	0x200000a4

080012a4 <display>:

void display() {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	switch (index_led) {
 80012a8:	4b2c      	ldr	r3, [pc, #176]	; (800135c <display+0xb8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d002      	beq.n	80012b6 <display+0x12>
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d023      	beq.n	80012fc <display+0x58>
 80012b4:	e045      	b.n	8001342 <display+0x9e>
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012bc:	4828      	ldr	r0, [pc, #160]	; (8001360 <display+0xbc>)
 80012be:	f000 fff0 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80012c2:	2201      	movs	r2, #1
 80012c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012c8:	4825      	ldr	r0, [pc, #148]	; (8001360 <display+0xbc>)
 80012ca:	f000 ffea 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d4:	4822      	ldr	r0, [pc, #136]	; (8001360 <display+0xbc>)
 80012d6:	f000 ffe4 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80012da:	2201      	movs	r2, #1
 80012dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012e0:	481f      	ldr	r0, [pc, #124]	; (8001360 <display+0xbc>)
 80012e2:	f000 ffde 	bl	80022a2 <HAL_GPIO_WritePin>
		display7SEG_North_South(led_buffer[0]);
 80012e6:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <display+0xc0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f876 	bl	80003dc <display7SEG_North_South>
		display7SEG_East_West(led_buffer[2]);
 80012f0:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <display+0xc0>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7fe ff29 	bl	800014c <display7SEG_East_West>
		break;
 80012fa:	e022      	b.n	8001342 <display+0x9e>
	case 1:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80012fc:	2201      	movs	r2, #1
 80012fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001302:	4817      	ldr	r0, [pc, #92]	; (8001360 <display+0xbc>)
 8001304:	f000 ffcd 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800130e:	4814      	ldr	r0, [pc, #80]	; (8001360 <display+0xbc>)
 8001310:	f000 ffc7 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001314:	2201      	movs	r2, #1
 8001316:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800131a:	4811      	ldr	r0, [pc, #68]	; (8001360 <display+0xbc>)
 800131c:	f000 ffc1 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001326:	480e      	ldr	r0, [pc, #56]	; (8001360 <display+0xbc>)
 8001328:	f000 ffbb 	bl	80022a2 <HAL_GPIO_WritePin>
		display7SEG_North_South(led_buffer[1]);
 800132c:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <display+0xc0>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f853 	bl	80003dc <display7SEG_North_South>
		display7SEG_East_West(led_buffer[3]);
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <display+0xc0>)
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	4618      	mov	r0, r3
 800133c:	f7fe ff06 	bl	800014c <display7SEG_East_West>
		break;
 8001340:	bf00      	nop
	}

	index_led = (index_led + 1) % 2;
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <display+0xb8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	3301      	adds	r3, #1
 8001348:	2b00      	cmp	r3, #0
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	bfb8      	it	lt
 8001350:	425b      	neglt	r3, r3
 8001352:	4a02      	ldr	r2, [pc, #8]	; (800135c <display+0xb8>)
 8001354:	6013      	str	r3, [r2, #0]
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000088 	.word	0x20000088
 8001360:	40010800 	.word	0x40010800
 8001364:	2000008c 	.word	0x2000008c

08001368 <display_value_edit>:

void display_value_edit(int led_buffer[2]) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	switch (index_led) {
 8001370:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <display_value_edit+0x7c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <display_value_edit+0x16>
 8001378:	2b01      	cmp	r3, #1
 800137a:	d012      	beq.n	80013a2 <display_value_edit+0x3a>
 800137c:	e024      	b.n	80013c8 <display_value_edit+0x60>
	case 0:
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001384:	4818      	ldr	r0, [pc, #96]	; (80013e8 <display_value_edit+0x80>)
 8001386:	f000 ff8c 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800138a:	2201      	movs	r2, #1
 800138c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001390:	4815      	ldr	r0, [pc, #84]	; (80013e8 <display_value_edit+0x80>)
 8001392:	f000 ff86 	bl	80022a2 <HAL_GPIO_WritePin>
		display7SEG_East_West(led_buffer[0]);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7fe fed6 	bl	800014c <display7SEG_East_West>
		break;
 80013a0:	e012      	b.n	80013c8 <display_value_edit+0x60>
	case 1:
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80013a2:	2201      	movs	r2, #1
 80013a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a8:	480f      	ldr	r0, [pc, #60]	; (80013e8 <display_value_edit+0x80>)
 80013aa:	f000 ff7a 	bl	80022a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013b4:	480c      	ldr	r0, [pc, #48]	; (80013e8 <display_value_edit+0x80>)
 80013b6:	f000 ff74 	bl	80022a2 <HAL_GPIO_WritePin>
		display7SEG_East_West(led_buffer[1]);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3304      	adds	r3, #4
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7fe fec3 	bl	800014c <display7SEG_East_West>
		break;
 80013c6:	bf00      	nop
	}

	index_led = (index_led + 1) % 2;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <display_value_edit+0x7c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	3301      	adds	r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	bfb8      	it	lt
 80013d6:	425b      	neglt	r3, r3
 80013d8:	4a02      	ldr	r2, [pc, #8]	; (80013e4 <display_value_edit+0x7c>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000088 	.word	0x20000088
 80013e8:	40010800 	.word	0x40010800

080013ec <init_traffic_light>:
int led_status_north_south;
int count = 0;
int count1 = 0;

void init_traffic_light(int check_color_ew, int led_status_ew, int counter_ew,
		int check_color_ns, int led_status_ns, int counter_ns) {
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
 80013f8:	603b      	str	r3, [r7, #0]
	check_color_east_west = check_color_ew;
 80013fa:	4a0b      	ldr	r2, [pc, #44]	; (8001428 <init_traffic_light+0x3c>)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6013      	str	r3, [r2, #0]
	check_color_north_south = check_color_ns;
 8001400:	4a0a      	ldr	r2, [pc, #40]	; (800142c <init_traffic_light+0x40>)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	6013      	str	r3, [r2, #0]
	counter_north_south = counter_ns;
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <init_traffic_light+0x44>)
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	6013      	str	r3, [r2, #0]
	counter_east_west = counter_ew;
 800140c:	4a09      	ldr	r2, [pc, #36]	; (8001434 <init_traffic_light+0x48>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6013      	str	r3, [r2, #0]
	led_status_east_west = led_status_ew;
 8001412:	4a09      	ldr	r2, [pc, #36]	; (8001438 <init_traffic_light+0x4c>)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	6013      	str	r3, [r2, #0]
	led_status_north_south = led_status_ns;
 8001418:	4a08      	ldr	r2, [pc, #32]	; (800143c <init_traffic_light+0x50>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	6013      	str	r3, [r2, #0]
}
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	200000d8 	.word	0x200000d8
 800142c:	200000c8 	.word	0x200000c8
 8001430:	200000d4 	.word	0x200000d4
 8001434:	200000cc 	.word	0x200000cc
 8001438:	200000d0 	.word	0x200000d0
 800143c:	200000c4 	.word	0x200000c4

08001440 <light_traffic_run>:
void light_traffic_run(int time_red, int time_yellow, int time_green) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]

	//  thiet lap trang thai va thoi gian chuyen tin hieu he thong den 1 (led 7 doan o tren)
	if (counter_north_south <= 0 && check_color_north_south == GREEN_COLOR) {
 800144c:	4b80      	ldr	r3, [pc, #512]	; (8001650 <light_traffic_run+0x210>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	dc09      	bgt.n	8001468 <light_traffic_run+0x28>
 8001454:	4b7f      	ldr	r3, [pc, #508]	; (8001654 <light_traffic_run+0x214>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b17      	cmp	r3, #23
 800145a:	d105      	bne.n	8001468 <light_traffic_run+0x28>
		counter_north_south = time_yellow;
 800145c:	4a7c      	ldr	r2, [pc, #496]	; (8001650 <light_traffic_run+0x210>)
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	6013      	str	r3, [r2, #0]
		check_color_north_south = YELLOW_COLOR; // den vang
 8001462:	4b7c      	ldr	r3, [pc, #496]	; (8001654 <light_traffic_run+0x214>)
 8001464:	2218      	movs	r2, #24
 8001466:	601a      	str	r2, [r3, #0]
	}
	if (counter_north_south <= 0 && check_color_north_south == YELLOW_COLOR) {
 8001468:	4b79      	ldr	r3, [pc, #484]	; (8001650 <light_traffic_run+0x210>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	dc09      	bgt.n	8001484 <light_traffic_run+0x44>
 8001470:	4b78      	ldr	r3, [pc, #480]	; (8001654 <light_traffic_run+0x214>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b18      	cmp	r3, #24
 8001476:	d105      	bne.n	8001484 <light_traffic_run+0x44>
		counter_north_south = time_red;
 8001478:	4a75      	ldr	r2, [pc, #468]	; (8001650 <light_traffic_run+0x210>)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6013      	str	r3, [r2, #0]
		check_color_north_south = RED_COLOR; // den do
 800147e:	4b75      	ldr	r3, [pc, #468]	; (8001654 <light_traffic_run+0x214>)
 8001480:	2216      	movs	r2, #22
 8001482:	601a      	str	r2, [r3, #0]
	}

	if (counter_north_south <= 0 && check_color_north_south == RED_COLOR) {
 8001484:	4b72      	ldr	r3, [pc, #456]	; (8001650 <light_traffic_run+0x210>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	dc09      	bgt.n	80014a0 <light_traffic_run+0x60>
 800148c:	4b71      	ldr	r3, [pc, #452]	; (8001654 <light_traffic_run+0x214>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b16      	cmp	r3, #22
 8001492:	d105      	bne.n	80014a0 <light_traffic_run+0x60>
		counter_north_south = time_green;
 8001494:	4a6e      	ldr	r2, [pc, #440]	; (8001650 <light_traffic_run+0x210>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6013      	str	r3, [r2, #0]
		check_color_north_south = GREEN_COLOR; // den xanh
 800149a:	4b6e      	ldr	r3, [pc, #440]	; (8001654 <light_traffic_run+0x214>)
 800149c:	2217      	movs	r2, #23
 800149e:	601a      	str	r2, [r3, #0]
	}

	//  thiet lap trang thai va thoi gian chuyen tin hieu he thong den 2 (led 7 doan o duoi)
	if (counter_east_west <= 0 && check_color_east_west == RED_COLOR) {
 80014a0:	4b6d      	ldr	r3, [pc, #436]	; (8001658 <light_traffic_run+0x218>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	dc09      	bgt.n	80014bc <light_traffic_run+0x7c>
 80014a8:	4b6c      	ldr	r3, [pc, #432]	; (800165c <light_traffic_run+0x21c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b16      	cmp	r3, #22
 80014ae:	d105      	bne.n	80014bc <light_traffic_run+0x7c>
		counter_east_west = time_green;
 80014b0:	4a69      	ldr	r2, [pc, #420]	; (8001658 <light_traffic_run+0x218>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6013      	str	r3, [r2, #0]
		check_color_east_west = GREEN_COLOR; // den xanh
 80014b6:	4b69      	ldr	r3, [pc, #420]	; (800165c <light_traffic_run+0x21c>)
 80014b8:	2217      	movs	r2, #23
 80014ba:	601a      	str	r2, [r3, #0]
	}
	if (counter_east_west <= 0 && check_color_east_west == GREEN_COLOR) {
 80014bc:	4b66      	ldr	r3, [pc, #408]	; (8001658 <light_traffic_run+0x218>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	dc09      	bgt.n	80014d8 <light_traffic_run+0x98>
 80014c4:	4b65      	ldr	r3, [pc, #404]	; (800165c <light_traffic_run+0x21c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b17      	cmp	r3, #23
 80014ca:	d105      	bne.n	80014d8 <light_traffic_run+0x98>
		counter_east_west = time_yellow;
 80014cc:	4a62      	ldr	r2, [pc, #392]	; (8001658 <light_traffic_run+0x218>)
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	6013      	str	r3, [r2, #0]
		check_color_east_west = YELLOW_COLOR; // den vang
 80014d2:	4b62      	ldr	r3, [pc, #392]	; (800165c <light_traffic_run+0x21c>)
 80014d4:	2218      	movs	r2, #24
 80014d6:	601a      	str	r2, [r3, #0]
	}
	if (counter_east_west <= 0 && check_color_east_west == YELLOW_COLOR) {
 80014d8:	4b5f      	ldr	r3, [pc, #380]	; (8001658 <light_traffic_run+0x218>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	dc09      	bgt.n	80014f4 <light_traffic_run+0xb4>
 80014e0:	4b5e      	ldr	r3, [pc, #376]	; (800165c <light_traffic_run+0x21c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b18      	cmp	r3, #24
 80014e6:	d105      	bne.n	80014f4 <light_traffic_run+0xb4>
		counter_east_west = time_red;
 80014e8:	4a5b      	ldr	r2, [pc, #364]	; (8001658 <light_traffic_run+0x218>)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6013      	str	r3, [r2, #0]
		check_color_east_west = RED_COLOR; // den do
 80014ee:	4b5b      	ldr	r3, [pc, #364]	; (800165c <light_traffic_run+0x21c>)
 80014f0:	2216      	movs	r2, #22
 80014f2:	601a      	str	r2, [r3, #0]

//		// hien thi led 7 doan he thong den 1
//		display7SEG_North_South(counter_north_south--);
//		// hien thi led 7 doan he thong den 2
//		display7SEG_East_West(counter_east_west--);
	updateClockBuffer(counter_north_south--, counter_east_west--);
 80014f4:	4b56      	ldr	r3, [pc, #344]	; (8001650 <light_traffic_run+0x210>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	1e5a      	subs	r2, r3, #1
 80014fa:	4955      	ldr	r1, [pc, #340]	; (8001650 <light_traffic_run+0x210>)
 80014fc:	600a      	str	r2, [r1, #0]
 80014fe:	4a56      	ldr	r2, [pc, #344]	; (8001658 <light_traffic_run+0x218>)
 8001500:	6812      	ldr	r2, [r2, #0]
 8001502:	1e51      	subs	r1, r2, #1
 8001504:	4854      	ldr	r0, [pc, #336]	; (8001658 <light_traffic_run+0x218>)
 8001506:	6001      	str	r1, [r0, #0]
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fe22 	bl	8001154 <updateClockBuffer>

	// dieu khien chuyen tin hieu he thong  den 1 (led 7 doan o tren)
	if (led_status_north_south == GREEN_AUTO) {
 8001510:	4b53      	ldr	r3, [pc, #332]	; (8001660 <light_traffic_run+0x220>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b06      	cmp	r3, #6
 8001516:	d106      	bne.n	8001526 <light_traffic_run+0xe6>
		setLedGreen1();
 8001518:	f7ff fdf0 	bl	80010fc <setLedGreen1>
		count1++;
 800151c:	4b51      	ldr	r3, [pc, #324]	; (8001664 <light_traffic_run+0x224>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	3301      	adds	r3, #1
 8001522:	4a50      	ldr	r2, [pc, #320]	; (8001664 <light_traffic_run+0x224>)
 8001524:	6013      	str	r3, [r2, #0]
	}
	if (led_status_north_south == YELLOW_AUTO) {
 8001526:	4b4e      	ldr	r3, [pc, #312]	; (8001660 <light_traffic_run+0x220>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b07      	cmp	r3, #7
 800152c:	d106      	bne.n	800153c <light_traffic_run+0xfc>
		setLedYellow1();
 800152e:	f7ff fdfb 	bl	8001128 <setLedYellow1>
		count1++;
 8001532:	4b4c      	ldr	r3, [pc, #304]	; (8001664 <light_traffic_run+0x224>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	3301      	adds	r3, #1
 8001538:	4a4a      	ldr	r2, [pc, #296]	; (8001664 <light_traffic_run+0x224>)
 800153a:	6013      	str	r3, [r2, #0]
	}
	if (led_status_north_south == RED_AUTO) {
 800153c:	4b48      	ldr	r3, [pc, #288]	; (8001660 <light_traffic_run+0x220>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b05      	cmp	r3, #5
 8001542:	d106      	bne.n	8001552 <light_traffic_run+0x112>
		setLedRed1();
 8001544:	f7ff fdc4 	bl	80010d0 <setLedRed1>
		count1++;
 8001548:	4b46      	ldr	r3, [pc, #280]	; (8001664 <light_traffic_run+0x224>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	3301      	adds	r3, #1
 800154e:	4a45      	ldr	r2, [pc, #276]	; (8001664 <light_traffic_run+0x224>)
 8001550:	6013      	str	r3, [r2, #0]
	}
	if (count1 == time_green && led_status_north_south == GREEN_AUTO) {
 8001552:	4b44      	ldr	r3, [pc, #272]	; (8001664 <light_traffic_run+0x224>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	429a      	cmp	r2, r3
 800155a:	d109      	bne.n	8001570 <light_traffic_run+0x130>
 800155c:	4b40      	ldr	r3, [pc, #256]	; (8001660 <light_traffic_run+0x220>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b06      	cmp	r3, #6
 8001562:	d105      	bne.n	8001570 <light_traffic_run+0x130>
		led_status_north_south = YELLOW_AUTO;
 8001564:	4b3e      	ldr	r3, [pc, #248]	; (8001660 <light_traffic_run+0x220>)
 8001566:	2207      	movs	r2, #7
 8001568:	601a      	str	r2, [r3, #0]
		count1 = 0;
 800156a:	4b3e      	ldr	r3, [pc, #248]	; (8001664 <light_traffic_run+0x224>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
	}
	if (count1 == time_yellow && led_status_north_south == YELLOW_AUTO) {
 8001570:	4b3c      	ldr	r3, [pc, #240]	; (8001664 <light_traffic_run+0x224>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	429a      	cmp	r2, r3
 8001578:	d109      	bne.n	800158e <light_traffic_run+0x14e>
 800157a:	4b39      	ldr	r3, [pc, #228]	; (8001660 <light_traffic_run+0x220>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b07      	cmp	r3, #7
 8001580:	d105      	bne.n	800158e <light_traffic_run+0x14e>
		led_status_north_south = RED_AUTO;
 8001582:	4b37      	ldr	r3, [pc, #220]	; (8001660 <light_traffic_run+0x220>)
 8001584:	2205      	movs	r2, #5
 8001586:	601a      	str	r2, [r3, #0]
		count1 = 0;
 8001588:	4b36      	ldr	r3, [pc, #216]	; (8001664 <light_traffic_run+0x224>)
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
	}
	if (count1 == time_red && led_status_north_south == RED_AUTO) {
 800158e:	4b35      	ldr	r3, [pc, #212]	; (8001664 <light_traffic_run+0x224>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	429a      	cmp	r2, r3
 8001596:	d109      	bne.n	80015ac <light_traffic_run+0x16c>
 8001598:	4b31      	ldr	r3, [pc, #196]	; (8001660 <light_traffic_run+0x220>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b05      	cmp	r3, #5
 800159e:	d105      	bne.n	80015ac <light_traffic_run+0x16c>
		led_status_north_south = GREEN_AUTO;
 80015a0:	4b2f      	ldr	r3, [pc, #188]	; (8001660 <light_traffic_run+0x220>)
 80015a2:	2206      	movs	r2, #6
 80015a4:	601a      	str	r2, [r3, #0]
		count1 = 0;
 80015a6:	4b2f      	ldr	r3, [pc, #188]	; (8001664 <light_traffic_run+0x224>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
	}
	// dieu khien chuyen tin hieu he thong  den 2 ( led 7 doan o duoi)
	if (led_status_east_west == RED_AUTO) {
 80015ac:	4b2e      	ldr	r3, [pc, #184]	; (8001668 <light_traffic_run+0x228>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b05      	cmp	r3, #5
 80015b2:	d106      	bne.n	80015c2 <light_traffic_run+0x182>
		setLedRed();
 80015b4:	f7ff fd34 	bl	8001020 <setLedRed>
		count++;
 80015b8:	4b2c      	ldr	r3, [pc, #176]	; (800166c <light_traffic_run+0x22c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	4a2b      	ldr	r2, [pc, #172]	; (800166c <light_traffic_run+0x22c>)
 80015c0:	6013      	str	r3, [r2, #0]
	}
	if (led_status_east_west == YELLOW_AUTO) {
 80015c2:	4b29      	ldr	r3, [pc, #164]	; (8001668 <light_traffic_run+0x228>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b07      	cmp	r3, #7
 80015c8:	d106      	bne.n	80015d8 <light_traffic_run+0x198>
		setLedYellow();
 80015ca:	f7ff fd55 	bl	8001078 <setLedYellow>
		count++;
 80015ce:	4b27      	ldr	r3, [pc, #156]	; (800166c <light_traffic_run+0x22c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	3301      	adds	r3, #1
 80015d4:	4a25      	ldr	r2, [pc, #148]	; (800166c <light_traffic_run+0x22c>)
 80015d6:	6013      	str	r3, [r2, #0]
	}
	if (led_status_east_west == GREEN_AUTO) {
 80015d8:	4b23      	ldr	r3, [pc, #140]	; (8001668 <light_traffic_run+0x228>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b06      	cmp	r3, #6
 80015de:	d106      	bne.n	80015ee <light_traffic_run+0x1ae>
		setLedGreen();
 80015e0:	f7ff fd34 	bl	800104c <setLedGreen>
		count++;
 80015e4:	4b21      	ldr	r3, [pc, #132]	; (800166c <light_traffic_run+0x22c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	3301      	adds	r3, #1
 80015ea:	4a20      	ldr	r2, [pc, #128]	; (800166c <light_traffic_run+0x22c>)
 80015ec:	6013      	str	r3, [r2, #0]
	}
	if (count == time_red && led_status_east_west == RED_AUTO) {
 80015ee:	4b1f      	ldr	r3, [pc, #124]	; (800166c <light_traffic_run+0x22c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d109      	bne.n	800160c <light_traffic_run+0x1cc>
 80015f8:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <light_traffic_run+0x228>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b05      	cmp	r3, #5
 80015fe:	d105      	bne.n	800160c <light_traffic_run+0x1cc>
		led_status_east_west = GREEN_AUTO;
 8001600:	4b19      	ldr	r3, [pc, #100]	; (8001668 <light_traffic_run+0x228>)
 8001602:	2206      	movs	r2, #6
 8001604:	601a      	str	r2, [r3, #0]
		count = 0;
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <light_traffic_run+0x22c>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
	}
	if (count == time_green && led_status_east_west == GREEN_AUTO) {
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <light_traffic_run+0x22c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	429a      	cmp	r2, r3
 8001614:	d109      	bne.n	800162a <light_traffic_run+0x1ea>
 8001616:	4b14      	ldr	r3, [pc, #80]	; (8001668 <light_traffic_run+0x228>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b06      	cmp	r3, #6
 800161c:	d105      	bne.n	800162a <light_traffic_run+0x1ea>
		led_status_east_west = YELLOW_AUTO;
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <light_traffic_run+0x228>)
 8001620:	2207      	movs	r2, #7
 8001622:	601a      	str	r2, [r3, #0]
		count = 0;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <light_traffic_run+0x22c>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
	}
	if (count == time_yellow && led_status_east_west == YELLOW_AUTO) {
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <light_traffic_run+0x22c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	429a      	cmp	r2, r3
 8001632:	d109      	bne.n	8001648 <light_traffic_run+0x208>
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <light_traffic_run+0x228>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b07      	cmp	r3, #7
 800163a:	d105      	bne.n	8001648 <light_traffic_run+0x208>
		led_status_east_west = RED_AUTO;
 800163c:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <light_traffic_run+0x228>)
 800163e:	2205      	movs	r2, #5
 8001640:	601a      	str	r2, [r3, #0]
		count = 0;
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <light_traffic_run+0x22c>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
	}

}
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200000d4 	.word	0x200000d4
 8001654:	200000c8 	.word	0x200000c8
 8001658:	200000cc 	.word	0x200000cc
 800165c:	200000d8 	.word	0x200000d8
 8001660:	200000c4 	.word	0x200000c4
 8001664:	200000bc 	.word	0x200000bc
 8001668:	200000d0 	.word	0x200000d0
 800166c:	200000b8 	.word	0x200000b8

08001670 <main>:
  * @retval int
  */


int main(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001674:	f000 fb14 	bl	8001ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001678:	f000 f828 	bl	80016cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800167c:	f000 f8ae 	bl	80017dc <MX_GPIO_Init>
  MX_TIM2_Init();
 8001680:	f000 f860 	bl	8001744 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 8001684:	480c      	ldr	r0, [pc, #48]	; (80016b8 <main+0x48>)
 8001686:	f001 fa69 	bl	8002b5c <HAL_TIM_Base_Start_IT>
//HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,GPIO_PIN_SET);
//HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,GPIO_PIN_SET);
//HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,GPIO_PIN_SET);
//HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,GPIO_PIN_SET);
//updateClockBuffer(3, 5);
SCH_Add_Task(fsm_automatic_run, 25, 25);
 800168a:	2219      	movs	r2, #25
 800168c:	2119      	movs	r1, #25
 800168e:	480b      	ldr	r0, [pc, #44]	; (80016bc <main+0x4c>)
 8001690:	f000 f94c 	bl	800192c <SCH_Add_Task>
SCH_Add_Task(fsm_manual_run, 25, 25);
 8001694:	2219      	movs	r2, #25
 8001696:	2119      	movs	r1, #25
 8001698:	4809      	ldr	r0, [pc, #36]	; (80016c0 <main+0x50>)
 800169a:	f000 f947 	bl	800192c <SCH_Add_Task>
SCH_Add_Task(fsm_save_value_run, 25, 25);
 800169e:	2219      	movs	r2, #25
 80016a0:	2119      	movs	r1, #25
 80016a2:	4808      	ldr	r0, [pc, #32]	; (80016c4 <main+0x54>)
 80016a4:	f000 f942 	bl	800192c <SCH_Add_Task>
SCH_Add_Task(fsm_setting_run, 25, 25);
 80016a8:	2219      	movs	r2, #25
 80016aa:	2119      	movs	r1, #25
 80016ac:	4806      	ldr	r0, [pc, #24]	; (80016c8 <main+0x58>)
 80016ae:	f000 f93d 	bl	800192c <SCH_Add_Task>
  {
//	  fsm_automatic_run();
//      fsm_manual_run();
//      fsm_setting_run();
//      fsm_save_value_run();
	   SCH_Dispatch_Tasks();
 80016b2:	f000 f9f1 	bl	8001a98 <SCH_Dispatch_Tasks>
 80016b6:	e7fc      	b.n	80016b2 <main+0x42>
 80016b8:	200000dc 	.word	0x200000dc
 80016bc:	08000925 	.word	0x08000925
 80016c0:	08000a99 	.word	0x08000a99
 80016c4:	08000ca9 	.word	0x08000ca9
 80016c8:	08000d7d 	.word	0x08000d7d

080016cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b090      	sub	sp, #64	; 0x40
 80016d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d2:	f107 0318 	add.w	r3, r7, #24
 80016d6:	2228      	movs	r2, #40	; 0x28
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f001 fdee 	bl	80032bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f2:	2301      	movs	r3, #1
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016f6:	2310      	movs	r3, #16
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fe:	f107 0318 	add.w	r3, r7, #24
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fdfe 	bl	8002304 <HAL_RCC_OscConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800170e:	f000 f8d5 	bl	80018bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001712:	230f      	movs	r3, #15
 8001714:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f001 f86a 	bl	8002804 <HAL_RCC_ClockConfig>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001736:	f000 f8c1 	bl	80018bc <Error_Handler>
  }
}
 800173a:	bf00      	nop
 800173c:	3740      	adds	r7, #64	; 0x40
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174a:	f107 0308 	add.w	r3, r7, #8
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001758:	463b      	mov	r3, r7
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <MX_TIM2_Init+0x94>)
 8001762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001766:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001768:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <MX_TIM2_Init+0x94>)
 800176a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800176e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001770:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <MX_TIM2_Init+0x94>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001776:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <MX_TIM2_Init+0x94>)
 8001778:	2209      	movs	r2, #9
 800177a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177c:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <MX_TIM2_Init+0x94>)
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <MX_TIM2_Init+0x94>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001788:	4813      	ldr	r0, [pc, #76]	; (80017d8 <MX_TIM2_Init+0x94>)
 800178a:	f001 f997 	bl	8002abc <HAL_TIM_Base_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001794:	f000 f892 	bl	80018bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800179c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	4619      	mov	r1, r3
 80017a4:	480c      	ldr	r0, [pc, #48]	; (80017d8 <MX_TIM2_Init+0x94>)
 80017a6:	f001 fb15 	bl	8002dd4 <HAL_TIM_ConfigClockSource>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017b0:	f000 f884 	bl	80018bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b4:	2300      	movs	r3, #0
 80017b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017bc:	463b      	mov	r3, r7
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_TIM2_Init+0x94>)
 80017c2:	f001 fced 	bl	80031a0 <HAL_TIMEx_MasterConfigSynchronization>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017cc:	f000 f876 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200000dc 	.word	0x200000dc

080017dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e2:	f107 0308 	add.w	r3, r7, #8
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f0:	4b29      	ldr	r3, [pc, #164]	; (8001898 <MX_GPIO_Init+0xbc>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a28      	ldr	r2, [pc, #160]	; (8001898 <MX_GPIO_Init+0xbc>)
 80017f6:	f043 0304 	orr.w	r3, r3, #4
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b26      	ldr	r3, [pc, #152]	; (8001898 <MX_GPIO_Init+0xbc>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001808:	4b23      	ldr	r3, [pc, #140]	; (8001898 <MX_GPIO_Init+0xbc>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4a22      	ldr	r2, [pc, #136]	; (8001898 <MX_GPIO_Init+0xbc>)
 800180e:	f043 0308 	orr.w	r3, r3, #8
 8001812:	6193      	str	r3, [r2, #24]
 8001814:	4b20      	ldr	r3, [pc, #128]	; (8001898 <MX_GPIO_Init+0xbc>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	603b      	str	r3, [r7, #0]
 800181e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED_Pin
 8001820:	2200      	movs	r2, #0
 8001822:	f647 01fc 	movw	r1, #30972	; 0x78fc
 8001826:	481d      	ldr	r0, [pc, #116]	; (800189c <MX_GPIO_Init+0xc0>)
 8001828:	f000 fd3b 	bl	80022a2 <HAL_GPIO_WritePin>
                          |LED_YELLOW_Pin|LED_GREEN_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D1_Pin
 800182c:	2200      	movs	r2, #0
 800182e:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001832:	481b      	ldr	r0, [pc, #108]	; (80018a0 <MX_GPIO_Init+0xc4>)
 8001834:	f000 fd35 	bl	80022a2 <HAL_GPIO_WritePin>
                          |SEG_B1_Pin|SEG_C1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED_Pin
                           LED_YELLOW_Pin LED_GREEN_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED_Pin
 8001838:	f647 03fc 	movw	r3, #30972	; 0x78fc
 800183c:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_Pin|LED_GREEN_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183e:	2301      	movs	r3, #1
 8001840:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2302      	movs	r3, #2
 8001848:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	f107 0308 	add.w	r3, r7, #8
 800184e:	4619      	mov	r1, r3
 8001850:	4812      	ldr	r0, [pc, #72]	; (800189c <MX_GPIO_Init+0xc0>)
 8001852:	f000 fb95 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_A_Pin SEG_B_Pin SEG_C_Pin SEG_D1_Pin
                           SEG_E1_Pin SEG_F1_Pin SEG_G1_Pin SEG_D_Pin
                           SEG_E_Pin SEG_F_Pin SEG_G_Pin SEG_A1_Pin
                           SEG_B1_Pin SEG_C1_Pin */
  GPIO_InitStruct.Pin = SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D1_Pin
 8001856:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800185a:	60bb      	str	r3, [r7, #8]
                          |SEG_E1_Pin|SEG_F1_Pin|SEG_G1_Pin|SEG_D_Pin
                          |SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|SEG_A1_Pin
                          |SEG_B1_Pin|SEG_C1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185c:	2301      	movs	r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2302      	movs	r3, #2
 8001866:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001868:	f107 0308 	add.w	r3, r7, #8
 800186c:	4619      	mov	r1, r3
 800186e:	480c      	ldr	r0, [pc, #48]	; (80018a0 <MX_GPIO_Init+0xc4>)
 8001870:	f000 fb86 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8001874:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001878:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800187e:	2301      	movs	r3, #1
 8001880:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001882:	f107 0308 	add.w	r3, r7, #8
 8001886:	4619      	mov	r1, r3
 8001888:	4804      	ldr	r0, [pc, #16]	; (800189c <MX_GPIO_Init+0xc0>)
 800188a:	f000 fb79 	bl	8001f80 <HAL_GPIO_Init>

}
 800188e:	bf00      	nop
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000
 800189c:	40010800 	.word	0x40010800
 80018a0:	40010c00 	.word	0x40010c00

080018a4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
//	timerRun();
	getKeyInput();
 80018ac:	f7fe ff44 	bl	8000738 <getKeyInput>
	SCH_Update();
 80018b0:	f000 f892 	bl	80019d8 <SCH_Update>
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c0:	b672      	cpsid	i
}
 80018c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <Error_Handler+0x8>
	...

080018c8 <SCH_Delete_Task>:

void SCH_Init(void){
	current_index_task = 0;
}

void SCH_Delete_Task(uint32_t ID){
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	SCH_tasks_G[ID].pTask = 0x0000;
 80018d0:	4915      	ldr	r1, [pc, #84]	; (8001928 <SCH_Delete_Task+0x60>)
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[ID].Delay = 0;
 80018e2:	4911      	ldr	r1, [pc, #68]	; (8001928 <SCH_Delete_Task+0x60>)
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	3304      	adds	r3, #4
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[ID].Period = 0;
 80018f6:	490c      	ldr	r1, [pc, #48]	; (8001928 <SCH_Delete_Task+0x60>)
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	3308      	adds	r3, #8
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[ID].RunMe = 0;
 800190a:	4907      	ldr	r1, [pc, #28]	; (8001928 <SCH_Delete_Task+0x60>)
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	440b      	add	r3, r1
 8001918:	330c      	adds	r3, #12
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	20000124 	.word	0x20000124

0800192c <SCH_Add_Task>:
void SCH_Add_Task (void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
	if(current_index_task < SCH_MAX_TASKS){
 8001938:	4b25      	ldr	r3, [pc, #148]	; (80019d0 <SCH_Add_Task+0xa4>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b27      	cmp	r3, #39	; 0x27
 800193e:	d83c      	bhi.n	80019ba <SCH_Add_Task+0x8e>
		SCH_tasks_G[current_index_task].pTask = pFunction;
 8001940:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <SCH_Add_Task+0xa4>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4619      	mov	r1, r3
 8001946:	4a23      	ldr	r2, [pc, #140]	; (80019d4 <SCH_Add_Task+0xa8>)
 8001948:	460b      	mov	r3, r1
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY;
 8001956:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <SCH_Add_Task+0xa4>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	4619      	mov	r1, r3
 800195c:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <SCH_Add_Task+0xa8>)
 800195e:	460b      	mov	r3, r1
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	440b      	add	r3, r1
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	3304      	adds	r3, #4
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period = PERIOD;
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <SCH_Add_Task+0xa4>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	4619      	mov	r1, r3
 8001974:	4a17      	ldr	r2, [pc, #92]	; (80019d4 <SCH_Add_Task+0xa8>)
 8001976:	460b      	mov	r3, r1
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	440b      	add	r3, r1
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	3308      	adds	r3, #8
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 8001986:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <SCH_Add_Task+0xa4>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	4619      	mov	r1, r3
 800198c:	4a11      	ldr	r2, [pc, #68]	; (80019d4 <SCH_Add_Task+0xa8>)
 800198e:	460b      	mov	r3, r1
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	440b      	add	r3, r1
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	330c      	adds	r3, #12
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]

		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <SCH_Add_Task+0xa4>)
 80019a0:	781a      	ldrb	r2, [r3, #0]
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <SCH_Add_Task+0xa4>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	4619      	mov	r1, r3
 80019a8:	4610      	mov	r0, r2
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <SCH_Add_Task+0xa8>)
 80019ac:	460b      	mov	r3, r1
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	3310      	adds	r3, #16
 80019b8:	6018      	str	r0, [r3, #0]
	}
	current_index_task ++;
 80019ba:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <SCH_Add_Task+0xa4>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	3301      	adds	r3, #1
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <SCH_Add_Task+0xa4>)
 80019c4:	701a      	strb	r2, [r3, #0]
}
 80019c6:	bf00      	nop
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	200000c0 	.word	0x200000c0
 80019d4:	20000124 	.word	0x20000124

080019d8 <SCH_Update>:

void SCH_Update(void){
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
	for(int i = 0; i < current_index_task; i++){
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	e048      	b.n	8001a76 <SCH_Update+0x9e>
		if(SCH_tasks_G[i].Delay > 0){
 80019e4:	492a      	ldr	r1, [pc, #168]	; (8001a90 <SCH_Update+0xb8>)
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	3304      	adds	r3, #4
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d013      	beq.n	8001a22 <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay --;
 80019fa:	4925      	ldr	r1, [pc, #148]	; (8001a90 <SCH_Update+0xb8>)
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	3304      	adds	r3, #4
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	1e59      	subs	r1, r3, #1
 8001a0e:	4820      	ldr	r0, [pc, #128]	; (8001a90 <SCH_Update+0xb8>)
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4403      	add	r3, r0
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	6019      	str	r1, [r3, #0]
 8001a20:	e026      	b.n	8001a70 <SCH_Update+0x98>
		}
		else {
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 8001a22:	491b      	ldr	r1, [pc, #108]	; (8001a90 <SCH_Update+0xb8>)
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	3308      	adds	r3, #8
 8001a32:	6819      	ldr	r1, [r3, #0]
 8001a34:	4816      	ldr	r0, [pc, #88]	; (8001a90 <SCH_Update+0xb8>)
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4403      	add	r3, r0
 8001a42:	3304      	adds	r3, #4
 8001a44:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe+=1;
 8001a46:	4912      	ldr	r1, [pc, #72]	; (8001a90 <SCH_Update+0xb8>)
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	330c      	adds	r3, #12
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	b2d8      	uxtb	r0, r3
 8001a5c:	490c      	ldr	r1, [pc, #48]	; (8001a90 <SCH_Update+0xb8>)
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	330c      	adds	r3, #12
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < current_index_task; i++){
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3301      	adds	r3, #1
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <SCH_Update+0xbc>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	dbb0      	blt.n	80019e4 <SCH_Update+0xc>
		}
	}
}
 8001a82:	bf00      	nop
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000124 	.word	0x20000124
 8001a94:	200000c0 	.word	0x200000c0

08001a98 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
	for(int i = 0; i < current_index_task; i++){
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	e03a      	b.n	8001b1a <SCH_Dispatch_Tasks+0x82>
		if(SCH_tasks_G[i].RunMe > 0){
 8001aa4:	4922      	ldr	r1, [pc, #136]	; (8001b30 <SCH_Dispatch_Tasks+0x98>)
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	330c      	adds	r3, #12
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d01d      	beq.n	8001af6 <SCH_Dispatch_Tasks+0x5e>
			(*SCH_tasks_G[i].pTask) ();
 8001aba:	491d      	ldr	r1, [pc, #116]	; (8001b30 <SCH_Dispatch_Tasks+0x98>)
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4798      	blx	r3
			SCH_tasks_G[i].RunMe -=1;
 8001acc:	4918      	ldr	r1, [pc, #96]	; (8001b30 <SCH_Dispatch_Tasks+0x98>)
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	440b      	add	r3, r1
 8001ada:	330c      	adds	r3, #12
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	b2d8      	uxtb	r0, r3
 8001ae2:	4913      	ldr	r1, [pc, #76]	; (8001b30 <SCH_Dispatch_Tasks+0x98>)
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	440b      	add	r3, r1
 8001af0:	330c      	adds	r3, #12
 8001af2:	4602      	mov	r2, r0
 8001af4:	701a      	strb	r2, [r3, #0]
		}
		if(SCH_tasks_G[i].Period == 0){
 8001af6:	490e      	ldr	r1, [pc, #56]	; (8001b30 <SCH_Dispatch_Tasks+0x98>)
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	440b      	add	r3, r1
 8001b04:	3308      	adds	r3, #8
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d103      	bne.n	8001b14 <SCH_Dispatch_Tasks+0x7c>
			SCH_Delete_Task(i);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff feda 	bl	80018c8 <SCH_Delete_Task>
	for(int i = 0; i < current_index_task; i++){
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3301      	adds	r3, #1
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <SCH_Dispatch_Tasks+0x9c>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4293      	cmp	r3, r2
 8001b24:	dbbe      	blt.n	8001aa4 <SCH_Dispatch_Tasks+0xc>
		}
	}
}
 8001b26:	bf00      	nop
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000124 	.word	0x20000124
 8001b34:	200000c0 	.word	0x200000c0

08001b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <HAL_MspInit+0x5c>)
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	4a14      	ldr	r2, [pc, #80]	; (8001b94 <HAL_MspInit+0x5c>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6193      	str	r3, [r2, #24]
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_MspInit+0x5c>)
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <HAL_MspInit+0x5c>)
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	4a0e      	ldr	r2, [pc, #56]	; (8001b94 <HAL_MspInit+0x5c>)
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b60:	61d3      	str	r3, [r2, #28]
 8001b62:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <HAL_MspInit+0x5c>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <HAL_MspInit+0x60>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <HAL_MspInit+0x60>)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40010000 	.word	0x40010000

08001b9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bac:	d113      	bne.n	8001bd6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <HAL_TIM_Base_MspInit+0x44>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <HAL_TIM_Base_MspInit+0x44>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	61d3      	str	r3, [r2, #28]
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_TIM_Base_MspInit+0x44>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2100      	movs	r1, #0
 8001bca:	201c      	movs	r0, #28
 8001bcc:	f000 f9a1 	bl	8001f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bd0:	201c      	movs	r0, #28
 8001bd2:	f000 f9ba 	bl	8001f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000

08001be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <NMI_Handler+0x4>

08001bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bee:	e7fe      	b.n	8001bee <HardFault_Handler+0x4>

08001bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <MemManage_Handler+0x4>

08001bf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfa:	e7fe      	b.n	8001bfa <BusFault_Handler+0x4>

08001bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <UsageFault_Handler+0x4>

08001c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr

08001c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr

08001c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c2a:	f000 f87f 	bl	8001d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <TIM2_IRQHandler+0x10>)
 8001c3a:	f000 ffdb 	bl	8002bf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200000dc 	.word	0x200000dc

08001c48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c54:	f7ff fff8 	bl	8001c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c58:	480b      	ldr	r0, [pc, #44]	; (8001c88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c5a:	490c      	ldr	r1, [pc, #48]	; (8001c8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c5c:	4a0c      	ldr	r2, [pc, #48]	; (8001c90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c60:	e002      	b.n	8001c68 <LoopCopyDataInit>

08001c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c66:	3304      	adds	r3, #4

08001c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c6c:	d3f9      	bcc.n	8001c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c6e:	4a09      	ldr	r2, [pc, #36]	; (8001c94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c70:	4c09      	ldr	r4, [pc, #36]	; (8001c98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c74:	e001      	b.n	8001c7a <LoopFillZerobss>

08001c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c78:	3204      	adds	r2, #4

08001c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c7c:	d3fb      	bcc.n	8001c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c7e:	f001 faf9 	bl	8003274 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c82:	f7ff fcf5 	bl	8001670 <main>
  bx lr
 8001c86:	4770      	bx	lr
  ldr r0, =_sdata
 8001c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c8c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8001c90:	08003310 	.word	0x08003310
  ldr r2, =_sbss
 8001c94:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8001c98:	20000448 	.word	0x20000448

08001c9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c9c:	e7fe      	b.n	8001c9c <ADC1_2_IRQHandler>
	...

08001ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <HAL_Init+0x28>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a07      	ldr	r2, [pc, #28]	; (8001cc8 <HAL_Init+0x28>)
 8001caa:	f043 0310 	orr.w	r3, r3, #16
 8001cae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb0:	2003      	movs	r0, #3
 8001cb2:	f000 f923 	bl	8001efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cb6:	200f      	movs	r0, #15
 8001cb8:	f000 f808 	bl	8001ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cbc:	f7ff ff3c 	bl	8001b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40022000 	.word	0x40022000

08001ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_InitTick+0x54>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_InitTick+0x58>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 f93b 	bl	8001f66 <HAL_SYSTICK_Config>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e00e      	b.n	8001d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b0f      	cmp	r3, #15
 8001cfe:	d80a      	bhi.n	8001d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d00:	2200      	movs	r2, #0
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295
 8001d08:	f000 f903 	bl	8001f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d0c:	4a06      	ldr	r2, [pc, #24]	; (8001d28 <HAL_InitTick+0x5c>)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e000      	b.n	8001d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000044 	.word	0x20000044
 8001d24:	2000004c 	.word	0x2000004c
 8001d28:	20000048 	.word	0x20000048

08001d2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_IncTick+0x1c>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_IncTick+0x20>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	4a03      	ldr	r2, [pc, #12]	; (8001d4c <HAL_IncTick+0x20>)
 8001d3e:	6013      	str	r3, [r2, #0]
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	2000004c 	.word	0x2000004c
 8001d4c:	20000444 	.word	0x20000444

08001d50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return uwTick;
 8001d54:	4b02      	ldr	r3, [pc, #8]	; (8001d60 <HAL_GetTick+0x10>)
 8001d56:	681b      	ldr	r3, [r3, #0]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	20000444 	.word	0x20000444

08001d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d80:	4013      	ands	r3, r2
 8001d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d96:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	60d3      	str	r3, [r2, #12]
}
 8001d9c:	bf00      	nop
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	f003 0307 	and.w	r3, r3, #7
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	db0b      	blt.n	8001df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	4906      	ldr	r1, [pc, #24]	; (8001dfc <__NVIC_EnableIRQ+0x34>)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	2001      	movs	r0, #1
 8001dea:	fa00 f202 	lsl.w	r2, r0, r2
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr
 8001dfc:	e000e100 	.word	0xe000e100

08001e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	6039      	str	r1, [r7, #0]
 8001e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	db0a      	blt.n	8001e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	490c      	ldr	r1, [pc, #48]	; (8001e4c <__NVIC_SetPriority+0x4c>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	0112      	lsls	r2, r2, #4
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	440b      	add	r3, r1
 8001e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e28:	e00a      	b.n	8001e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4908      	ldr	r1, [pc, #32]	; (8001e50 <__NVIC_SetPriority+0x50>)
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	3b04      	subs	r3, #4
 8001e38:	0112      	lsls	r2, r2, #4
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	761a      	strb	r2, [r3, #24]
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000e100 	.word	0xe000e100
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	; 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f1c3 0307 	rsb	r3, r3, #7
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	bf28      	it	cs
 8001e72:	2304      	movcs	r3, #4
 8001e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	d902      	bls.n	8001e84 <NVIC_EncodePriority+0x30>
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3b03      	subs	r3, #3
 8001e82:	e000      	b.n	8001e86 <NVIC_EncodePriority+0x32>
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e88:	f04f 32ff 	mov.w	r2, #4294967295
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43da      	mvns	r2, r3
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	401a      	ands	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea6:	43d9      	mvns	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	4313      	orrs	r3, r2
         );
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3724      	adds	r7, #36	; 0x24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr

08001eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ec8:	d301      	bcc.n	8001ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e00f      	b.n	8001eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ece:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <SysTick_Config+0x40>)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed6:	210f      	movs	r1, #15
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8001edc:	f7ff ff90 	bl	8001e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <SysTick_Config+0x40>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee6:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <SysTick_Config+0x40>)
 8001ee8:	2207      	movs	r2, #7
 8001eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	e000e010 	.word	0xe000e010

08001efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ff2d 	bl	8001d64 <__NVIC_SetPriorityGrouping>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b086      	sub	sp, #24
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f24:	f7ff ff42 	bl	8001dac <__NVIC_GetPriorityGrouping>
 8001f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	6978      	ldr	r0, [r7, #20]
 8001f30:	f7ff ff90 	bl	8001e54 <NVIC_EncodePriority>
 8001f34:	4602      	mov	r2, r0
 8001f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff5f 	bl	8001e00 <__NVIC_SetPriority>
}
 8001f42:	bf00      	nop
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff35 	bl	8001dc8 <__NVIC_EnableIRQ>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff ffa2 	bl	8001eb8 <SysTick_Config>
 8001f74:	4603      	mov	r3, r0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b08b      	sub	sp, #44	; 0x2c
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f92:	e148      	b.n	8002226 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f94:	2201      	movs	r2, #1
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	69fa      	ldr	r2, [r7, #28]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	f040 8137 	bne.w	8002220 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	4aa3      	ldr	r2, [pc, #652]	; (8002244 <HAL_GPIO_Init+0x2c4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d05e      	beq.n	800207a <HAL_GPIO_Init+0xfa>
 8001fbc:	4aa1      	ldr	r2, [pc, #644]	; (8002244 <HAL_GPIO_Init+0x2c4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d875      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001fc2:	4aa1      	ldr	r2, [pc, #644]	; (8002248 <HAL_GPIO_Init+0x2c8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d058      	beq.n	800207a <HAL_GPIO_Init+0xfa>
 8001fc8:	4a9f      	ldr	r2, [pc, #636]	; (8002248 <HAL_GPIO_Init+0x2c8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d86f      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001fce:	4a9f      	ldr	r2, [pc, #636]	; (800224c <HAL_GPIO_Init+0x2cc>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d052      	beq.n	800207a <HAL_GPIO_Init+0xfa>
 8001fd4:	4a9d      	ldr	r2, [pc, #628]	; (800224c <HAL_GPIO_Init+0x2cc>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d869      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001fda:	4a9d      	ldr	r2, [pc, #628]	; (8002250 <HAL_GPIO_Init+0x2d0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d04c      	beq.n	800207a <HAL_GPIO_Init+0xfa>
 8001fe0:	4a9b      	ldr	r2, [pc, #620]	; (8002250 <HAL_GPIO_Init+0x2d0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d863      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001fe6:	4a9b      	ldr	r2, [pc, #620]	; (8002254 <HAL_GPIO_Init+0x2d4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d046      	beq.n	800207a <HAL_GPIO_Init+0xfa>
 8001fec:	4a99      	ldr	r2, [pc, #612]	; (8002254 <HAL_GPIO_Init+0x2d4>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d85d      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001ff2:	2b12      	cmp	r3, #18
 8001ff4:	d82a      	bhi.n	800204c <HAL_GPIO_Init+0xcc>
 8001ff6:	2b12      	cmp	r3, #18
 8001ff8:	d859      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001ffa:	a201      	add	r2, pc, #4	; (adr r2, 8002000 <HAL_GPIO_Init+0x80>)
 8001ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002000:	0800207b 	.word	0x0800207b
 8002004:	08002055 	.word	0x08002055
 8002008:	08002067 	.word	0x08002067
 800200c:	080020a9 	.word	0x080020a9
 8002010:	080020af 	.word	0x080020af
 8002014:	080020af 	.word	0x080020af
 8002018:	080020af 	.word	0x080020af
 800201c:	080020af 	.word	0x080020af
 8002020:	080020af 	.word	0x080020af
 8002024:	080020af 	.word	0x080020af
 8002028:	080020af 	.word	0x080020af
 800202c:	080020af 	.word	0x080020af
 8002030:	080020af 	.word	0x080020af
 8002034:	080020af 	.word	0x080020af
 8002038:	080020af 	.word	0x080020af
 800203c:	080020af 	.word	0x080020af
 8002040:	080020af 	.word	0x080020af
 8002044:	0800205d 	.word	0x0800205d
 8002048:	08002071 	.word	0x08002071
 800204c:	4a82      	ldr	r2, [pc, #520]	; (8002258 <HAL_GPIO_Init+0x2d8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d013      	beq.n	800207a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002052:	e02c      	b.n	80020ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	623b      	str	r3, [r7, #32]
          break;
 800205a:	e029      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	3304      	adds	r3, #4
 8002062:	623b      	str	r3, [r7, #32]
          break;
 8002064:	e024      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	3308      	adds	r3, #8
 800206c:	623b      	str	r3, [r7, #32]
          break;
 800206e:	e01f      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	330c      	adds	r3, #12
 8002076:	623b      	str	r3, [r7, #32]
          break;
 8002078:	e01a      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d102      	bne.n	8002088 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002082:	2304      	movs	r3, #4
 8002084:	623b      	str	r3, [r7, #32]
          break;
 8002086:	e013      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d105      	bne.n	800209c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002090:	2308      	movs	r3, #8
 8002092:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	611a      	str	r2, [r3, #16]
          break;
 800209a:	e009      	b.n	80020b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800209c:	2308      	movs	r3, #8
 800209e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	615a      	str	r2, [r3, #20]
          break;
 80020a6:	e003      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]
          break;
 80020ac:	e000      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          break;
 80020ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	2bff      	cmp	r3, #255	; 0xff
 80020b4:	d801      	bhi.n	80020ba <HAL_GPIO_Init+0x13a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	e001      	b.n	80020be <HAL_GPIO_Init+0x13e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3304      	adds	r3, #4
 80020be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	2bff      	cmp	r3, #255	; 0xff
 80020c4:	d802      	bhi.n	80020cc <HAL_GPIO_Init+0x14c>
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	e002      	b.n	80020d2 <HAL_GPIO_Init+0x152>
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	3b08      	subs	r3, #8
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	210f      	movs	r1, #15
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	401a      	ands	r2, r3
 80020e4:	6a39      	ldr	r1, [r7, #32]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ec:	431a      	orrs	r2, r3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 8090 	beq.w	8002220 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002100:	4b56      	ldr	r3, [pc, #344]	; (800225c <HAL_GPIO_Init+0x2dc>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	4a55      	ldr	r2, [pc, #340]	; (800225c <HAL_GPIO_Init+0x2dc>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6193      	str	r3, [r2, #24]
 800210c:	4b53      	ldr	r3, [pc, #332]	; (800225c <HAL_GPIO_Init+0x2dc>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002118:	4a51      	ldr	r2, [pc, #324]	; (8002260 <HAL_GPIO_Init+0x2e0>)
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	3302      	adds	r3, #2
 8002120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002124:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	220f      	movs	r2, #15
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4013      	ands	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a49      	ldr	r2, [pc, #292]	; (8002264 <HAL_GPIO_Init+0x2e4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d00d      	beq.n	8002160 <HAL_GPIO_Init+0x1e0>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a48      	ldr	r2, [pc, #288]	; (8002268 <HAL_GPIO_Init+0x2e8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d007      	beq.n	800215c <HAL_GPIO_Init+0x1dc>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a47      	ldr	r2, [pc, #284]	; (800226c <HAL_GPIO_Init+0x2ec>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d101      	bne.n	8002158 <HAL_GPIO_Init+0x1d8>
 8002154:	2302      	movs	r3, #2
 8002156:	e004      	b.n	8002162 <HAL_GPIO_Init+0x1e2>
 8002158:	2303      	movs	r3, #3
 800215a:	e002      	b.n	8002162 <HAL_GPIO_Init+0x1e2>
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <HAL_GPIO_Init+0x1e2>
 8002160:	2300      	movs	r3, #0
 8002162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002164:	f002 0203 	and.w	r2, r2, #3
 8002168:	0092      	lsls	r2, r2, #2
 800216a:	4093      	lsls	r3, r2
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4313      	orrs	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002172:	493b      	ldr	r1, [pc, #236]	; (8002260 <HAL_GPIO_Init+0x2e0>)
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	3302      	adds	r3, #2
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d006      	beq.n	800219a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800218c:	4b38      	ldr	r3, [pc, #224]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	4937      	ldr	r1, [pc, #220]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	608b      	str	r3, [r1, #8]
 8002198:	e006      	b.n	80021a8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800219a:	4b35      	ldr	r3, [pc, #212]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	4933      	ldr	r1, [pc, #204]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d006      	beq.n	80021c2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021b4:	4b2e      	ldr	r3, [pc, #184]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	492d      	ldr	r1, [pc, #180]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	60cb      	str	r3, [r1, #12]
 80021c0:	e006      	b.n	80021d0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021c2:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	4929      	ldr	r1, [pc, #164]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d006      	beq.n	80021ea <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021dc:	4b24      	ldr	r3, [pc, #144]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	4923      	ldr	r1, [pc, #140]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	604b      	str	r3, [r1, #4]
 80021e8:	e006      	b.n	80021f8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021ea:	4b21      	ldr	r3, [pc, #132]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	491f      	ldr	r1, [pc, #124]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d006      	beq.n	8002212 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002204:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4919      	ldr	r1, [pc, #100]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	600b      	str	r3, [r1, #0]
 8002210:	e006      	b.n	8002220 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002212:	4b17      	ldr	r3, [pc, #92]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	43db      	mvns	r3, r3
 800221a:	4915      	ldr	r1, [pc, #84]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 800221c:	4013      	ands	r3, r2
 800221e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	3301      	adds	r3, #1
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	f47f aeaf 	bne.w	8001f94 <HAL_GPIO_Init+0x14>
  }
}
 8002236:	bf00      	nop
 8002238:	bf00      	nop
 800223a:	372c      	adds	r7, #44	; 0x2c
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	10320000 	.word	0x10320000
 8002248:	10310000 	.word	0x10310000
 800224c:	10220000 	.word	0x10220000
 8002250:	10210000 	.word	0x10210000
 8002254:	10120000 	.word	0x10120000
 8002258:	10110000 	.word	0x10110000
 800225c:	40021000 	.word	0x40021000
 8002260:	40010000 	.word	0x40010000
 8002264:	40010800 	.word	0x40010800
 8002268:	40010c00 	.word	0x40010c00
 800226c:	40011000 	.word	0x40011000
 8002270:	40010400 	.word	0x40010400

08002274 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	887b      	ldrh	r3, [r7, #2]
 8002286:	4013      	ands	r3, r2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800228c:	2301      	movs	r3, #1
 800228e:	73fb      	strb	r3, [r7, #15]
 8002290:	e001      	b.n	8002296 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002292:	2300      	movs	r3, #0
 8002294:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002296:	7bfb      	ldrb	r3, [r7, #15]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr

080022a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	807b      	strh	r3, [r7, #2]
 80022ae:	4613      	mov	r3, r2
 80022b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022b2:	787b      	ldrb	r3, [r7, #1]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022b8:	887a      	ldrh	r2, [r7, #2]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022be:	e003      	b.n	80022c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022c0:	887b      	ldrh	r3, [r7, #2]
 80022c2:	041a      	lsls	r2, r3, #16
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	611a      	str	r2, [r3, #16]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr

080022d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b085      	sub	sp, #20
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	460b      	mov	r3, r1
 80022dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022e4:	887a      	ldrh	r2, [r7, #2]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	4013      	ands	r3, r2
 80022ea:	041a      	lsls	r2, r3, #16
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	43d9      	mvns	r1, r3
 80022f0:	887b      	ldrh	r3, [r7, #2]
 80022f2:	400b      	ands	r3, r1
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	611a      	str	r2, [r3, #16]
}
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e26c      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 8087 	beq.w	8002432 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002324:	4b92      	ldr	r3, [pc, #584]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 030c 	and.w	r3, r3, #12
 800232c:	2b04      	cmp	r3, #4
 800232e:	d00c      	beq.n	800234a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002330:	4b8f      	ldr	r3, [pc, #572]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b08      	cmp	r3, #8
 800233a:	d112      	bne.n	8002362 <HAL_RCC_OscConfig+0x5e>
 800233c:	4b8c      	ldr	r3, [pc, #560]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002348:	d10b      	bne.n	8002362 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234a:	4b89      	ldr	r3, [pc, #548]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d06c      	beq.n	8002430 <HAL_RCC_OscConfig+0x12c>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d168      	bne.n	8002430 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e246      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800236a:	d106      	bne.n	800237a <HAL_RCC_OscConfig+0x76>
 800236c:	4b80      	ldr	r3, [pc, #512]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a7f      	ldr	r2, [pc, #508]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	e02e      	b.n	80023d8 <HAL_RCC_OscConfig+0xd4>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10c      	bne.n	800239c <HAL_RCC_OscConfig+0x98>
 8002382:	4b7b      	ldr	r3, [pc, #492]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a7a      	ldr	r2, [pc, #488]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	4b78      	ldr	r3, [pc, #480]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a77      	ldr	r2, [pc, #476]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	e01d      	b.n	80023d8 <HAL_RCC_OscConfig+0xd4>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0xbc>
 80023a6:	4b72      	ldr	r3, [pc, #456]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a71      	ldr	r2, [pc, #452]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	4b6f      	ldr	r3, [pc, #444]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a6e      	ldr	r2, [pc, #440]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e00b      	b.n	80023d8 <HAL_RCC_OscConfig+0xd4>
 80023c0:	4b6b      	ldr	r3, [pc, #428]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a6a      	ldr	r2, [pc, #424]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	4b68      	ldr	r3, [pc, #416]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a67      	ldr	r2, [pc, #412]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d013      	beq.n	8002408 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7ff fcb6 	bl	8001d50 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e8:	f7ff fcb2 	bl	8001d50 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	; 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e1fa      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fa:	4b5d      	ldr	r3, [pc, #372]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0xe4>
 8002406:	e014      	b.n	8002432 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7ff fca2 	bl	8001d50 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002410:	f7ff fc9e 	bl	8001d50 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b64      	cmp	r3, #100	; 0x64
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e1e6      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002422:	4b53      	ldr	r3, [pc, #332]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x10c>
 800242e:	e000      	b.n	8002432 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d063      	beq.n	8002506 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800243e:	4b4c      	ldr	r3, [pc, #304]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00b      	beq.n	8002462 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800244a:	4b49      	ldr	r3, [pc, #292]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b08      	cmp	r3, #8
 8002454:	d11c      	bne.n	8002490 <HAL_RCC_OscConfig+0x18c>
 8002456:	4b46      	ldr	r3, [pc, #280]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d116      	bne.n	8002490 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002462:	4b43      	ldr	r3, [pc, #268]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d005      	beq.n	800247a <HAL_RCC_OscConfig+0x176>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d001      	beq.n	800247a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e1ba      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247a:	4b3d      	ldr	r3, [pc, #244]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4939      	ldr	r1, [pc, #228]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248e:	e03a      	b.n	8002506 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d020      	beq.n	80024da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002498:	4b36      	ldr	r3, [pc, #216]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 800249a:	2201      	movs	r2, #1
 800249c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249e:	f7ff fc57 	bl	8001d50 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a6:	f7ff fc53 	bl	8001d50 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e19b      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b8:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c4:	4b2a      	ldr	r3, [pc, #168]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4927      	ldr	r1, [pc, #156]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]
 80024d8:	e015      	b.n	8002506 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024da:	4b26      	ldr	r3, [pc, #152]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7ff fc36 	bl	8001d50 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e8:	f7ff fc32 	bl	8001d50 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e17a      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fa:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d03a      	beq.n	8002588 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d019      	beq.n	800254e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251a:	4b17      	ldr	r3, [pc, #92]	; (8002578 <HAL_RCC_OscConfig+0x274>)
 800251c:	2201      	movs	r2, #1
 800251e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002520:	f7ff fc16 	bl	8001d50 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002528:	f7ff fc12 	bl	8001d50 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e15a      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253a:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002546:	2001      	movs	r0, #1
 8002548:	f000 fa9a 	bl	8002a80 <RCC_Delay>
 800254c:	e01c      	b.n	8002588 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <HAL_RCC_OscConfig+0x274>)
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002554:	f7ff fbfc 	bl	8001d50 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255a:	e00f      	b.n	800257c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800255c:	f7ff fbf8 	bl	8001d50 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d908      	bls.n	800257c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e140      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000
 8002574:	42420000 	.word	0x42420000
 8002578:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800257c:	4b9e      	ldr	r3, [pc, #632]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1e9      	bne.n	800255c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 80a6 	beq.w	80026e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002596:	2300      	movs	r3, #0
 8002598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259a:	4b97      	ldr	r3, [pc, #604]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10d      	bne.n	80025c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a6:	4b94      	ldr	r3, [pc, #592]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	4a93      	ldr	r2, [pc, #588]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	61d3      	str	r3, [r2, #28]
 80025b2:	4b91      	ldr	r3, [pc, #580]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025be:	2301      	movs	r3, #1
 80025c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b8e      	ldr	r3, [pc, #568]	; (80027fc <HAL_RCC_OscConfig+0x4f8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d118      	bne.n	8002600 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ce:	4b8b      	ldr	r3, [pc, #556]	; (80027fc <HAL_RCC_OscConfig+0x4f8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a8a      	ldr	r2, [pc, #552]	; (80027fc <HAL_RCC_OscConfig+0x4f8>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025da:	f7ff fbb9 	bl	8001d50 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e2:	f7ff fbb5 	bl	8001d50 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b64      	cmp	r3, #100	; 0x64
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e0fd      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f4:	4b81      	ldr	r3, [pc, #516]	; (80027fc <HAL_RCC_OscConfig+0x4f8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d106      	bne.n	8002616 <HAL_RCC_OscConfig+0x312>
 8002608:	4b7b      	ldr	r3, [pc, #492]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	4a7a      	ldr	r2, [pc, #488]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	6213      	str	r3, [r2, #32]
 8002614:	e02d      	b.n	8002672 <HAL_RCC_OscConfig+0x36e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10c      	bne.n	8002638 <HAL_RCC_OscConfig+0x334>
 800261e:	4b76      	ldr	r3, [pc, #472]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	4a75      	ldr	r2, [pc, #468]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002624:	f023 0301 	bic.w	r3, r3, #1
 8002628:	6213      	str	r3, [r2, #32]
 800262a:	4b73      	ldr	r3, [pc, #460]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	4a72      	ldr	r2, [pc, #456]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002630:	f023 0304 	bic.w	r3, r3, #4
 8002634:	6213      	str	r3, [r2, #32]
 8002636:	e01c      	b.n	8002672 <HAL_RCC_OscConfig+0x36e>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b05      	cmp	r3, #5
 800263e:	d10c      	bne.n	800265a <HAL_RCC_OscConfig+0x356>
 8002640:	4b6d      	ldr	r3, [pc, #436]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	4a6c      	ldr	r2, [pc, #432]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002646:	f043 0304 	orr.w	r3, r3, #4
 800264a:	6213      	str	r3, [r2, #32]
 800264c:	4b6a      	ldr	r3, [pc, #424]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4a69      	ldr	r2, [pc, #420]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	6213      	str	r3, [r2, #32]
 8002658:	e00b      	b.n	8002672 <HAL_RCC_OscConfig+0x36e>
 800265a:	4b67      	ldr	r3, [pc, #412]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	4a66      	ldr	r2, [pc, #408]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002660:	f023 0301 	bic.w	r3, r3, #1
 8002664:	6213      	str	r3, [r2, #32]
 8002666:	4b64      	ldr	r3, [pc, #400]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	4a63      	ldr	r2, [pc, #396]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800266c:	f023 0304 	bic.w	r3, r3, #4
 8002670:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d015      	beq.n	80026a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267a:	f7ff fb69 	bl	8001d50 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002680:	e00a      	b.n	8002698 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7ff fb65 	bl	8001d50 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e0ab      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002698:	4b57      	ldr	r3, [pc, #348]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0ee      	beq.n	8002682 <HAL_RCC_OscConfig+0x37e>
 80026a4:	e014      	b.n	80026d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a6:	f7ff fb53 	bl	8001d50 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ac:	e00a      	b.n	80026c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ae:	f7ff fb4f 	bl	8001d50 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026bc:	4293      	cmp	r3, r2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e095      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c4:	4b4c      	ldr	r3, [pc, #304]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1ee      	bne.n	80026ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026d0:	7dfb      	ldrb	r3, [r7, #23]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d105      	bne.n	80026e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d6:	4b48      	ldr	r3, [pc, #288]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	4a47      	ldr	r2, [pc, #284]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80026dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 8081 	beq.w	80027ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ec:	4b42      	ldr	r3, [pc, #264]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 030c 	and.w	r3, r3, #12
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d061      	beq.n	80027bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d146      	bne.n	800278e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002700:	4b3f      	ldr	r3, [pc, #252]	; (8002800 <HAL_RCC_OscConfig+0x4fc>)
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002706:	f7ff fb23 	bl	8001d50 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270e:	f7ff fb1f 	bl	8001d50 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e067      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002720:	4b35      	ldr	r3, [pc, #212]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f0      	bne.n	800270e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002734:	d108      	bne.n	8002748 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002736:	4b30      	ldr	r3, [pc, #192]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	492d      	ldr	r1, [pc, #180]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002748:	4b2b      	ldr	r3, [pc, #172]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a19      	ldr	r1, [r3, #32]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	430b      	orrs	r3, r1
 800275a:	4927      	ldr	r1, [pc, #156]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800275c:	4313      	orrs	r3, r2
 800275e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002760:	4b27      	ldr	r3, [pc, #156]	; (8002800 <HAL_RCC_OscConfig+0x4fc>)
 8002762:	2201      	movs	r2, #1
 8002764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002766:	f7ff faf3 	bl	8001d50 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800276e:	f7ff faef 	bl	8001d50 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e037      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002780:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x46a>
 800278c:	e02f      	b.n	80027ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278e:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <HAL_RCC_OscConfig+0x4fc>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7ff fadc 	bl	8001d50 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279c:	f7ff fad8 	bl	8001d50 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e020      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ae:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x498>
 80027ba:	e018      	b.n	80027ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e013      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d106      	bne.n	80027ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d001      	beq.n	80027ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40007000 	.word	0x40007000
 8002800:	42420060 	.word	0x42420060

08002804 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e0d0      	b.n	80029ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002818:	4b6a      	ldr	r3, [pc, #424]	; (80029c4 <HAL_RCC_ClockConfig+0x1c0>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d910      	bls.n	8002848 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002826:	4b67      	ldr	r3, [pc, #412]	; (80029c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 0207 	bic.w	r2, r3, #7
 800282e:	4965      	ldr	r1, [pc, #404]	; (80029c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	4313      	orrs	r3, r2
 8002834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002836:	4b63      	ldr	r3, [pc, #396]	; (80029c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d001      	beq.n	8002848 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0b8      	b.n	80029ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d020      	beq.n	8002896 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002860:	4b59      	ldr	r3, [pc, #356]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4a58      	ldr	r2, [pc, #352]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800286a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002878:	4b53      	ldr	r3, [pc, #332]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4a52      	ldr	r2, [pc, #328]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002882:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002884:	4b50      	ldr	r3, [pc, #320]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	494d      	ldr	r1, [pc, #308]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	4313      	orrs	r3, r2
 8002894:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d040      	beq.n	8002924 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028aa:	4b47      	ldr	r3, [pc, #284]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d115      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e07f      	b.n	80029ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d107      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c2:	4b41      	ldr	r3, [pc, #260]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e073      	b.n	80029ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d2:	4b3d      	ldr	r3, [pc, #244]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e06b      	b.n	80029ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028e2:	4b39      	ldr	r3, [pc, #228]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f023 0203 	bic.w	r2, r3, #3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	4936      	ldr	r1, [pc, #216]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f4:	f7ff fa2c 	bl	8001d50 <HAL_GetTick>
 80028f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028fc:	f7ff fa28 	bl	8001d50 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	; 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e053      	b.n	80029ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002912:	4b2d      	ldr	r3, [pc, #180]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f003 020c 	and.w	r2, r3, #12
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	429a      	cmp	r2, r3
 8002922:	d1eb      	bne.n	80028fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002924:	4b27      	ldr	r3, [pc, #156]	; (80029c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d210      	bcs.n	8002954 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002932:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 0207 	bic.w	r2, r3, #7
 800293a:	4922      	ldr	r1, [pc, #136]	; (80029c4 <HAL_RCC_ClockConfig+0x1c0>)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	4313      	orrs	r3, r2
 8002940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002942:	4b20      	ldr	r3, [pc, #128]	; (80029c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d001      	beq.n	8002954 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e032      	b.n	80029ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002960:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4916      	ldr	r1, [pc, #88]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	4313      	orrs	r3, r2
 8002970:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d009      	beq.n	8002992 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800297e:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	490e      	ldr	r1, [pc, #56]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 800298e:	4313      	orrs	r3, r2
 8002990:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002992:	f000 f821 	bl	80029d8 <HAL_RCC_GetSysClockFreq>
 8002996:	4602      	mov	r2, r0
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	490a      	ldr	r1, [pc, #40]	; (80029cc <HAL_RCC_ClockConfig+0x1c8>)
 80029a4:	5ccb      	ldrb	r3, [r1, r3]
 80029a6:	fa22 f303 	lsr.w	r3, r2, r3
 80029aa:	4a09      	ldr	r2, [pc, #36]	; (80029d0 <HAL_RCC_ClockConfig+0x1cc>)
 80029ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ae:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <HAL_RCC_ClockConfig+0x1d0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff f98a 	bl	8001ccc <HAL_InitTick>

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40022000 	.word	0x40022000
 80029c8:	40021000 	.word	0x40021000
 80029cc:	080032e4 	.word	0x080032e4
 80029d0:	20000044 	.word	0x20000044
 80029d4:	20000048 	.word	0x20000048

080029d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	2300      	movs	r3, #0
 80029ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029f2:	4b1e      	ldr	r3, [pc, #120]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x94>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d002      	beq.n	8002a08 <HAL_RCC_GetSysClockFreq+0x30>
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d003      	beq.n	8002a0e <HAL_RCC_GetSysClockFreq+0x36>
 8002a06:	e027      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a08:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a0a:	613b      	str	r3, [r7, #16]
      break;
 8002a0c:	e027      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	0c9b      	lsrs	r3, r3, #18
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	4a17      	ldr	r2, [pc, #92]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a18:	5cd3      	ldrb	r3, [r2, r3]
 8002a1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d010      	beq.n	8002a48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a26:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x94>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	0c5b      	lsrs	r3, r3, #17
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	4a11      	ldr	r2, [pc, #68]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a32:	5cd3      	ldrb	r3, [r2, r3]
 8002a34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a0d      	ldr	r2, [pc, #52]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a3a:	fb02 f203 	mul.w	r2, r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	e004      	b.n	8002a52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a0c      	ldr	r2, [pc, #48]	; (8002a7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a4c:	fb02 f303 	mul.w	r3, r2, r3
 8002a50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	613b      	str	r3, [r7, #16]
      break;
 8002a56:	e002      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a5a:	613b      	str	r3, [r7, #16]
      break;
 8002a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a5e:	693b      	ldr	r3, [r7, #16]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	007a1200 	.word	0x007a1200
 8002a74:	080032f4 	.word	0x080032f4
 8002a78:	08003304 	.word	0x08003304
 8002a7c:	003d0900 	.word	0x003d0900

08002a80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a88:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <RCC_Delay+0x34>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <RCC_Delay+0x38>)
 8002a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a92:	0a5b      	lsrs	r3, r3, #9
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	fb02 f303 	mul.w	r3, r2, r3
 8002a9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a9c:	bf00      	nop
  }
  while (Delay --);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1e5a      	subs	r2, r3, #1
 8002aa2:	60fa      	str	r2, [r7, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f9      	bne.n	8002a9c <RCC_Delay+0x1c>
}
 8002aa8:	bf00      	nop
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr
 8002ab4:	20000044 	.word	0x20000044
 8002ab8:	10624dd3 	.word	0x10624dd3

08002abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e041      	b.n	8002b52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff f85a 	bl	8001b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3304      	adds	r3, #4
 8002af8:	4619      	mov	r1, r3
 8002afa:	4610      	mov	r0, r2
 8002afc:	f000 fa56 	bl	8002fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d001      	beq.n	8002b74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e035      	b.n	8002be0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a16      	ldr	r2, [pc, #88]	; (8002bec <HAL_TIM_Base_Start_IT+0x90>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d009      	beq.n	8002baa <HAL_TIM_Base_Start_IT+0x4e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9e:	d004      	beq.n	8002baa <HAL_TIM_Base_Start_IT+0x4e>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a12      	ldr	r2, [pc, #72]	; (8002bf0 <HAL_TIM_Base_Start_IT+0x94>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d111      	bne.n	8002bce <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2b06      	cmp	r3, #6
 8002bba:	d010      	beq.n	8002bde <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bcc:	e007      	b.n	8002bde <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 0201 	orr.w	r2, r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40012c00 	.word	0x40012c00
 8002bf0:	40000400 	.word	0x40000400

08002bf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d020      	beq.n	8002c58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d01b      	beq.n	8002c58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0202 	mvn.w	r2, #2
 8002c28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f998 	bl	8002f74 <HAL_TIM_IC_CaptureCallback>
 8002c44:	e005      	b.n	8002c52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f98b 	bl	8002f62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f99a 	bl	8002f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d020      	beq.n	8002ca4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01b      	beq.n	8002ca4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f06f 0204 	mvn.w	r2, #4
 8002c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2202      	movs	r2, #2
 8002c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f972 	bl	8002f74 <HAL_TIM_IC_CaptureCallback>
 8002c90:	e005      	b.n	8002c9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f965 	bl	8002f62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f974 	bl	8002f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d020      	beq.n	8002cf0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f003 0308 	and.w	r3, r3, #8
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d01b      	beq.n	8002cf0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f06f 0208 	mvn.w	r2, #8
 8002cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2204      	movs	r2, #4
 8002cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f94c 	bl	8002f74 <HAL_TIM_IC_CaptureCallback>
 8002cdc:	e005      	b.n	8002cea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f93f 	bl	8002f62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f94e 	bl	8002f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d020      	beq.n	8002d3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d01b      	beq.n	8002d3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f06f 0210 	mvn.w	r2, #16
 8002d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2208      	movs	r2, #8
 8002d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f926 	bl	8002f74 <HAL_TIM_IC_CaptureCallback>
 8002d28:	e005      	b.n	8002d36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f919 	bl	8002f62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f928 	bl	8002f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00c      	beq.n	8002d60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d007      	beq.n	8002d60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f06f 0201 	mvn.w	r2, #1
 8002d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7fe fda2 	bl	80018a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00c      	beq.n	8002d84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d007      	beq.n	8002d84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 fa6f 	bl	8003262 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00c      	beq.n	8002da8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d007      	beq.n	8002da8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f8f8 	bl	8002f98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00c      	beq.n	8002dcc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f003 0320 	and.w	r3, r3, #32
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d007      	beq.n	8002dcc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0220 	mvn.w	r2, #32
 8002dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fa42 	bl	8003250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dcc:	bf00      	nop
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_TIM_ConfigClockSource+0x1c>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e0b4      	b.n	8002f5a <HAL_TIM_ConfigClockSource+0x186>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e28:	d03e      	beq.n	8002ea8 <HAL_TIM_ConfigClockSource+0xd4>
 8002e2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e2e:	f200 8087 	bhi.w	8002f40 <HAL_TIM_ConfigClockSource+0x16c>
 8002e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e36:	f000 8086 	beq.w	8002f46 <HAL_TIM_ConfigClockSource+0x172>
 8002e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e3e:	d87f      	bhi.n	8002f40 <HAL_TIM_ConfigClockSource+0x16c>
 8002e40:	2b70      	cmp	r3, #112	; 0x70
 8002e42:	d01a      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0xa6>
 8002e44:	2b70      	cmp	r3, #112	; 0x70
 8002e46:	d87b      	bhi.n	8002f40 <HAL_TIM_ConfigClockSource+0x16c>
 8002e48:	2b60      	cmp	r3, #96	; 0x60
 8002e4a:	d050      	beq.n	8002eee <HAL_TIM_ConfigClockSource+0x11a>
 8002e4c:	2b60      	cmp	r3, #96	; 0x60
 8002e4e:	d877      	bhi.n	8002f40 <HAL_TIM_ConfigClockSource+0x16c>
 8002e50:	2b50      	cmp	r3, #80	; 0x50
 8002e52:	d03c      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0xfa>
 8002e54:	2b50      	cmp	r3, #80	; 0x50
 8002e56:	d873      	bhi.n	8002f40 <HAL_TIM_ConfigClockSource+0x16c>
 8002e58:	2b40      	cmp	r3, #64	; 0x40
 8002e5a:	d058      	beq.n	8002f0e <HAL_TIM_ConfigClockSource+0x13a>
 8002e5c:	2b40      	cmp	r3, #64	; 0x40
 8002e5e:	d86f      	bhi.n	8002f40 <HAL_TIM_ConfigClockSource+0x16c>
 8002e60:	2b30      	cmp	r3, #48	; 0x30
 8002e62:	d064      	beq.n	8002f2e <HAL_TIM_ConfigClockSource+0x15a>
 8002e64:	2b30      	cmp	r3, #48	; 0x30
 8002e66:	d86b      	bhi.n	8002f40 <HAL_TIM_ConfigClockSource+0x16c>
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	d060      	beq.n	8002f2e <HAL_TIM_ConfigClockSource+0x15a>
 8002e6c:	2b20      	cmp	r3, #32
 8002e6e:	d867      	bhi.n	8002f40 <HAL_TIM_ConfigClockSource+0x16c>
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d05c      	beq.n	8002f2e <HAL_TIM_ConfigClockSource+0x15a>
 8002e74:	2b10      	cmp	r3, #16
 8002e76:	d05a      	beq.n	8002f2e <HAL_TIM_ConfigClockSource+0x15a>
 8002e78:	e062      	b.n	8002f40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	6899      	ldr	r1, [r3, #8]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f000 f96a 	bl	8003162 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	609a      	str	r2, [r3, #8]
      break;
 8002ea6:	e04f      	b.n	8002f48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6818      	ldr	r0, [r3, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	6899      	ldr	r1, [r3, #8]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f000 f953 	bl	8003162 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eca:	609a      	str	r2, [r3, #8]
      break;
 8002ecc:	e03c      	b.n	8002f48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	6859      	ldr	r1, [r3, #4]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	461a      	mov	r2, r3
 8002edc:	f000 f8ca 	bl	8003074 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2150      	movs	r1, #80	; 0x50
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 f921 	bl	800312e <TIM_ITRx_SetConfig>
      break;
 8002eec:	e02c      	b.n	8002f48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	6859      	ldr	r1, [r3, #4]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	461a      	mov	r2, r3
 8002efc:	f000 f8e8 	bl	80030d0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2160      	movs	r1, #96	; 0x60
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 f911 	bl	800312e <TIM_ITRx_SetConfig>
      break;
 8002f0c:	e01c      	b.n	8002f48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	6859      	ldr	r1, [r3, #4]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	f000 f8aa 	bl	8003074 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2140      	movs	r1, #64	; 0x40
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 f901 	bl	800312e <TIM_ITRx_SetConfig>
      break;
 8002f2c:	e00c      	b.n	8002f48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4619      	mov	r1, r3
 8002f38:	4610      	mov	r0, r2
 8002f3a:	f000 f8f8 	bl	800312e <TIM_ITRx_SetConfig>
      break;
 8002f3e:	e003      	b.n	8002f48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
      break;
 8002f44:	e000      	b.n	8002f48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr

08002f74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bc80      	pop	{r7}
 8002f84:	4770      	bx	lr

08002f86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr

08002f98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr
	...

08002fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a2b      	ldr	r2, [pc, #172]	; (800306c <TIM_Base_SetConfig+0xc0>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d007      	beq.n	8002fd4 <TIM_Base_SetConfig+0x28>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fca:	d003      	beq.n	8002fd4 <TIM_Base_SetConfig+0x28>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a28      	ldr	r2, [pc, #160]	; (8003070 <TIM_Base_SetConfig+0xc4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d108      	bne.n	8002fe6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a20      	ldr	r2, [pc, #128]	; (800306c <TIM_Base_SetConfig+0xc0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d007      	beq.n	8002ffe <TIM_Base_SetConfig+0x52>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff4:	d003      	beq.n	8002ffe <TIM_Base_SetConfig+0x52>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a1d      	ldr	r2, [pc, #116]	; (8003070 <TIM_Base_SetConfig+0xc4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d108      	bne.n	8003010 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	4313      	orrs	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	4313      	orrs	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a0d      	ldr	r2, [pc, #52]	; (800306c <TIM_Base_SetConfig+0xc0>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d103      	bne.n	8003044 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d005      	beq.n	8003062 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f023 0201 	bic.w	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	611a      	str	r2, [r3, #16]
  }
}
 8003062:	bf00      	nop
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr
 800306c:	40012c00 	.word	0x40012c00
 8003070:	40000400 	.word	0x40000400

08003074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	f023 0201 	bic.w	r2, r3, #1
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800309e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f023 030a 	bic.w	r3, r3, #10
 80030b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	621a      	str	r2, [r3, #32]
}
 80030c6:	bf00      	nop
 80030c8:	371c      	adds	r7, #28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b087      	sub	sp, #28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	f023 0210 	bic.w	r2, r3, #16
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	031b      	lsls	r3, r3, #12
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800310c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4313      	orrs	r3, r2
 8003116:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	621a      	str	r2, [r3, #32]
}
 8003124:	bf00      	nop
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr

0800312e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800312e:	b480      	push	{r7}
 8003130:	b085      	sub	sp, #20
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003144:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4313      	orrs	r3, r2
 800314c:	f043 0307 	orr.w	r3, r3, #7
 8003150:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	609a      	str	r2, [r3, #8]
}
 8003158:	bf00      	nop
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr

08003162 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003162:	b480      	push	{r7}
 8003164:	b087      	sub	sp, #28
 8003166:	af00      	add	r7, sp, #0
 8003168:	60f8      	str	r0, [r7, #12]
 800316a:	60b9      	str	r1, [r7, #8]
 800316c:	607a      	str	r2, [r7, #4]
 800316e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800317c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	021a      	lsls	r2, r3, #8
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	431a      	orrs	r2, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	4313      	orrs	r3, r2
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4313      	orrs	r3, r2
 800318e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	609a      	str	r2, [r3, #8]
}
 8003196:	bf00      	nop
 8003198:	371c      	adds	r7, #28
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr

080031a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e041      	b.n	800323c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a14      	ldr	r2, [pc, #80]	; (8003248 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d009      	beq.n	8003210 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003204:	d004      	beq.n	8003210 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a10      	ldr	r2, [pc, #64]	; (800324c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d10c      	bne.n	800322a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003216:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	4313      	orrs	r3, r2
 8003220:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40012c00 	.word	0x40012c00
 800324c:	40000400 	.word	0x40000400

08003250 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr

08003262 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <__libc_init_array>:
 8003274:	b570      	push	{r4, r5, r6, lr}
 8003276:	2600      	movs	r6, #0
 8003278:	4d0c      	ldr	r5, [pc, #48]	; (80032ac <__libc_init_array+0x38>)
 800327a:	4c0d      	ldr	r4, [pc, #52]	; (80032b0 <__libc_init_array+0x3c>)
 800327c:	1b64      	subs	r4, r4, r5
 800327e:	10a4      	asrs	r4, r4, #2
 8003280:	42a6      	cmp	r6, r4
 8003282:	d109      	bne.n	8003298 <__libc_init_array+0x24>
 8003284:	f000 f822 	bl	80032cc <_init>
 8003288:	2600      	movs	r6, #0
 800328a:	4d0a      	ldr	r5, [pc, #40]	; (80032b4 <__libc_init_array+0x40>)
 800328c:	4c0a      	ldr	r4, [pc, #40]	; (80032b8 <__libc_init_array+0x44>)
 800328e:	1b64      	subs	r4, r4, r5
 8003290:	10a4      	asrs	r4, r4, #2
 8003292:	42a6      	cmp	r6, r4
 8003294:	d105      	bne.n	80032a2 <__libc_init_array+0x2e>
 8003296:	bd70      	pop	{r4, r5, r6, pc}
 8003298:	f855 3b04 	ldr.w	r3, [r5], #4
 800329c:	4798      	blx	r3
 800329e:	3601      	adds	r6, #1
 80032a0:	e7ee      	b.n	8003280 <__libc_init_array+0xc>
 80032a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032a6:	4798      	blx	r3
 80032a8:	3601      	adds	r6, #1
 80032aa:	e7f2      	b.n	8003292 <__libc_init_array+0x1e>
 80032ac:	08003308 	.word	0x08003308
 80032b0:	08003308 	.word	0x08003308
 80032b4:	08003308 	.word	0x08003308
 80032b8:	0800330c 	.word	0x0800330c

080032bc <memset>:
 80032bc:	4603      	mov	r3, r0
 80032be:	4402      	add	r2, r0
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d100      	bne.n	80032c6 <memset+0xa>
 80032c4:	4770      	bx	lr
 80032c6:	f803 1b01 	strb.w	r1, [r3], #1
 80032ca:	e7f9      	b.n	80032c0 <memset+0x4>

080032cc <_init>:
 80032cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ce:	bf00      	nop
 80032d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032d2:	bc08      	pop	{r3}
 80032d4:	469e      	mov	lr, r3
 80032d6:	4770      	bx	lr

080032d8 <_fini>:
 80032d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032da:	bf00      	nop
 80032dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032de:	bc08      	pop	{r3}
 80032e0:	469e      	mov	lr, r3
 80032e2:	4770      	bx	lr
