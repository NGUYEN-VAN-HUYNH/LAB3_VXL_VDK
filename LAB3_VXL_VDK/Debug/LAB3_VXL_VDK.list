
LAB3_VXL_VDK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002edc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002fe8  08002fe8  00012fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800300c  0800300c  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  0800300c  0800300c  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800300c  0800300c  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800300c  0800300c  0001300c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003010  08003010  00013010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08003014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000050  08003064  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08003064  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a520  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e99  00000000  00000000  0002a599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002c438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002cf28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175df  00000000  00000000  0002d8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d71b  00000000  00000000  00044ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008294c  00000000  00000000  000525da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4f26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a1c  00000000  00000000  000d4f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000050 	.word	0x20000050
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fd0 	.word	0x08002fd0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000054 	.word	0x20000054
 8000148:	08002fd0 	.word	0x08002fd0

0800014c <display7SEG_East_West>:
 *  Created on: Oct 25, 2024
 *      Author: Admin
 */
#include "7_Segment.h"
#include "main.h"
void display7SEG_East_West(int num) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	// ban dau tat led 7 doan
	HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_SET);
 8000154:	2201      	movs	r2, #1
 8000156:	2101      	movs	r1, #1
 8000158:	489f      	ldr	r0, [pc, #636]	; (80003d8 <display7SEG_East_West+0x28c>)
 800015a:	f001 ff24 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_SET);
 800015e:	2201      	movs	r2, #1
 8000160:	2102      	movs	r1, #2
 8000162:	489d      	ldr	r0, [pc, #628]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000164:	f001 ff1f 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	2104      	movs	r1, #4
 800016c:	489a      	ldr	r0, [pc, #616]	; (80003d8 <display7SEG_East_West+0x28c>)
 800016e:	f001 ff1a 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_SET);
 8000172:	2201      	movs	r2, #1
 8000174:	2108      	movs	r1, #8
 8000176:	4898      	ldr	r0, [pc, #608]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000178:	f001 ff15 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_E, GPIO_PIN_SET);
 800017c:	2201      	movs	r2, #1
 800017e:	2110      	movs	r1, #16
 8000180:	4895      	ldr	r0, [pc, #596]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000182:	f001 ff10 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_SET);
 8000186:	2201      	movs	r2, #1
 8000188:	2120      	movs	r1, #32
 800018a:	4893      	ldr	r0, [pc, #588]	; (80003d8 <display7SEG_East_West+0x28c>)
 800018c:	f001 ff0b 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_SET);
 8000190:	2201      	movs	r2, #1
 8000192:	2140      	movs	r1, #64	; 0x40
 8000194:	4890      	ldr	r0, [pc, #576]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000196:	f001 ff06 	bl	8001fa6 <HAL_GPIO_WritePin>
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b09      	cmp	r3, #9
 800019e:	f200 8116 	bhi.w	80003ce <display7SEG_East_West+0x282>
 80001a2:	a201      	add	r2, pc, #4	; (adr r2, 80001a8 <display7SEG_East_West+0x5c>)
 80001a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001a8:	080001d1 	.word	0x080001d1
 80001ac:	0800020f 	.word	0x0800020f
 80001b0:	08000225 	.word	0x08000225
 80001b4:	08000259 	.word	0x08000259
 80001b8:	0800028d 	.word	0x0800028d
 80001bc:	080002b7 	.word	0x080002b7
 80001c0:	080002eb 	.word	0x080002eb
 80001c4:	08000329 	.word	0x08000329
 80001c8:	08000349 	.word	0x08000349
 80001cc:	08000391 	.word	0x08000391

	// dieu khien led 7 doan
	switch (num) {
	case 0:
		HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2101      	movs	r1, #1
 80001d4:	4880      	ldr	r0, [pc, #512]	; (80003d8 <display7SEG_East_West+0x28c>)
 80001d6:	f001 fee6 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 80001da:	2200      	movs	r2, #0
 80001dc:	2102      	movs	r1, #2
 80001de:	487e      	ldr	r0, [pc, #504]	; (80003d8 <display7SEG_East_West+0x28c>)
 80001e0:	f001 fee1 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2104      	movs	r1, #4
 80001e8:	487b      	ldr	r0, [pc, #492]	; (80003d8 <display7SEG_East_West+0x28c>)
 80001ea:	f001 fedc 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 80001ee:	2200      	movs	r2, #0
 80001f0:	2108      	movs	r1, #8
 80001f2:	4879      	ldr	r0, [pc, #484]	; (80003d8 <display7SEG_East_West+0x28c>)
 80001f4:	f001 fed7 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E, GPIO_PIN_RESET);
 80001f8:	2200      	movs	r2, #0
 80001fa:	2110      	movs	r1, #16
 80001fc:	4876      	ldr	r0, [pc, #472]	; (80003d8 <display7SEG_East_West+0x28c>)
 80001fe:	f001 fed2 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_RESET);
 8000202:	2200      	movs	r2, #0
 8000204:	2120      	movs	r1, #32
 8000206:	4874      	ldr	r0, [pc, #464]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000208:	f001 fecd 	bl	8001fa6 <HAL_GPIO_WritePin>
		break;
 800020c:	e0e0      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 1:
		HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	2102      	movs	r1, #2
 8000212:	4871      	ldr	r0, [pc, #452]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000214:	f001 fec7 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 8000218:	2200      	movs	r2, #0
 800021a:	2104      	movs	r1, #4
 800021c:	486e      	ldr	r0, [pc, #440]	; (80003d8 <display7SEG_East_West+0x28c>)
 800021e:	f001 fec2 	bl	8001fa6 <HAL_GPIO_WritePin>
		break;
 8000222:	e0d5      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 2:
		HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 8000224:	2200      	movs	r2, #0
 8000226:	2101      	movs	r1, #1
 8000228:	486b      	ldr	r0, [pc, #428]	; (80003d8 <display7SEG_East_West+0x28c>)
 800022a:	f001 febc 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 800022e:	2200      	movs	r2, #0
 8000230:	2102      	movs	r1, #2
 8000232:	4869      	ldr	r0, [pc, #420]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000234:	f001 feb7 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	2108      	movs	r1, #8
 800023c:	4866      	ldr	r0, [pc, #408]	; (80003d8 <display7SEG_East_West+0x28c>)
 800023e:	f001 feb2 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E, GPIO_PIN_RESET);
 8000242:	2200      	movs	r2, #0
 8000244:	2110      	movs	r1, #16
 8000246:	4864      	ldr	r0, [pc, #400]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000248:	f001 fead 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 800024c:	2200      	movs	r2, #0
 800024e:	2140      	movs	r1, #64	; 0x40
 8000250:	4861      	ldr	r0, [pc, #388]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000252:	f001 fea8 	bl	8001fa6 <HAL_GPIO_WritePin>
		break;
 8000256:	e0bb      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 3:
		HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	2101      	movs	r1, #1
 800025c:	485e      	ldr	r0, [pc, #376]	; (80003d8 <display7SEG_East_West+0x28c>)
 800025e:	f001 fea2 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	2102      	movs	r1, #2
 8000266:	485c      	ldr	r0, [pc, #368]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000268:	f001 fe9d 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 800026c:	2200      	movs	r2, #0
 800026e:	2104      	movs	r1, #4
 8000270:	4859      	ldr	r0, [pc, #356]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000272:	f001 fe98 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	2108      	movs	r1, #8
 800027a:	4857      	ldr	r0, [pc, #348]	; (80003d8 <display7SEG_East_West+0x28c>)
 800027c:	f001 fe93 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	2140      	movs	r1, #64	; 0x40
 8000284:	4854      	ldr	r0, [pc, #336]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000286:	f001 fe8e 	bl	8001fa6 <HAL_GPIO_WritePin>
		break;
 800028a:	e0a1      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 4:
		HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 800028c:	2200      	movs	r2, #0
 800028e:	2102      	movs	r1, #2
 8000290:	4851      	ldr	r0, [pc, #324]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000292:	f001 fe88 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 8000296:	2200      	movs	r2, #0
 8000298:	2104      	movs	r1, #4
 800029a:	484f      	ldr	r0, [pc, #316]	; (80003d8 <display7SEG_East_West+0x28c>)
 800029c:	f001 fe83 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2120      	movs	r1, #32
 80002a4:	484c      	ldr	r0, [pc, #304]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002a6:	f001 fe7e 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 80002aa:	2200      	movs	r2, #0
 80002ac:	2140      	movs	r1, #64	; 0x40
 80002ae:	484a      	ldr	r0, [pc, #296]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002b0:	f001 fe79 	bl	8001fa6 <HAL_GPIO_WritePin>
		break;
 80002b4:	e08c      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 5:
		HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2101      	movs	r1, #1
 80002ba:	4847      	ldr	r0, [pc, #284]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002bc:	f001 fe73 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2104      	movs	r1, #4
 80002c4:	4844      	ldr	r0, [pc, #272]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002c6:	f001 fe6e 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2108      	movs	r1, #8
 80002ce:	4842      	ldr	r0, [pc, #264]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002d0:	f001 fe69 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2120      	movs	r1, #32
 80002d8:	483f      	ldr	r0, [pc, #252]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002da:	f001 fe64 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2140      	movs	r1, #64	; 0x40
 80002e2:	483d      	ldr	r0, [pc, #244]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002e4:	f001 fe5f 	bl	8001fa6 <HAL_GPIO_WritePin>
		break;
 80002e8:	e072      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 6:
		HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2101      	movs	r1, #1
 80002ee:	483a      	ldr	r0, [pc, #232]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002f0:	f001 fe59 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2104      	movs	r1, #4
 80002f8:	4837      	ldr	r0, [pc, #220]	; (80003d8 <display7SEG_East_West+0x28c>)
 80002fa:	f001 fe54 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 80002fe:	2200      	movs	r2, #0
 8000300:	2108      	movs	r1, #8
 8000302:	4835      	ldr	r0, [pc, #212]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000304:	f001 fe4f 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2110      	movs	r1, #16
 800030c:	4832      	ldr	r0, [pc, #200]	; (80003d8 <display7SEG_East_West+0x28c>)
 800030e:	f001 fe4a 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2120      	movs	r1, #32
 8000316:	4830      	ldr	r0, [pc, #192]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000318:	f001 fe45 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	2140      	movs	r1, #64	; 0x40
 8000320:	482d      	ldr	r0, [pc, #180]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000322:	f001 fe40 	bl	8001fa6 <HAL_GPIO_WritePin>
		break;
 8000326:	e053      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 7:
		HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	2101      	movs	r1, #1
 800032c:	482a      	ldr	r0, [pc, #168]	; (80003d8 <display7SEG_East_West+0x28c>)
 800032e:	f001 fe3a 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	2102      	movs	r1, #2
 8000336:	4828      	ldr	r0, [pc, #160]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000338:	f001 fe35 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2104      	movs	r1, #4
 8000340:	4825      	ldr	r0, [pc, #148]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000342:	f001 fe30 	bl	8001fa6 <HAL_GPIO_WritePin>
		break;
 8000346:	e043      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 8:
		HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	2101      	movs	r1, #1
 800034c:	4822      	ldr	r0, [pc, #136]	; (80003d8 <display7SEG_East_West+0x28c>)
 800034e:	f001 fe2a 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	2102      	movs	r1, #2
 8000356:	4820      	ldr	r0, [pc, #128]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000358:	f001 fe25 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	2104      	movs	r1, #4
 8000360:	481d      	ldr	r0, [pc, #116]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000362:	f001 fe20 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	2108      	movs	r1, #8
 800036a:	481b      	ldr	r0, [pc, #108]	; (80003d8 <display7SEG_East_West+0x28c>)
 800036c:	f001 fe1b 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E, GPIO_PIN_RESET);
 8000370:	2200      	movs	r2, #0
 8000372:	2110      	movs	r1, #16
 8000374:	4818      	ldr	r0, [pc, #96]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000376:	f001 fe16 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_RESET);
 800037a:	2200      	movs	r2, #0
 800037c:	2120      	movs	r1, #32
 800037e:	4816      	ldr	r0, [pc, #88]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000380:	f001 fe11 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2140      	movs	r1, #64	; 0x40
 8000388:	4813      	ldr	r0, [pc, #76]	; (80003d8 <display7SEG_East_West+0x28c>)
 800038a:	f001 fe0c 	bl	8001fa6 <HAL_GPIO_WritePin>
		break;
 800038e:	e01f      	b.n	80003d0 <display7SEG_East_West+0x284>
	case 9:
		HAL_GPIO_WritePin(GPIOB, SEG_A, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	2101      	movs	r1, #1
 8000394:	4810      	ldr	r0, [pc, #64]	; (80003d8 <display7SEG_East_West+0x28c>)
 8000396:	f001 fe06 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B, GPIO_PIN_RESET);
 800039a:	2200      	movs	r2, #0
 800039c:	2102      	movs	r1, #2
 800039e:	480e      	ldr	r0, [pc, #56]	; (80003d8 <display7SEG_East_West+0x28c>)
 80003a0:	f001 fe01 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2104      	movs	r1, #4
 80003a8:	480b      	ldr	r0, [pc, #44]	; (80003d8 <display7SEG_East_West+0x28c>)
 80003aa:	f001 fdfc 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D, GPIO_PIN_RESET);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2108      	movs	r1, #8
 80003b2:	4809      	ldr	r0, [pc, #36]	; (80003d8 <display7SEG_East_West+0x28c>)
 80003b4:	f001 fdf7 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F, GPIO_PIN_RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2120      	movs	r1, #32
 80003bc:	4806      	ldr	r0, [pc, #24]	; (80003d8 <display7SEG_East_West+0x28c>)
 80003be:	f001 fdf2 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G, GPIO_PIN_RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2140      	movs	r1, #64	; 0x40
 80003c6:	4804      	ldr	r0, [pc, #16]	; (80003d8 <display7SEG_East_West+0x28c>)
 80003c8:	f001 fded 	bl	8001fa6 <HAL_GPIO_WritePin>
		break;
 80003cc:	e000      	b.n	80003d0 <display7SEG_East_West+0x284>
	default:
		break; // khong lm gi ca
 80003ce:	bf00      	nop
	}

}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40010c00 	.word	0x40010c00

080003dc <display7SEG_North_South>:

void display7SEG_North_South(int num) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	// ban dau tat led 7 doan
	HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_SET);
 80003e4:	2201      	movs	r2, #1
 80003e6:	2180      	movs	r1, #128	; 0x80
 80003e8:	48b7      	ldr	r0, [pc, #732]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80003ea:	f001 fddc 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f4:	48b4      	ldr	r0, [pc, #720]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80003f6:	f001 fdd6 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000400:	48b1      	ldr	r0, [pc, #708]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000402:	f001 fdd0 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_SET);
 8000406:	2201      	movs	r2, #1
 8000408:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800040c:	48ae      	ldr	r0, [pc, #696]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800040e:	f001 fdca 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_E1, GPIO_PIN_SET);
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000418:	48ab      	ldr	r0, [pc, #684]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800041a:	f001 fdc4 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_SET);
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000424:	48a8      	ldr	r0, [pc, #672]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000426:	f001 fdbe 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_SET);
 800042a:	2201      	movs	r2, #1
 800042c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000430:	48a5      	ldr	r0, [pc, #660]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000432:	f001 fdb8 	bl	8001fa6 <HAL_GPIO_WritePin>
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2b09      	cmp	r3, #9
 800043a:	f200 813f 	bhi.w	80006bc <display7SEG_North_South+0x2e0>
 800043e:	a201      	add	r2, pc, #4	; (adr r2, 8000444 <display7SEG_North_South+0x68>)
 8000440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000444:	0800046d 	.word	0x0800046d
 8000448:	080004b5 	.word	0x080004b5
 800044c:	080004cf 	.word	0x080004cf
 8000450:	0800050b 	.word	0x0800050b
 8000454:	08000547 	.word	0x08000547
 8000458:	08000579 	.word	0x08000579
 800045c:	080005b5 	.word	0x080005b5
 8000460:	080005fd 	.word	0x080005fd
 8000464:	08000621 	.word	0x08000621
 8000468:	08000675 	.word	0x08000675

	// dieu khien led 7 doan
	switch (num) {
	case 0:
		HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	2180      	movs	r1, #128	; 0x80
 8000470:	4895      	ldr	r0, [pc, #596]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000472:	f001 fd98 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	f44f 7180 	mov.w	r1, #256	; 0x100
 800047c:	4892      	ldr	r0, [pc, #584]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800047e:	f001 fd92 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000488:	488f      	ldr	r0, [pc, #572]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800048a:	f001 fd8c 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 800048e:	2200      	movs	r2, #0
 8000490:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000494:	488c      	ldr	r0, [pc, #560]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000496:	f001 fd86 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E1, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004a0:	4889      	ldr	r0, [pc, #548]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004a2:	f001 fd80 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004ac:	4886      	ldr	r0, [pc, #536]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004ae:	f001 fd7a 	bl	8001fa6 <HAL_GPIO_WritePin>
		break;
 80004b2:	e104      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 1:
		HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ba:	4883      	ldr	r0, [pc, #524]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004bc:	f001 fd73 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004c6:	4880      	ldr	r0, [pc, #512]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004c8:	f001 fd6d 	bl	8001fa6 <HAL_GPIO_WritePin>
		break;
 80004cc:	e0f7      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 2:
		HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2180      	movs	r1, #128	; 0x80
 80004d2:	487d      	ldr	r0, [pc, #500]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004d4:	f001 fd67 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004de:	487a      	ldr	r0, [pc, #488]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004e0:	f001 fd61 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ea:	4877      	ldr	r0, [pc, #476]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004ec:	f001 fd5b 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E1, GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f6:	4874      	ldr	r0, [pc, #464]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80004f8:	f001 fd55 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000502:	4871      	ldr	r0, [pc, #452]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000504:	f001 fd4f 	bl	8001fa6 <HAL_GPIO_WritePin>
		break;
 8000508:	e0d9      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 3:
		HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	2180      	movs	r1, #128	; 0x80
 800050e:	486e      	ldr	r0, [pc, #440]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000510:	f001 fd49 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 7180 	mov.w	r1, #256	; 0x100
 800051a:	486b      	ldr	r0, [pc, #428]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800051c:	f001 fd43 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000526:	4868      	ldr	r0, [pc, #416]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000528:	f001 fd3d 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000532:	4865      	ldr	r0, [pc, #404]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000534:	f001 fd37 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053e:	4862      	ldr	r0, [pc, #392]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000540:	f001 fd31 	bl	8001fa6 <HAL_GPIO_WritePin>
		break;
 8000544:	e0bb      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 4:
		HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054c:	485e      	ldr	r0, [pc, #376]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800054e:	f001 fd2a 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000558:	485b      	ldr	r0, [pc, #364]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800055a:	f001 fd24 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000564:	4858      	ldr	r0, [pc, #352]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000566:	f001 fd1e 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000570:	4855      	ldr	r0, [pc, #340]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000572:	f001 fd18 	bl	8001fa6 <HAL_GPIO_WritePin>
		break;
 8000576:	e0a2      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 5:
		HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2180      	movs	r1, #128	; 0x80
 800057c:	4852      	ldr	r0, [pc, #328]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800057e:	f001 fd12 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000588:	484f      	ldr	r0, [pc, #316]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800058a:	f001 fd0c 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000594:	484c      	ldr	r0, [pc, #304]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000596:	f001 fd06 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a0:	4849      	ldr	r0, [pc, #292]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005a2:	f001 fd00 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ac:	4846      	ldr	r0, [pc, #280]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005ae:	f001 fcfa 	bl	8001fa6 <HAL_GPIO_WritePin>
		break;
 80005b2:	e084      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 6:
		HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2180      	movs	r1, #128	; 0x80
 80005b8:	4843      	ldr	r0, [pc, #268]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005ba:	f001 fcf4 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c4:	4840      	ldr	r0, [pc, #256]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005c6:	f001 fcee 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d0:	483d      	ldr	r0, [pc, #244]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005d2:	f001 fce8 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E1, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005dc:	483a      	ldr	r0, [pc, #232]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005de:	f001 fce2 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e8:	4837      	ldr	r0, [pc, #220]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005ea:	f001 fcdc 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f4:	4834      	ldr	r0, [pc, #208]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80005f6:	f001 fcd6 	bl	8001fa6 <HAL_GPIO_WritePin>
		break;
 80005fa:	e060      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 7:
		HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2180      	movs	r1, #128	; 0x80
 8000600:	4831      	ldr	r0, [pc, #196]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000602:	f001 fcd0 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 7180 	mov.w	r1, #256	; 0x100
 800060c:	482e      	ldr	r0, [pc, #184]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800060e:	f001 fcca 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000618:	482b      	ldr	r0, [pc, #172]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800061a:	f001 fcc4 	bl	8001fa6 <HAL_GPIO_WritePin>
		break;
 800061e:	e04e      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 8:
		HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2180      	movs	r1, #128	; 0x80
 8000624:	4828      	ldr	r0, [pc, #160]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000626:	f001 fcbe 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000630:	4825      	ldr	r0, [pc, #148]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000632:	f001 fcb8 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 7100 	mov.w	r1, #512	; 0x200
 800063c:	4822      	ldr	r0, [pc, #136]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800063e:	f001 fcb2 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000648:	481f      	ldr	r0, [pc, #124]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800064a:	f001 fcac 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_E1, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000654:	481c      	ldr	r0, [pc, #112]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000656:	f001 fca6 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000660:	4819      	ldr	r0, [pc, #100]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000662:	f001 fca0 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800066c:	4816      	ldr	r0, [pc, #88]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800066e:	f001 fc9a 	bl	8001fa6 <HAL_GPIO_WritePin>
		break;
 8000672:	e024      	b.n	80006be <display7SEG_North_South+0x2e2>
	case 9:
		HAL_GPIO_WritePin(GPIOB, SEG_A1, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	2180      	movs	r1, #128	; 0x80
 8000678:	4813      	ldr	r0, [pc, #76]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800067a:	f001 fc94 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_B1, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000684:	4810      	ldr	r0, [pc, #64]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000686:	f001 fc8e 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_C1, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <display7SEG_North_South+0x2ec>)
 8000692:	f001 fc88 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_D1, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800069c:	480a      	ldr	r0, [pc, #40]	; (80006c8 <display7SEG_North_South+0x2ec>)
 800069e:	f001 fc82 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_F1, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a8:	4807      	ldr	r0, [pc, #28]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80006aa:	f001 fc7c 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG_G1, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <display7SEG_North_South+0x2ec>)
 80006b6:	f001 fc76 	bl	8001fa6 <HAL_GPIO_WritePin>
		break;
 80006ba:	e000      	b.n	80006be <display7SEG_North_South+0x2e2>
	default:
		break; // khong lm gi ca
 80006bc:	bf00      	nop
	}

}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40010c00 	.word	0x40010c00

080006cc <isButton1Pressed>:

int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;

int isButton1Pressed() {
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
	if (button1_flag == 1) {
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <isButton1Pressed+0x20>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d104      	bne.n	80006e2 <isButton1Pressed+0x16>
		button1_flag = 0;
 80006d8:	4b04      	ldr	r3, [pc, #16]	; (80006ec <isButton1Pressed+0x20>)
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
		return 1;
 80006de:	2301      	movs	r3, #1
 80006e0:	e000      	b.n	80006e4 <isButton1Pressed+0x18>
	}
	return 0;
 80006e2:	2300      	movs	r3, #0
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	2000006c 	.word	0x2000006c

080006f0 <isButton2Pressed>:

int isButton2Pressed() {
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
	if (button2_flag == 1) {
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <isButton2Pressed+0x20>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d104      	bne.n	8000706 <isButton2Pressed+0x16>
		button2_flag = 0;
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <isButton2Pressed+0x20>)
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
		return 1;
 8000702:	2301      	movs	r3, #1
 8000704:	e000      	b.n	8000708 <isButton2Pressed+0x18>
	}
	return 0;
 8000706:	2300      	movs	r3, #0
}
 8000708:	4618      	mov	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	20000070 	.word	0x20000070

08000714 <isButton3Pressed>:

int isButton3Pressed() {
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
	if (button3_flag == 1) {
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <isButton3Pressed+0x20>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d104      	bne.n	800072a <isButton3Pressed+0x16>
		button3_flag = 0;
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <isButton3Pressed+0x20>)
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
		return 1;
 8000726:	2301      	movs	r3, #1
 8000728:	e000      	b.n	800072c <isButton3Pressed+0x18>
	}
	return 0;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	20000074 	.word	0x20000074

08000738 <getKeyInput>:

void getKeyInput() {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0

	KeyRegB1_0 = KeyRegB1_1;
 800073c:	4b6b      	ldr	r3, [pc, #428]	; (80008ec <getKeyInput+0x1b4>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a6b      	ldr	r2, [pc, #428]	; (80008f0 <getKeyInput+0x1b8>)
 8000742:	6013      	str	r3, [r2, #0]
	KeyRegB1_1 = KeyRegB1_2;
 8000744:	4b6b      	ldr	r3, [pc, #428]	; (80008f4 <getKeyInput+0x1bc>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a68      	ldr	r2, [pc, #416]	; (80008ec <getKeyInput+0x1b4>)
 800074a:	6013      	str	r3, [r2, #0]
	KeyRegB1_2 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 800074c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000750:	4869      	ldr	r0, [pc, #420]	; (80008f8 <getKeyInput+0x1c0>)
 8000752:	f001 fc11 	bl	8001f78 <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	461a      	mov	r2, r3
 800075a:	4b66      	ldr	r3, [pc, #408]	; (80008f4 <getKeyInput+0x1bc>)
 800075c:	601a      	str	r2, [r3, #0]

	KeyRegB2_0 = KeyRegB2_1;
 800075e:	4b67      	ldr	r3, [pc, #412]	; (80008fc <getKeyInput+0x1c4>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a67      	ldr	r2, [pc, #412]	; (8000900 <getKeyInput+0x1c8>)
 8000764:	6013      	str	r3, [r2, #0]
	KeyRegB2_1 = KeyRegB2_2;
 8000766:	4b67      	ldr	r3, [pc, #412]	; (8000904 <getKeyInput+0x1cc>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a64      	ldr	r2, [pc, #400]	; (80008fc <getKeyInput+0x1c4>)
 800076c:	6013      	str	r3, [r2, #0]
	KeyRegB2_2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 800076e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000772:	4861      	ldr	r0, [pc, #388]	; (80008f8 <getKeyInput+0x1c0>)
 8000774:	f001 fc00 	bl	8001f78 <HAL_GPIO_ReadPin>
 8000778:	4603      	mov	r3, r0
 800077a:	461a      	mov	r2, r3
 800077c:	4b61      	ldr	r3, [pc, #388]	; (8000904 <getKeyInput+0x1cc>)
 800077e:	601a      	str	r2, [r3, #0]

	KeyRegB3_0 = KeyRegB3_1;
 8000780:	4b61      	ldr	r3, [pc, #388]	; (8000908 <getKeyInput+0x1d0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a61      	ldr	r2, [pc, #388]	; (800090c <getKeyInput+0x1d4>)
 8000786:	6013      	str	r3, [r2, #0]
	KeyRegB3_1 = KeyRegB3_2;
 8000788:	4b61      	ldr	r3, [pc, #388]	; (8000910 <getKeyInput+0x1d8>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a5e      	ldr	r2, [pc, #376]	; (8000908 <getKeyInput+0x1d0>)
 800078e:	6013      	str	r3, [r2, #0]
	KeyRegB3_2 = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000790:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000794:	4858      	ldr	r0, [pc, #352]	; (80008f8 <getKeyInput+0x1c0>)
 8000796:	f001 fbef 	bl	8001f78 <HAL_GPIO_ReadPin>
 800079a:	4603      	mov	r3, r0
 800079c:	461a      	mov	r2, r3
 800079e:	4b5c      	ldr	r3, [pc, #368]	; (8000910 <getKeyInput+0x1d8>)
 80007a0:	601a      	str	r2, [r3, #0]

	// xu ly button 1
	if ((KeyRegB1_0 == KeyRegB1_1) && (KeyRegB1_1 == KeyRegB1_2)) {
 80007a2:	4b53      	ldr	r3, [pc, #332]	; (80008f0 <getKeyInput+0x1b8>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	4b51      	ldr	r3, [pc, #324]	; (80008ec <getKeyInput+0x1b4>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d12f      	bne.n	800080e <getKeyInput+0xd6>
 80007ae:	4b4f      	ldr	r3, [pc, #316]	; (80008ec <getKeyInput+0x1b4>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	4b50      	ldr	r3, [pc, #320]	; (80008f4 <getKeyInput+0x1bc>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d129      	bne.n	800080e <getKeyInput+0xd6>
		if (KeyRegB1_3 != KeyRegB1_2) {
 80007ba:	4b56      	ldr	r3, [pc, #344]	; (8000914 <getKeyInput+0x1dc>)
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	4b4d      	ldr	r3, [pc, #308]	; (80008f4 <getKeyInput+0x1bc>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d00f      	beq.n	80007e6 <getKeyInput+0xae>
			KeyRegB1_3 = KeyRegB1_2;
 80007c6:	4b4b      	ldr	r3, [pc, #300]	; (80008f4 <getKeyInput+0x1bc>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a52      	ldr	r2, [pc, #328]	; (8000914 <getKeyInput+0x1dc>)
 80007cc:	6013      	str	r3, [r2, #0]

			if (KeyRegB1_2 == PRESSED_STATE) {
 80007ce:	4b49      	ldr	r3, [pc, #292]	; (80008f4 <getKeyInput+0x1bc>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d11b      	bne.n	800080e <getKeyInput+0xd6>
				TimeOutForKeyPress = 500;
 80007d6:	4b50      	ldr	r3, [pc, #320]	; (8000918 <getKeyInput+0x1e0>)
 80007d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007dc:	601a      	str	r2, [r3, #0]
				button1_flag = 1;
 80007de:	4b4f      	ldr	r3, [pc, #316]	; (800091c <getKeyInput+0x1e4>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	e013      	b.n	800080e <getKeyInput+0xd6>
			}

		} else {
			TimeOutForKeyPress--;
 80007e6:	4b4c      	ldr	r3, [pc, #304]	; (8000918 <getKeyInput+0x1e0>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	4a4a      	ldr	r2, [pc, #296]	; (8000918 <getKeyInput+0x1e0>)
 80007ee:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress == 0) {
 80007f0:	4b49      	ldr	r3, [pc, #292]	; (8000918 <getKeyInput+0x1e0>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d10a      	bne.n	800080e <getKeyInput+0xd6>
				TimeOutForKeyPress = 500;
 80007f8:	4b47      	ldr	r3, [pc, #284]	; (8000918 <getKeyInput+0x1e0>)
 80007fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007fe:	601a      	str	r2, [r3, #0]
				if (KeyRegB1_2 == PRESSED_STATE) {
 8000800:	4b3c      	ldr	r3, [pc, #240]	; (80008f4 <getKeyInput+0x1bc>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d102      	bne.n	800080e <getKeyInput+0xd6>
					button1_flag = 1;
 8000808:	4b44      	ldr	r3, [pc, #272]	; (800091c <getKeyInput+0x1e4>)
 800080a:	2201      	movs	r2, #1
 800080c:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
	// xu ly button 2
	if ((KeyRegB2_0 == KeyRegB2_1) && (KeyRegB2_1 == KeyRegB2_2)) {
 800080e:	4b3c      	ldr	r3, [pc, #240]	; (8000900 <getKeyInput+0x1c8>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	4b3a      	ldr	r3, [pc, #232]	; (80008fc <getKeyInput+0x1c4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	429a      	cmp	r2, r3
 8000818:	d12f      	bne.n	800087a <getKeyInput+0x142>
 800081a:	4b38      	ldr	r3, [pc, #224]	; (80008fc <getKeyInput+0x1c4>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	4b39      	ldr	r3, [pc, #228]	; (8000904 <getKeyInput+0x1cc>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	429a      	cmp	r2, r3
 8000824:	d129      	bne.n	800087a <getKeyInput+0x142>
		if (KeyRegB2_3 != KeyRegB2_2) {
 8000826:	4b3e      	ldr	r3, [pc, #248]	; (8000920 <getKeyInput+0x1e8>)
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	4b36      	ldr	r3, [pc, #216]	; (8000904 <getKeyInput+0x1cc>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	429a      	cmp	r2, r3
 8000830:	d00f      	beq.n	8000852 <getKeyInput+0x11a>
			KeyRegB2_3 = KeyRegB2_2;
 8000832:	4b34      	ldr	r3, [pc, #208]	; (8000904 <getKeyInput+0x1cc>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a3a      	ldr	r2, [pc, #232]	; (8000920 <getKeyInput+0x1e8>)
 8000838:	6013      	str	r3, [r2, #0]

			if (KeyRegB2_2 == PRESSED_STATE) {
 800083a:	4b32      	ldr	r3, [pc, #200]	; (8000904 <getKeyInput+0x1cc>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d11b      	bne.n	800087a <getKeyInput+0x142>
				TimeOutForKeyPress = 500;
 8000842:	4b35      	ldr	r3, [pc, #212]	; (8000918 <getKeyInput+0x1e0>)
 8000844:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000848:	601a      	str	r2, [r3, #0]
				button2_flag = 1;
 800084a:	4b36      	ldr	r3, [pc, #216]	; (8000924 <getKeyInput+0x1ec>)
 800084c:	2201      	movs	r2, #1
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	e013      	b.n	800087a <getKeyInput+0x142>
			}

		} else {
			TimeOutForKeyPress--;
 8000852:	4b31      	ldr	r3, [pc, #196]	; (8000918 <getKeyInput+0x1e0>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	3b01      	subs	r3, #1
 8000858:	4a2f      	ldr	r2, [pc, #188]	; (8000918 <getKeyInput+0x1e0>)
 800085a:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress == 0) {
 800085c:	4b2e      	ldr	r3, [pc, #184]	; (8000918 <getKeyInput+0x1e0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d10a      	bne.n	800087a <getKeyInput+0x142>
				TimeOutForKeyPress = 500;
 8000864:	4b2c      	ldr	r3, [pc, #176]	; (8000918 <getKeyInput+0x1e0>)
 8000866:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800086a:	601a      	str	r2, [r3, #0]
				if (KeyRegB2_2 == PRESSED_STATE) {
 800086c:	4b25      	ldr	r3, [pc, #148]	; (8000904 <getKeyInput+0x1cc>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d102      	bne.n	800087a <getKeyInput+0x142>
					button2_flag = 1;
 8000874:	4b2b      	ldr	r3, [pc, #172]	; (8000924 <getKeyInput+0x1ec>)
 8000876:	2201      	movs	r2, #1
 8000878:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
	// xu ly button 3
	if ((KeyRegB3_0 == KeyRegB3_1) && (KeyRegB3_1 == KeyRegB3_2)) {
 800087a:	4b24      	ldr	r3, [pc, #144]	; (800090c <getKeyInput+0x1d4>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4b22      	ldr	r3, [pc, #136]	; (8000908 <getKeyInput+0x1d0>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	429a      	cmp	r2, r3
 8000884:	d12f      	bne.n	80008e6 <getKeyInput+0x1ae>
 8000886:	4b20      	ldr	r3, [pc, #128]	; (8000908 <getKeyInput+0x1d0>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	4b21      	ldr	r3, [pc, #132]	; (8000910 <getKeyInput+0x1d8>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	429a      	cmp	r2, r3
 8000890:	d129      	bne.n	80008e6 <getKeyInput+0x1ae>
		if (KeyRegB3_3 != KeyRegB3_2) {
 8000892:	4b25      	ldr	r3, [pc, #148]	; (8000928 <getKeyInput+0x1f0>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <getKeyInput+0x1d8>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	429a      	cmp	r2, r3
 800089c:	d00f      	beq.n	80008be <getKeyInput+0x186>
			KeyRegB3_3 = KeyRegB3_2;
 800089e:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <getKeyInput+0x1d8>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a21      	ldr	r2, [pc, #132]	; (8000928 <getKeyInput+0x1f0>)
 80008a4:	6013      	str	r3, [r2, #0]

			if (KeyRegB3_2 == PRESSED_STATE) {
 80008a6:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <getKeyInput+0x1d8>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d11b      	bne.n	80008e6 <getKeyInput+0x1ae>
				TimeOutForKeyPress = 500;
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <getKeyInput+0x1e0>)
 80008b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008b4:	601a      	str	r2, [r3, #0]
				button3_flag = 1;
 80008b6:	4b1d      	ldr	r3, [pc, #116]	; (800092c <getKeyInput+0x1f4>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	601a      	str	r2, [r3, #0]
					button3_flag = 1;
				}
			}
		}
	}
}
 80008bc:	e013      	b.n	80008e6 <getKeyInput+0x1ae>
			TimeOutForKeyPress--;
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <getKeyInput+0x1e0>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	4a14      	ldr	r2, [pc, #80]	; (8000918 <getKeyInput+0x1e0>)
 80008c6:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress == 0) {
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <getKeyInput+0x1e0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d10a      	bne.n	80008e6 <getKeyInput+0x1ae>
				TimeOutForKeyPress = 500;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <getKeyInput+0x1e0>)
 80008d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008d6:	601a      	str	r2, [r3, #0]
				if (KeyRegB3_2 == PRESSED_STATE) {
 80008d8:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <getKeyInput+0x1d8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d102      	bne.n	80008e6 <getKeyInput+0x1ae>
					button3_flag = 1;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <getKeyInput+0x1f4>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	601a      	str	r2, [r3, #0]
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000004 	.word	0x20000004
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000008 	.word	0x20000008
 80008f8:	40010800 	.word	0x40010800
 80008fc:	20000014 	.word	0x20000014
 8000900:	20000010 	.word	0x20000010
 8000904:	20000018 	.word	0x20000018
 8000908:	20000024 	.word	0x20000024
 800090c:	20000020 	.word	0x20000020
 8000910:	20000028 	.word	0x20000028
 8000914:	2000000c 	.word	0x2000000c
 8000918:	20000030 	.word	0x20000030
 800091c:	2000006c 	.word	0x2000006c
 8000920:	2000001c 	.word	0x2000001c
 8000924:	20000070 	.word	0x20000070
 8000928:	2000002c 	.word	0x2000002c
 800092c:	20000074 	.word	0x20000074

08000930 <fsm_automatic_run>:
 *
 *  Created on: Oct 25, 2024
 *      Author: Admin
 */
#include "fsm_automatic.h"
void fsm_automatic_run() {
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af02      	add	r7, sp, #8
	switch (status) {
 8000936:	4b50      	ldr	r3, [pc, #320]	; (8000a78 <fsm_automatic_run+0x148>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d002      	beq.n	8000944 <fsm_automatic_run+0x14>
 800093e:	2b01      	cmp	r3, #1
 8000940:	d04a      	beq.n	80009d8 <fsm_automatic_run+0xa8>
			setTimer1(50);
		}
		break;
	}

}
 8000942:	e095      	b.n	8000a70 <fsm_automatic_run+0x140>
		init_time_traffic(time_red, time_green, time_yellow);
 8000944:	4b4d      	ldr	r3, [pc, #308]	; (8000a7c <fsm_automatic_run+0x14c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a4d      	ldr	r2, [pc, #308]	; (8000a80 <fsm_automatic_run+0x150>)
 800094a:	6811      	ldr	r1, [r2, #0]
 800094c:	4a4d      	ldr	r2, [pc, #308]	; (8000a84 <fsm_automatic_run+0x154>)
 800094e:	6812      	ldr	r2, [r2, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f000 fad7 	bl	8000f04 <init_time_traffic>
		init_traffic_light(RED_COLOR, RED_AUTO, time_red, GREEN_COLOR,
 8000956:	4b49      	ldr	r3, [pc, #292]	; (8000a7c <fsm_automatic_run+0x14c>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	4b49      	ldr	r3, [pc, #292]	; (8000a80 <fsm_automatic_run+0x150>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	9301      	str	r3, [sp, #4]
 8000960:	2306      	movs	r3, #6
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2317      	movs	r3, #23
 8000966:	2105      	movs	r1, #5
 8000968:	2016      	movs	r0, #22
 800096a:	f000 fce1 	bl	8001330 <init_traffic_light>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000974:	4844      	ldr	r0, [pc, #272]	; (8000a88 <fsm_automatic_run+0x158>)
 8000976:	f001 fb16 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800097a:	2201      	movs	r2, #1
 800097c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000980:	4841      	ldr	r0, [pc, #260]	; (8000a88 <fsm_automatic_run+0x158>)
 8000982:	f001 fb10 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800098c:	483e      	ldr	r0, [pc, #248]	; (8000a88 <fsm_automatic_run+0x158>)
 800098e:	f001 fb0a 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000992:	2201      	movs	r2, #1
 8000994:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000998:	483b      	ldr	r0, [pc, #236]	; (8000a88 <fsm_automatic_run+0x158>)
 800099a:	f001 fb04 	bl	8001fa6 <HAL_GPIO_WritePin>
		updateClockBuffer(time_green, time_red);
 800099e:	4b38      	ldr	r3, [pc, #224]	; (8000a80 <fsm_automatic_run+0x150>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a36      	ldr	r2, [pc, #216]	; (8000a7c <fsm_automatic_run+0x14c>)
 80009a4:	6812      	ldr	r2, [r2, #0]
 80009a6:	4611      	mov	r1, r2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 fb75 	bl	8001098 <updateClockBuffer>
		if (isButton1Pressed() == 1) {
 80009ae:	f7ff fe8d 	bl	80006cc <isButton1Pressed>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d158      	bne.n	8000a6a <fsm_automatic_run+0x13a>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009be:	4832      	ldr	r0, [pc, #200]	; (8000a88 <fsm_automatic_run+0x158>)
 80009c0:	f001 faf1 	bl	8001fa6 <HAL_GPIO_WritePin>
			display7SEG_North_South(1);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f7ff fd09 	bl	80003dc <display7SEG_North_South>
			status = MODE_1;
 80009ca:	4b2b      	ldr	r3, [pc, #172]	; (8000a78 <fsm_automatic_run+0x148>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 80009d0:	2064      	movs	r0, #100	; 0x64
 80009d2:	f000 ff93 	bl	80018fc <setTimer1>
		break;
 80009d6:	e048      	b.n	8000a6a <fsm_automatic_run+0x13a>
		if (timer1_flag == 1) {
 80009d8:	4b2c      	ldr	r3, [pc, #176]	; (8000a8c <fsm_automatic_run+0x15c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d119      	bne.n	8000a14 <fsm_automatic_run+0xe4>
			display();
 80009e0:	f000 fc02 	bl	80011e8 <display>
			dem--;
 80009e4:	4b2a      	ldr	r3, [pc, #168]	; (8000a90 <fsm_automatic_run+0x160>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	3b01      	subs	r3, #1
 80009ea:	4a29      	ldr	r2, [pc, #164]	; (8000a90 <fsm_automatic_run+0x160>)
 80009ec:	6013      	str	r3, [r2, #0]
			if (dem == 0) {
 80009ee:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <fsm_automatic_run+0x160>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d10b      	bne.n	8000a0e <fsm_automatic_run+0xde>
				light_traffic_run(time_red, time_yellow, time_green);
 80009f6:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <fsm_automatic_run+0x14c>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a22      	ldr	r2, [pc, #136]	; (8000a84 <fsm_automatic_run+0x154>)
 80009fc:	6811      	ldr	r1, [r2, #0]
 80009fe:	4a20      	ldr	r2, [pc, #128]	; (8000a80 <fsm_automatic_run+0x150>)
 8000a00:	6812      	ldr	r2, [r2, #0]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 fcbe 	bl	8001384 <light_traffic_run>
				dem = 4;
 8000a08:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <fsm_automatic_run+0x160>)
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	601a      	str	r2, [r3, #0]
			setTimer1(25);
 8000a0e:	2019      	movs	r0, #25
 8000a10:	f000 ff74 	bl	80018fc <setTimer1>
		if (isButton1Pressed() == 1) {
 8000a14:	f7ff fe5a 	bl	80006cc <isButton1Pressed>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d127      	bne.n	8000a6e <fsm_automatic_run+0x13e>
			status = MODE_2;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <fsm_automatic_run+0x148>)
 8000a20:	2202      	movs	r2, #2
 8000a22:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a2a:	4817      	ldr	r0, [pc, #92]	; (8000a88 <fsm_automatic_run+0x158>)
 8000a2c:	f001 fabb 	bl	8001fa6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a36:	4814      	ldr	r0, [pc, #80]	; (8000a88 <fsm_automatic_run+0x158>)
 8000a38:	f001 fab5 	bl	8001fa6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a42:	4811      	ldr	r0, [pc, #68]	; (8000a88 <fsm_automatic_run+0x158>)
 8000a44:	f001 faaf 	bl	8001fa6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a4e:	480e      	ldr	r0, [pc, #56]	; (8000a88 <fsm_automatic_run+0x158>)
 8000a50:	f001 faa9 	bl	8001fa6 <HAL_GPIO_WritePin>
			display7SEG_North_South(2);
 8000a54:	2002      	movs	r0, #2
 8000a56:	f7ff fcc1 	bl	80003dc <display7SEG_North_South>
			clearLed();
 8000a5a:	f000 fa6d 	bl	8000f38 <clearLed>
			clearLed1();
 8000a5e:	f000 fac3 	bl	8000fe8 <clearLed1>
			setTimer1(50);
 8000a62:	2032      	movs	r0, #50	; 0x32
 8000a64:	f000 ff4a 	bl	80018fc <setTimer1>
		break;
 8000a68:	e001      	b.n	8000a6e <fsm_automatic_run+0x13e>
		break;
 8000a6a:	bf00      	nop
 8000a6c:	e000      	b.n	8000a70 <fsm_automatic_run+0x140>
		break;
 8000a6e:	bf00      	nop
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000084 	.word	0x20000084
 8000a7c:	20000038 	.word	0x20000038
 8000a80:	2000003c 	.word	0x2000003c
 8000a84:	20000040 	.word	0x20000040
 8000a88:	40010800 	.word	0x40010800
 8000a8c:	200000c0 	.word	0x200000c0
 8000a90:	20000034 	.word	0x20000034

08000a94 <fsm_manual_run>:
 *
 *  Created on: Oct 26, 2024
 *      Author: Admin
 */
#include "fsm_manual.h"
void fsm_manual_run() {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	switch (status) {
 8000a98:	4b71      	ldr	r3, [pc, #452]	; (8000c60 <fsm_manual_run+0x1cc>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b04      	cmp	r3, #4
 8000a9e:	f000 8093 	beq.w	8000bc8 <fsm_manual_run+0x134>
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	f300 80da 	bgt.w	8000c5c <fsm_manual_run+0x1c8>
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	d002      	beq.n	8000ab2 <fsm_manual_run+0x1e>
 8000aac:	2b03      	cmp	r3, #3
 8000aae:	d046      	beq.n	8000b3e <fsm_manual_run+0xaa>
		}
		break;

	}

}
 8000ab0:	e0d4      	b.n	8000c5c <fsm_manual_run+0x1c8>
		if (timer1_flag == 1) {
 8000ab2:	4b6c      	ldr	r3, [pc, #432]	; (8000c64 <fsm_manual_run+0x1d0>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d10a      	bne.n	8000ad0 <fsm_manual_run+0x3c>
			HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000aba:	2104      	movs	r1, #4
 8000abc:	486a      	ldr	r0, [pc, #424]	; (8000c68 <fsm_manual_run+0x1d4>)
 8000abe:	f001 fa8a 	bl	8001fd6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000ac2:	2120      	movs	r1, #32
 8000ac4:	4868      	ldr	r0, [pc, #416]	; (8000c68 <fsm_manual_run+0x1d4>)
 8000ac6:	f001 fa86 	bl	8001fd6 <HAL_GPIO_TogglePin>
			setTimer1(50);
 8000aca:	2032      	movs	r0, #50	; 0x32
 8000acc:	f000 ff16 	bl	80018fc <setTimer1>
		if (isButton1Pressed() == 1) {
 8000ad0:	f7ff fdfc 	bl	80006cc <isButton1Pressed>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d124      	bne.n	8000b24 <fsm_manual_run+0x90>
			status = MODE_3;
 8000ada:	4b61      	ldr	r3, [pc, #388]	; (8000c60 <fsm_manual_run+0x1cc>)
 8000adc:	2203      	movs	r2, #3
 8000ade:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ae6:	4860      	ldr	r0, [pc, #384]	; (8000c68 <fsm_manual_run+0x1d4>)
 8000ae8:	f001 fa5d 	bl	8001fa6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000af2:	485d      	ldr	r0, [pc, #372]	; (8000c68 <fsm_manual_run+0x1d4>)
 8000af4:	f001 fa57 	bl	8001fa6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000afe:	485a      	ldr	r0, [pc, #360]	; (8000c68 <fsm_manual_run+0x1d4>)
 8000b00:	f001 fa51 	bl	8001fa6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000b04:	2201      	movs	r2, #1
 8000b06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b0a:	4857      	ldr	r0, [pc, #348]	; (8000c68 <fsm_manual_run+0x1d4>)
 8000b0c:	f001 fa4b 	bl	8001fa6 <HAL_GPIO_WritePin>
			display7SEG_North_South(3);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f7ff fc63 	bl	80003dc <display7SEG_North_South>
			clearLed();
 8000b16:	f000 fa0f 	bl	8000f38 <clearLed>
			clearLed1();
 8000b1a:	f000 fa65 	bl	8000fe8 <clearLed1>
			setTimer1(50);
 8000b1e:	2032      	movs	r0, #50	; 0x32
 8000b20:	f000 feec 	bl	80018fc <setTimer1>
		if (isButton2Pressed() == 1) {
 8000b24:	f7ff fde4 	bl	80006f0 <isButton2Pressed>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	f040 8091 	bne.w	8000c52 <fsm_manual_run+0x1be>
			status = RED_EDIT;
 8000b30:	4b4b      	ldr	r3, [pc, #300]	; (8000c60 <fsm_manual_run+0x1cc>)
 8000b32:	2208      	movs	r2, #8
 8000b34:	601a      	str	r2, [r3, #0]
			setTimer1(25);
 8000b36:	2019      	movs	r0, #25
 8000b38:	f000 fee0 	bl	80018fc <setTimer1>
		break;
 8000b3c:	e089      	b.n	8000c52 <fsm_manual_run+0x1be>
		if (timer1_flag == 1) {
 8000b3e:	4b49      	ldr	r3, [pc, #292]	; (8000c64 <fsm_manual_run+0x1d0>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d10a      	bne.n	8000b5c <fsm_manual_run+0xc8>
			HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8000b46:	2110      	movs	r1, #16
 8000b48:	4847      	ldr	r0, [pc, #284]	; (8000c68 <fsm_manual_run+0x1d4>)
 8000b4a:	f001 fa44 	bl	8001fd6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000b4e:	2180      	movs	r1, #128	; 0x80
 8000b50:	4845      	ldr	r0, [pc, #276]	; (8000c68 <fsm_manual_run+0x1d4>)
 8000b52:	f001 fa40 	bl	8001fd6 <HAL_GPIO_TogglePin>
			setTimer1(50);
 8000b56:	2032      	movs	r0, #50	; 0x32
 8000b58:	f000 fed0 	bl	80018fc <setTimer1>
		if (isButton1Pressed() == 1) {
 8000b5c:	f7ff fdb6 	bl	80006cc <isButton1Pressed>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d124      	bne.n	8000bb0 <fsm_manual_run+0x11c>
			status = MODE_4;
 8000b66:	4b3e      	ldr	r3, [pc, #248]	; (8000c60 <fsm_manual_run+0x1cc>)
 8000b68:	2204      	movs	r2, #4
 8000b6a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b72:	483d      	ldr	r0, [pc, #244]	; (8000c68 <fsm_manual_run+0x1d4>)
 8000b74:	f001 fa17 	bl	8001fa6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b7e:	483a      	ldr	r0, [pc, #232]	; (8000c68 <fsm_manual_run+0x1d4>)
 8000b80:	f001 fa11 	bl	8001fa6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b8a:	4837      	ldr	r0, [pc, #220]	; (8000c68 <fsm_manual_run+0x1d4>)
 8000b8c:	f001 fa0b 	bl	8001fa6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b96:	4834      	ldr	r0, [pc, #208]	; (8000c68 <fsm_manual_run+0x1d4>)
 8000b98:	f001 fa05 	bl	8001fa6 <HAL_GPIO_WritePin>
			display7SEG_North_South(4);
 8000b9c:	2004      	movs	r0, #4
 8000b9e:	f7ff fc1d 	bl	80003dc <display7SEG_North_South>
			clearLed();
 8000ba2:	f000 f9c9 	bl	8000f38 <clearLed>
			clearLed1();
 8000ba6:	f000 fa1f 	bl	8000fe8 <clearLed1>
			setTimer1(50);
 8000baa:	2032      	movs	r0, #50	; 0x32
 8000bac:	f000 fea6 	bl	80018fc <setTimer1>
		if (isButton2Pressed() == 1) {
 8000bb0:	f7ff fd9e 	bl	80006f0 <isButton2Pressed>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d14d      	bne.n	8000c56 <fsm_manual_run+0x1c2>
			status = GREEN_EDIT;
 8000bba:	4b29      	ldr	r3, [pc, #164]	; (8000c60 <fsm_manual_run+0x1cc>)
 8000bbc:	220a      	movs	r2, #10
 8000bbe:	601a      	str	r2, [r3, #0]
			setTimer1(25);
 8000bc0:	2019      	movs	r0, #25
 8000bc2:	f000 fe9b 	bl	80018fc <setTimer1>
		break;
 8000bc6:	e046      	b.n	8000c56 <fsm_manual_run+0x1c2>
		if (timer1_flag == 1) {
 8000bc8:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <fsm_manual_run+0x1d0>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d10a      	bne.n	8000be6 <fsm_manual_run+0x152>
			HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8000bd0:	2108      	movs	r1, #8
 8000bd2:	4825      	ldr	r0, [pc, #148]	; (8000c68 <fsm_manual_run+0x1d4>)
 8000bd4:	f001 f9ff 	bl	8001fd6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000bd8:	2140      	movs	r1, #64	; 0x40
 8000bda:	4823      	ldr	r0, [pc, #140]	; (8000c68 <fsm_manual_run+0x1d4>)
 8000bdc:	f001 f9fb 	bl	8001fd6 <HAL_GPIO_TogglePin>
			setTimer1(50);
 8000be0:	2032      	movs	r0, #50	; 0x32
 8000be2:	f000 fe8b 	bl	80018fc <setTimer1>
		if (isButton1Pressed() == 1) {
 8000be6:	f7ff fd71 	bl	80006cc <isButton1Pressed>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d124      	bne.n	8000c3a <fsm_manual_run+0x1a6>
			status = MODE_1;
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <fsm_manual_run+0x1cc>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bfc:	481a      	ldr	r0, [pc, #104]	; (8000c68 <fsm_manual_run+0x1d4>)
 8000bfe:	f001 f9d2 	bl	8001fa6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c08:	4817      	ldr	r0, [pc, #92]	; (8000c68 <fsm_manual_run+0x1d4>)
 8000c0a:	f001 f9cc 	bl	8001fa6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c14:	4814      	ldr	r0, [pc, #80]	; (8000c68 <fsm_manual_run+0x1d4>)
 8000c16:	f001 f9c6 	bl	8001fa6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c20:	4811      	ldr	r0, [pc, #68]	; (8000c68 <fsm_manual_run+0x1d4>)
 8000c22:	f001 f9c0 	bl	8001fa6 <HAL_GPIO_WritePin>
			display7SEG_North_South(1);
 8000c26:	2001      	movs	r0, #1
 8000c28:	f7ff fbd8 	bl	80003dc <display7SEG_North_South>
			clearLed();
 8000c2c:	f000 f984 	bl	8000f38 <clearLed>
			clearLed1();
 8000c30:	f000 f9da 	bl	8000fe8 <clearLed1>
			setTimer1(25);
 8000c34:	2019      	movs	r0, #25
 8000c36:	f000 fe61 	bl	80018fc <setTimer1>
		if (isButton2Pressed() == 1) {
 8000c3a:	f7ff fd59 	bl	80006f0 <isButton2Pressed>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d10a      	bne.n	8000c5a <fsm_manual_run+0x1c6>
			status = YELLOW_EDIT;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <fsm_manual_run+0x1cc>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	601a      	str	r2, [r3, #0]
			setTimer1(25);
 8000c4a:	2019      	movs	r0, #25
 8000c4c:	f000 fe56 	bl	80018fc <setTimer1>
		break;
 8000c50:	e003      	b.n	8000c5a <fsm_manual_run+0x1c6>
		break;
 8000c52:	bf00      	nop
 8000c54:	e002      	b.n	8000c5c <fsm_manual_run+0x1c8>
		break;
 8000c56:	bf00      	nop
 8000c58:	e000      	b.n	8000c5c <fsm_manual_run+0x1c8>
		break;
 8000c5a:	bf00      	nop
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000084 	.word	0x20000084
 8000c64:	200000c0 	.word	0x200000c0
 8000c68:	40010800 	.word	0x40010800

08000c6c <fsm_save_value_run>:
 *  Created on: Oct 27, 2024
 *      Author: Admin
 */

#include "fsm_save_value.h"
void fsm_save_value_run() {
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
	switch (status) {
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <fsm_save_value_run+0x74>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b0d      	cmp	r3, #13
 8000c76:	d01e      	beq.n	8000cb6 <fsm_save_value_run+0x4a>
 8000c78:	2b0d      	cmp	r3, #13
 8000c7a:	dc2d      	bgt.n	8000cd8 <fsm_save_value_run+0x6c>
 8000c7c:	2b09      	cmp	r3, #9
 8000c7e:	d002      	beq.n	8000c86 <fsm_save_value_run+0x1a>
 8000c80:	2b0b      	cmp	r3, #11
 8000c82:	d00c      	beq.n	8000c9e <fsm_save_value_run+0x32>
		if (timer1_flag == 1) {
			status = INIT;
		}
		break;
	}
}
 8000c84:	e028      	b.n	8000cd8 <fsm_save_value_run+0x6c>
		time_red = time_red;
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <fsm_save_value_run+0x78>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a16      	ldr	r2, [pc, #88]	; (8000ce4 <fsm_save_value_run+0x78>)
 8000c8c:	6013      	str	r3, [r2, #0]
		if (timer1_flag == 1) {
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <fsm_save_value_run+0x7c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d11b      	bne.n	8000cce <fsm_save_value_run+0x62>
			status = INIT;
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <fsm_save_value_run+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
		break;
 8000c9c:	e017      	b.n	8000cce <fsm_save_value_run+0x62>
		time_green = time_green;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <fsm_save_value_run+0x80>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a12      	ldr	r2, [pc, #72]	; (8000cec <fsm_save_value_run+0x80>)
 8000ca4:	6013      	str	r3, [r2, #0]
		if (timer1_flag == 1) {
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <fsm_save_value_run+0x7c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d111      	bne.n	8000cd2 <fsm_save_value_run+0x66>
			status = INIT;
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <fsm_save_value_run+0x74>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
		break;
 8000cb4:	e00d      	b.n	8000cd2 <fsm_save_value_run+0x66>
		time_yellow = time_yellow;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <fsm_save_value_run+0x84>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <fsm_save_value_run+0x84>)
 8000cbc:	6013      	str	r3, [r2, #0]
		if (timer1_flag == 1) {
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <fsm_save_value_run+0x7c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d107      	bne.n	8000cd6 <fsm_save_value_run+0x6a>
			status = INIT;
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <fsm_save_value_run+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
		break;
 8000ccc:	e003      	b.n	8000cd6 <fsm_save_value_run+0x6a>
		break;
 8000cce:	bf00      	nop
 8000cd0:	e002      	b.n	8000cd8 <fsm_save_value_run+0x6c>
		break;
 8000cd2:	bf00      	nop
 8000cd4:	e000      	b.n	8000cd8 <fsm_save_value_run+0x6c>
		break;
 8000cd6:	bf00      	nop
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	20000084 	.word	0x20000084
 8000ce4:	20000038 	.word	0x20000038
 8000ce8:	200000c0 	.word	0x200000c0
 8000cec:	2000003c 	.word	0x2000003c
 8000cf0:	20000040 	.word	0x20000040

08000cf4 <fsm_setting_run>:
 *
 *  Created on: Oct 27, 2024
 *      Author: Admin
 */
#include "fsm_setting.h"
void fsm_setting_run() {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	switch (status) {
 8000cf8:	4b76      	ldr	r3, [pc, #472]	; (8000ed4 <fsm_setting_run+0x1e0>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b0c      	cmp	r3, #12
 8000cfe:	f000 8099 	beq.w	8000e34 <fsm_setting_run+0x140>
 8000d02:	2b0c      	cmp	r3, #12
 8000d04:	f300 80e3 	bgt.w	8000ece <fsm_setting_run+0x1da>
 8000d08:	2b08      	cmp	r3, #8
 8000d0a:	d002      	beq.n	8000d12 <fsm_setting_run+0x1e>
 8000d0c:	2b0a      	cmp	r3, #10
 8000d0e:	d049      	beq.n	8000da4 <fsm_setting_run+0xb0>
			status = YELLOW_SAVE;
			setTimer1(100);
		}
		break;
	}
}
 8000d10:	e0dd      	b.n	8000ece <fsm_setting_run+0x1da>
		if (timer1_flag == 1) {
 8000d12:	4b71      	ldr	r3, [pc, #452]	; (8000ed8 <fsm_setting_run+0x1e4>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d119      	bne.n	8000d4e <fsm_setting_run+0x5a>
			dem_red++;
 8000d1a:	4b70      	ldr	r3, [pc, #448]	; (8000edc <fsm_setting_run+0x1e8>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	4a6e      	ldr	r2, [pc, #440]	; (8000edc <fsm_setting_run+0x1e8>)
 8000d22:	6013      	str	r3, [r2, #0]
			display_value_edit(red_buffer);
 8000d24:	486e      	ldr	r0, [pc, #440]	; (8000ee0 <fsm_setting_run+0x1ec>)
 8000d26:	f000 fac1 	bl	80012ac <display_value_edit>
			if (dem_red == 2) {
 8000d2a:	4b6c      	ldr	r3, [pc, #432]	; (8000edc <fsm_setting_run+0x1e8>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d10a      	bne.n	8000d48 <fsm_setting_run+0x54>
				HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000d32:	2104      	movs	r1, #4
 8000d34:	486b      	ldr	r0, [pc, #428]	; (8000ee4 <fsm_setting_run+0x1f0>)
 8000d36:	f001 f94e 	bl	8001fd6 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000d3a:	2120      	movs	r1, #32
 8000d3c:	4869      	ldr	r0, [pc, #420]	; (8000ee4 <fsm_setting_run+0x1f0>)
 8000d3e:	f001 f94a 	bl	8001fd6 <HAL_GPIO_TogglePin>
				dem_red = 0;
 8000d42:	4b66      	ldr	r3, [pc, #408]	; (8000edc <fsm_setting_run+0x1e8>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
			setTimer1(25);
 8000d48:	2019      	movs	r0, #25
 8000d4a:	f000 fdd7 	bl	80018fc <setTimer1>
		if (isButton2Pressed() == 1) {
 8000d4e:	f7ff fccf 	bl	80006f0 <isButton2Pressed>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d113      	bne.n	8000d80 <fsm_setting_run+0x8c>
			if (time_red < 7 || time_red > 0) {
 8000d58:	4b63      	ldr	r3, [pc, #396]	; (8000ee8 <fsm_setting_run+0x1f4>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b06      	cmp	r3, #6
 8000d5e:	dd03      	ble.n	8000d68 <fsm_setting_run+0x74>
 8000d60:	4b61      	ldr	r3, [pc, #388]	; (8000ee8 <fsm_setting_run+0x1f4>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	dd0b      	ble.n	8000d80 <fsm_setting_run+0x8c>
				time_red++;
 8000d68:	4b5f      	ldr	r3, [pc, #380]	; (8000ee8 <fsm_setting_run+0x1f4>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	4a5e      	ldr	r2, [pc, #376]	; (8000ee8 <fsm_setting_run+0x1f4>)
 8000d70:	6013      	str	r3, [r2, #0]
				if (time_red == 7) {
 8000d72:	4b5d      	ldr	r3, [pc, #372]	; (8000ee8 <fsm_setting_run+0x1f4>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b07      	cmp	r3, #7
 8000d78:	d102      	bne.n	8000d80 <fsm_setting_run+0x8c>
					time_red = 1;
 8000d7a:	4b5b      	ldr	r3, [pc, #364]	; (8000ee8 <fsm_setting_run+0x1f4>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	601a      	str	r2, [r3, #0]
		redBuffer(time_red);
 8000d80:	4b59      	ldr	r3, [pc, #356]	; (8000ee8 <fsm_setting_run+0x1f4>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 f9c3 	bl	8001110 <redBuffer>
		if (isButton3Pressed() == 1) {
 8000d8a:	f7ff fcc3 	bl	8000714 <isButton3Pressed>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	f040 8097 	bne.w	8000ec4 <fsm_setting_run+0x1d0>
			status = RED_SAVE;
 8000d96:	4b4f      	ldr	r3, [pc, #316]	; (8000ed4 <fsm_setting_run+0x1e0>)
 8000d98:	2209      	movs	r2, #9
 8000d9a:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8000d9c:	2064      	movs	r0, #100	; 0x64
 8000d9e:	f000 fdad 	bl	80018fc <setTimer1>
		break;
 8000da2:	e08f      	b.n	8000ec4 <fsm_setting_run+0x1d0>
		if (timer1_flag == 1) {
 8000da4:	4b4c      	ldr	r3, [pc, #304]	; (8000ed8 <fsm_setting_run+0x1e4>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d119      	bne.n	8000de0 <fsm_setting_run+0xec>
			dem_green++;
 8000dac:	4b4f      	ldr	r3, [pc, #316]	; (8000eec <fsm_setting_run+0x1f8>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	3301      	adds	r3, #1
 8000db2:	4a4e      	ldr	r2, [pc, #312]	; (8000eec <fsm_setting_run+0x1f8>)
 8000db4:	6013      	str	r3, [r2, #0]
			display_value_edit(green_buffer);
 8000db6:	484e      	ldr	r0, [pc, #312]	; (8000ef0 <fsm_setting_run+0x1fc>)
 8000db8:	f000 fa78 	bl	80012ac <display_value_edit>
			if (dem_green == 2) {
 8000dbc:	4b4b      	ldr	r3, [pc, #300]	; (8000eec <fsm_setting_run+0x1f8>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d10a      	bne.n	8000dda <fsm_setting_run+0xe6>
				HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8000dc4:	2110      	movs	r1, #16
 8000dc6:	4847      	ldr	r0, [pc, #284]	; (8000ee4 <fsm_setting_run+0x1f0>)
 8000dc8:	f001 f905 	bl	8001fd6 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000dcc:	2180      	movs	r1, #128	; 0x80
 8000dce:	4845      	ldr	r0, [pc, #276]	; (8000ee4 <fsm_setting_run+0x1f0>)
 8000dd0:	f001 f901 	bl	8001fd6 <HAL_GPIO_TogglePin>
				dem_green = 0;
 8000dd4:	4b45      	ldr	r3, [pc, #276]	; (8000eec <fsm_setting_run+0x1f8>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
			setTimer1(25);
 8000dda:	2019      	movs	r0, #25
 8000ddc:	f000 fd8e 	bl	80018fc <setTimer1>
		if (isButton2Pressed() == 1) {
 8000de0:	f7ff fc86 	bl	80006f0 <isButton2Pressed>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d113      	bne.n	8000e12 <fsm_setting_run+0x11e>
			if (time_green < 7 || time_green > 0) {
 8000dea:	4b42      	ldr	r3, [pc, #264]	; (8000ef4 <fsm_setting_run+0x200>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b06      	cmp	r3, #6
 8000df0:	dd03      	ble.n	8000dfa <fsm_setting_run+0x106>
 8000df2:	4b40      	ldr	r3, [pc, #256]	; (8000ef4 <fsm_setting_run+0x200>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	dd0b      	ble.n	8000e12 <fsm_setting_run+0x11e>
				time_green++;
 8000dfa:	4b3e      	ldr	r3, [pc, #248]	; (8000ef4 <fsm_setting_run+0x200>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	4a3c      	ldr	r2, [pc, #240]	; (8000ef4 <fsm_setting_run+0x200>)
 8000e02:	6013      	str	r3, [r2, #0]
				if (time_green == 7) {
 8000e04:	4b3b      	ldr	r3, [pc, #236]	; (8000ef4 <fsm_setting_run+0x200>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b07      	cmp	r3, #7
 8000e0a:	d102      	bne.n	8000e12 <fsm_setting_run+0x11e>
					time_green = 1;
 8000e0c:	4b39      	ldr	r3, [pc, #228]	; (8000ef4 <fsm_setting_run+0x200>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	601a      	str	r2, [r3, #0]
		greenBuffer(time_green);
 8000e12:	4b38      	ldr	r3, [pc, #224]	; (8000ef4 <fsm_setting_run+0x200>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 f99e 	bl	8001158 <greenBuffer>
		if (isButton3Pressed() == 1) {
 8000e1c:	f7ff fc7a 	bl	8000714 <isButton3Pressed>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d150      	bne.n	8000ec8 <fsm_setting_run+0x1d4>
			status = GREEN_SAVE;
 8000e26:	4b2b      	ldr	r3, [pc, #172]	; (8000ed4 <fsm_setting_run+0x1e0>)
 8000e28:	220b      	movs	r2, #11
 8000e2a:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8000e2c:	2064      	movs	r0, #100	; 0x64
 8000e2e:	f000 fd65 	bl	80018fc <setTimer1>
		break;
 8000e32:	e049      	b.n	8000ec8 <fsm_setting_run+0x1d4>
		if (timer1_flag == 1) {
 8000e34:	4b28      	ldr	r3, [pc, #160]	; (8000ed8 <fsm_setting_run+0x1e4>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d119      	bne.n	8000e70 <fsm_setting_run+0x17c>
			dem_yellow++;
 8000e3c:	4b2e      	ldr	r3, [pc, #184]	; (8000ef8 <fsm_setting_run+0x204>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	3301      	adds	r3, #1
 8000e42:	4a2d      	ldr	r2, [pc, #180]	; (8000ef8 <fsm_setting_run+0x204>)
 8000e44:	6013      	str	r3, [r2, #0]
			display_value_edit(yellow_buffer);
 8000e46:	482d      	ldr	r0, [pc, #180]	; (8000efc <fsm_setting_run+0x208>)
 8000e48:	f000 fa30 	bl	80012ac <display_value_edit>
			if (dem_yellow == 2) {
 8000e4c:	4b2a      	ldr	r3, [pc, #168]	; (8000ef8 <fsm_setting_run+0x204>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d10a      	bne.n	8000e6a <fsm_setting_run+0x176>
				HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8000e54:	2108      	movs	r1, #8
 8000e56:	4823      	ldr	r0, [pc, #140]	; (8000ee4 <fsm_setting_run+0x1f0>)
 8000e58:	f001 f8bd 	bl	8001fd6 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000e5c:	2140      	movs	r1, #64	; 0x40
 8000e5e:	4821      	ldr	r0, [pc, #132]	; (8000ee4 <fsm_setting_run+0x1f0>)
 8000e60:	f001 f8b9 	bl	8001fd6 <HAL_GPIO_TogglePin>
				dem_yellow = 0;
 8000e64:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <fsm_setting_run+0x204>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
			setTimer1(25);
 8000e6a:	2019      	movs	r0, #25
 8000e6c:	f000 fd46 	bl	80018fc <setTimer1>
		if (isButton2Pressed() == 1) {
 8000e70:	f7ff fc3e 	bl	80006f0 <isButton2Pressed>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d113      	bne.n	8000ea2 <fsm_setting_run+0x1ae>
			if (time_yellow < 7 || time_yellow > 0) {
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <fsm_setting_run+0x20c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	dd03      	ble.n	8000e8a <fsm_setting_run+0x196>
 8000e82:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <fsm_setting_run+0x20c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	dd0b      	ble.n	8000ea2 <fsm_setting_run+0x1ae>
				time_yellow++;
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <fsm_setting_run+0x20c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	4a1b      	ldr	r2, [pc, #108]	; (8000f00 <fsm_setting_run+0x20c>)
 8000e92:	6013      	str	r3, [r2, #0]
				if (time_yellow == 7) {
 8000e94:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <fsm_setting_run+0x20c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b07      	cmp	r3, #7
 8000e9a:	d102      	bne.n	8000ea2 <fsm_setting_run+0x1ae>
					time_yellow = 1;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <fsm_setting_run+0x20c>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	601a      	str	r2, [r3, #0]
		yellowBuffer(time_yellow);
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <fsm_setting_run+0x20c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f97a 	bl	80011a0 <yellowBuffer>
		if (isButton3Pressed() == 1) {
 8000eac:	f7ff fc32 	bl	8000714 <isButton3Pressed>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d10a      	bne.n	8000ecc <fsm_setting_run+0x1d8>
			status = YELLOW_SAVE;
 8000eb6:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <fsm_setting_run+0x1e0>)
 8000eb8:	220d      	movs	r2, #13
 8000eba:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8000ebc:	2064      	movs	r0, #100	; 0x64
 8000ebe:	f000 fd1d 	bl	80018fc <setTimer1>
		break;
 8000ec2:	e003      	b.n	8000ecc <fsm_setting_run+0x1d8>
		break;
 8000ec4:	bf00      	nop
 8000ec6:	e002      	b.n	8000ece <fsm_setting_run+0x1da>
		break;
 8000ec8:	bf00      	nop
 8000eca:	e000      	b.n	8000ece <fsm_setting_run+0x1da>
		break;
 8000ecc:	bf00      	nop
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000084 	.word	0x20000084
 8000ed8:	200000c0 	.word	0x200000c0
 8000edc:	20000078 	.word	0x20000078
 8000ee0:	2000009c 	.word	0x2000009c
 8000ee4:	40010800 	.word	0x40010800
 8000ee8:	20000038 	.word	0x20000038
 8000eec:	2000007c 	.word	0x2000007c
 8000ef0:	200000ac 	.word	0x200000ac
 8000ef4:	2000003c 	.word	0x2000003c
 8000ef8:	20000080 	.word	0x20000080
 8000efc:	200000a4 	.word	0x200000a4
 8000f00:	20000040 	.word	0x20000040

08000f04 <init_time_traffic>:
int green_buffer[2] = { 0, 0 };

int time_red = 5;
int time_green = 3;
int time_yellow = 2;
void init_time_traffic(int red, int green, int yellow) {
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
	time_red = red;
 8000f10:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <init_time_traffic+0x28>)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	6013      	str	r3, [r2, #0]
	;
	time_green = green;
 8000f16:	4a06      	ldr	r2, [pc, #24]	; (8000f30 <init_time_traffic+0x2c>)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	6013      	str	r3, [r2, #0]
	time_yellow = yellow;
 8000f1c:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <init_time_traffic+0x30>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
}
 8000f22:	bf00      	nop
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	20000038 	.word	0x20000038
 8000f30:	2000003c 	.word	0x2000003c
 8000f34:	20000040 	.word	0x20000040

08000f38 <clearLed>:
void clearLed() {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2120      	movs	r1, #32
 8000f40:	4807      	ldr	r0, [pc, #28]	; (8000f60 <clearLed+0x28>)
 8000f42:	f001 f830 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2180      	movs	r1, #128	; 0x80
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <clearLed+0x28>)
 8000f4c:	f001 f82b 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2140      	movs	r1, #64	; 0x40
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <clearLed+0x28>)
 8000f56:	f001 f826 	bl	8001fa6 <HAL_GPIO_WritePin>
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40010800 	.word	0x40010800

08000f64 <setLedRed>:
void setLedRed() {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2120      	movs	r1, #32
 8000f6c:	4807      	ldr	r0, [pc, #28]	; (8000f8c <setLedRed+0x28>)
 8000f6e:	f001 f81a 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2180      	movs	r1, #128	; 0x80
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <setLedRed+0x28>)
 8000f78:	f001 f815 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2140      	movs	r1, #64	; 0x40
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <setLedRed+0x28>)
 8000f82:	f001 f810 	bl	8001fa6 <HAL_GPIO_WritePin>
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40010800 	.word	0x40010800

08000f90 <setLedGreen>:

void setLedGreen() {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2120      	movs	r1, #32
 8000f98:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <setLedGreen+0x28>)
 8000f9a:	f001 f804 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2180      	movs	r1, #128	; 0x80
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <setLedGreen+0x28>)
 8000fa4:	f000 ffff 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2140      	movs	r1, #64	; 0x40
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <setLedGreen+0x28>)
 8000fae:	f000 fffa 	bl	8001fa6 <HAL_GPIO_WritePin>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40010800 	.word	0x40010800

08000fbc <setLedYellow>:

void setLedYellow() {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2120      	movs	r1, #32
 8000fc4:	4807      	ldr	r0, [pc, #28]	; (8000fe4 <setLedYellow+0x28>)
 8000fc6:	f000 ffee 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2180      	movs	r1, #128	; 0x80
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <setLedYellow+0x28>)
 8000fd0:	f000 ffe9 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2140      	movs	r1, #64	; 0x40
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <setLedYellow+0x28>)
 8000fda:	f000 ffe4 	bl	8001fa6 <HAL_GPIO_WritePin>
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40010800 	.word	0x40010800

08000fe8 <clearLed1>:

void clearLed1() {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2104      	movs	r1, #4
 8000ff0:	4807      	ldr	r0, [pc, #28]	; (8001010 <clearLed1+0x28>)
 8000ff2:	f000 ffd8 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2110      	movs	r1, #16
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <clearLed1+0x28>)
 8000ffc:	f000 ffd3 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	2108      	movs	r1, #8
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <clearLed1+0x28>)
 8001006:	f000 ffce 	bl	8001fa6 <HAL_GPIO_WritePin>
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40010800 	.word	0x40010800

08001014 <setLedRed1>:
void setLedRed1() {
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	2104      	movs	r1, #4
 800101c:	4807      	ldr	r0, [pc, #28]	; (800103c <setLedRed1+0x28>)
 800101e:	f000 ffc2 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	2110      	movs	r1, #16
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <setLedRed1+0x28>)
 8001028:	f000 ffbd 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	2108      	movs	r1, #8
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <setLedRed1+0x28>)
 8001032:	f000 ffb8 	bl	8001fa6 <HAL_GPIO_WritePin>
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40010800 	.word	0x40010800

08001040 <setLedGreen1>:

void setLedGreen1() {
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	2104      	movs	r1, #4
 8001048:	4807      	ldr	r0, [pc, #28]	; (8001068 <setLedGreen1+0x28>)
 800104a:	f000 ffac 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	2110      	movs	r1, #16
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <setLedGreen1+0x28>)
 8001054:	f000 ffa7 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	2108      	movs	r1, #8
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <setLedGreen1+0x28>)
 800105e:	f000 ffa2 	bl	8001fa6 <HAL_GPIO_WritePin>
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40010800 	.word	0x40010800

0800106c <setLedYellow1>:

void setLedYellow1() {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2104      	movs	r1, #4
 8001074:	4807      	ldr	r0, [pc, #28]	; (8001094 <setLedYellow1+0x28>)
 8001076:	f000 ff96 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	2110      	movs	r1, #16
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <setLedYellow1+0x28>)
 8001080:	f000 ff91 	bl	8001fa6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8001084:	2201      	movs	r2, #1
 8001086:	2108      	movs	r1, #8
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <setLedYellow1+0x28>)
 800108a:	f000 ff8c 	bl	8001fa6 <HAL_GPIO_WritePin>
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40010800 	.word	0x40010800

08001098 <updateClockBuffer>:

void updateClockBuffer(int hour, int minute) {
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
	// Update the hour display
	led_buffer[0] = hour / 10;  // Tens digit of the hour
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a18      	ldr	r2, [pc, #96]	; (8001108 <updateClockBuffer+0x70>)
 80010a6:	fb82 1203 	smull	r1, r2, r2, r3
 80010aa:	1092      	asrs	r2, r2, #2
 80010ac:	17db      	asrs	r3, r3, #31
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	4a16      	ldr	r2, [pc, #88]	; (800110c <updateClockBuffer+0x74>)
 80010b2:	6013      	str	r3, [r2, #0]
	led_buffer[1] = hour % 10;  // Units digit of the hour
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <updateClockBuffer+0x70>)
 80010b8:	fb83 2301 	smull	r2, r3, r3, r1
 80010bc:	109a      	asrs	r2, r3, #2
 80010be:	17cb      	asrs	r3, r1, #31
 80010c0:	1ad2      	subs	r2, r2, r3
 80010c2:	4613      	mov	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	1aca      	subs	r2, r1, r3
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <updateClockBuffer+0x74>)
 80010ce:	605a      	str	r2, [r3, #4]

	// Update the minute display
	led_buffer[2] = minute / 10;  // Tens digit of the minute
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <updateClockBuffer+0x70>)
 80010d4:	fb82 1203 	smull	r1, r2, r2, r3
 80010d8:	1092      	asrs	r2, r2, #2
 80010da:	17db      	asrs	r3, r3, #31
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	4a0b      	ldr	r2, [pc, #44]	; (800110c <updateClockBuffer+0x74>)
 80010e0:	6093      	str	r3, [r2, #8]
	led_buffer[3] = minute % 10;  // Units digit of the minute
 80010e2:	6839      	ldr	r1, [r7, #0]
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <updateClockBuffer+0x70>)
 80010e6:	fb83 2301 	smull	r2, r3, r3, r1
 80010ea:	109a      	asrs	r2, r3, #2
 80010ec:	17cb      	asrs	r3, r1, #31
 80010ee:	1ad2      	subs	r2, r2, r3
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	1aca      	subs	r2, r1, r3
 80010fa:	4b04      	ldr	r3, [pc, #16]	; (800110c <updateClockBuffer+0x74>)
 80010fc:	60da      	str	r2, [r3, #12]
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	66666667 	.word	0x66666667
 800110c:	2000008c 	.word	0x2000008c

08001110 <redBuffer>:
void redBuffer(int red) {
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	red_buffer[0] = red / 10;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a0d      	ldr	r2, [pc, #52]	; (8001150 <redBuffer+0x40>)
 800111c:	fb82 1203 	smull	r1, r2, r2, r3
 8001120:	1092      	asrs	r2, r2, #2
 8001122:	17db      	asrs	r3, r3, #31
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <redBuffer+0x44>)
 8001128:	6013      	str	r3, [r2, #0]
	red_buffer[1] = red % 10;
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <redBuffer+0x40>)
 800112e:	fb83 2301 	smull	r2, r3, r3, r1
 8001132:	109a      	asrs	r2, r3, #2
 8001134:	17cb      	asrs	r3, r1, #31
 8001136:	1ad2      	subs	r2, r2, r3
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	1aca      	subs	r2, r1, r3
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <redBuffer+0x44>)
 8001144:	605a      	str	r2, [r3, #4]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	66666667 	.word	0x66666667
 8001154:	2000009c 	.word	0x2000009c

08001158 <greenBuffer>:
void greenBuffer(int green) {
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	green_buffer[0] = green / 10;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a0d      	ldr	r2, [pc, #52]	; (8001198 <greenBuffer+0x40>)
 8001164:	fb82 1203 	smull	r1, r2, r2, r3
 8001168:	1092      	asrs	r2, r2, #2
 800116a:	17db      	asrs	r3, r3, #31
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	4a0b      	ldr	r2, [pc, #44]	; (800119c <greenBuffer+0x44>)
 8001170:	6013      	str	r3, [r2, #0]
	green_buffer[1] = green % 10;
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <greenBuffer+0x40>)
 8001176:	fb83 2301 	smull	r2, r3, r3, r1
 800117a:	109a      	asrs	r2, r3, #2
 800117c:	17cb      	asrs	r3, r1, #31
 800117e:	1ad2      	subs	r2, r2, r3
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	1aca      	subs	r2, r1, r3
 800118a:	4b04      	ldr	r3, [pc, #16]	; (800119c <greenBuffer+0x44>)
 800118c:	605a      	str	r2, [r3, #4]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	66666667 	.word	0x66666667
 800119c:	200000ac 	.word	0x200000ac

080011a0 <yellowBuffer>:
void yellowBuffer(int yellow) {
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	yellow_buffer[0] = yellow / 10;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a0d      	ldr	r2, [pc, #52]	; (80011e0 <yellowBuffer+0x40>)
 80011ac:	fb82 1203 	smull	r1, r2, r2, r3
 80011b0:	1092      	asrs	r2, r2, #2
 80011b2:	17db      	asrs	r3, r3, #31
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <yellowBuffer+0x44>)
 80011b8:	6013      	str	r3, [r2, #0]
	yellow_buffer[1] = yellow % 10;
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <yellowBuffer+0x40>)
 80011be:	fb83 2301 	smull	r2, r3, r3, r1
 80011c2:	109a      	asrs	r2, r3, #2
 80011c4:	17cb      	asrs	r3, r1, #31
 80011c6:	1ad2      	subs	r2, r2, r3
 80011c8:	4613      	mov	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	1aca      	subs	r2, r1, r3
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <yellowBuffer+0x44>)
 80011d4:	605a      	str	r2, [r3, #4]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	66666667 	.word	0x66666667
 80011e4:	200000a4 	.word	0x200000a4

080011e8 <display>:

void display() {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	switch (index_led) {
 80011ec:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <display+0xb8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d002      	beq.n	80011fa <display+0x12>
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d023      	beq.n	8001240 <display+0x58>
 80011f8:	e045      	b.n	8001286 <display+0x9e>
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001200:	4828      	ldr	r0, [pc, #160]	; (80012a4 <display+0xbc>)
 8001202:	f000 fed0 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001206:	2201      	movs	r2, #1
 8001208:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800120c:	4825      	ldr	r0, [pc, #148]	; (80012a4 <display+0xbc>)
 800120e:	f000 feca 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001218:	4822      	ldr	r0, [pc, #136]	; (80012a4 <display+0xbc>)
 800121a:	f000 fec4 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800121e:	2201      	movs	r2, #1
 8001220:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001224:	481f      	ldr	r0, [pc, #124]	; (80012a4 <display+0xbc>)
 8001226:	f000 febe 	bl	8001fa6 <HAL_GPIO_WritePin>
		display7SEG_North_South(led_buffer[0]);
 800122a:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <display+0xc0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f8d4 	bl	80003dc <display7SEG_North_South>
		display7SEG_East_West(led_buffer[2]);
 8001234:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <display+0xc0>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	4618      	mov	r0, r3
 800123a:	f7fe ff87 	bl	800014c <display7SEG_East_West>
		break;
 800123e:	e022      	b.n	8001286 <display+0x9e>
	case 1:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8001240:	2201      	movs	r2, #1
 8001242:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001246:	4817      	ldr	r0, [pc, #92]	; (80012a4 <display+0xbc>)
 8001248:	f000 fead 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001252:	4814      	ldr	r0, [pc, #80]	; (80012a4 <display+0xbc>)
 8001254:	f000 fea7 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800125e:	4811      	ldr	r0, [pc, #68]	; (80012a4 <display+0xbc>)
 8001260:	f000 fea1 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800126a:	480e      	ldr	r0, [pc, #56]	; (80012a4 <display+0xbc>)
 800126c:	f000 fe9b 	bl	8001fa6 <HAL_GPIO_WritePin>
		display7SEG_North_South(led_buffer[1]);
 8001270:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <display+0xc0>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f8b1 	bl	80003dc <display7SEG_North_South>
		display7SEG_East_West(led_buffer[3]);
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <display+0xc0>)
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	4618      	mov	r0, r3
 8001280:	f7fe ff64 	bl	800014c <display7SEG_East_West>
		break;
 8001284:	bf00      	nop
	}

	index_led = (index_led + 1) % 2;
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <display+0xb8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	2b00      	cmp	r3, #0
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	bfb8      	it	lt
 8001294:	425b      	neglt	r3, r3
 8001296:	4a02      	ldr	r2, [pc, #8]	; (80012a0 <display+0xb8>)
 8001298:	6013      	str	r3, [r2, #0]
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000088 	.word	0x20000088
 80012a4:	40010800 	.word	0x40010800
 80012a8:	2000008c 	.word	0x2000008c

080012ac <display_value_edit>:

void display_value_edit(int led_buffer[2]) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	switch (index_led) {
 80012b4:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <display_value_edit+0x7c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <display_value_edit+0x16>
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d012      	beq.n	80012e6 <display_value_edit+0x3a>
 80012c0:	e024      	b.n	800130c <display_value_edit+0x60>
	case 0:
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012c8:	4818      	ldr	r0, [pc, #96]	; (800132c <display_value_edit+0x80>)
 80012ca:	f000 fe6c 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80012ce:	2201      	movs	r2, #1
 80012d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012d4:	4815      	ldr	r0, [pc, #84]	; (800132c <display_value_edit+0x80>)
 80012d6:	f000 fe66 	bl	8001fa6 <HAL_GPIO_WritePin>
		display7SEG_East_West(led_buffer[0]);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7fe ff34 	bl	800014c <display7SEG_East_West>
		break;
 80012e4:	e012      	b.n	800130c <display_value_edit+0x60>
	case 1:
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80012e6:	2201      	movs	r2, #1
 80012e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ec:	480f      	ldr	r0, [pc, #60]	; (800132c <display_value_edit+0x80>)
 80012ee:	f000 fe5a 	bl	8001fa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012f8:	480c      	ldr	r0, [pc, #48]	; (800132c <display_value_edit+0x80>)
 80012fa:	f000 fe54 	bl	8001fa6 <HAL_GPIO_WritePin>
		display7SEG_East_West(led_buffer[1]);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3304      	adds	r3, #4
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7fe ff21 	bl	800014c <display7SEG_East_West>
		break;
 800130a:	bf00      	nop
	}

	index_led = (index_led + 1) % 2;
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <display_value_edit+0x7c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	3301      	adds	r3, #1
 8001312:	2b00      	cmp	r3, #0
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	bfb8      	it	lt
 800131a:	425b      	neglt	r3, r3
 800131c:	4a02      	ldr	r2, [pc, #8]	; (8001328 <display_value_edit+0x7c>)
 800131e:	6013      	str	r3, [r2, #0]
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000088 	.word	0x20000088
 800132c:	40010800 	.word	0x40010800

08001330 <init_traffic_light>:
int led_status_north_south;
int count = 0;
int count1 = 0;

void init_traffic_light(int check_color_ew, int led_status_ew, int counter_ew,
		int check_color_ns, int led_status_ns, int counter_ns) {
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
 800133c:	603b      	str	r3, [r7, #0]
	check_color_east_west = check_color_ew;
 800133e:	4a0b      	ldr	r2, [pc, #44]	; (800136c <init_traffic_light+0x3c>)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6013      	str	r3, [r2, #0]
	check_color_north_south = check_color_ns;
 8001344:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <init_traffic_light+0x40>)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	6013      	str	r3, [r2, #0]
	counter_north_south = counter_ns;
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <init_traffic_light+0x44>)
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	6013      	str	r3, [r2, #0]
	counter_east_west = counter_ew;
 8001350:	4a09      	ldr	r2, [pc, #36]	; (8001378 <init_traffic_light+0x48>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
	led_status_east_west = led_status_ew;
 8001356:	4a09      	ldr	r2, [pc, #36]	; (800137c <init_traffic_light+0x4c>)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	6013      	str	r3, [r2, #0]
	led_status_north_south = led_status_ns;
 800135c:	4a08      	ldr	r2, [pc, #32]	; (8001380 <init_traffic_light+0x50>)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	6013      	str	r3, [r2, #0]
}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	200000d8 	.word	0x200000d8
 8001370:	200000c8 	.word	0x200000c8
 8001374:	200000d4 	.word	0x200000d4
 8001378:	200000cc 	.word	0x200000cc
 800137c:	200000d0 	.word	0x200000d0
 8001380:	200000c4 	.word	0x200000c4

08001384 <light_traffic_run>:
void light_traffic_run(int time_red, int time_yellow, int time_green) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]

	//  thiet lap trang thai va thoi gian chuyen tin hieu he thong den 1 (led 7 doan o tren)
	if (counter_north_south <= 0 && check_color_north_south == GREEN_COLOR) {
 8001390:	4b80      	ldr	r3, [pc, #512]	; (8001594 <light_traffic_run+0x210>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	dc09      	bgt.n	80013ac <light_traffic_run+0x28>
 8001398:	4b7f      	ldr	r3, [pc, #508]	; (8001598 <light_traffic_run+0x214>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b17      	cmp	r3, #23
 800139e:	d105      	bne.n	80013ac <light_traffic_run+0x28>
		counter_north_south = time_yellow;
 80013a0:	4a7c      	ldr	r2, [pc, #496]	; (8001594 <light_traffic_run+0x210>)
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	6013      	str	r3, [r2, #0]
		check_color_north_south = YELLOW_COLOR; // den vang
 80013a6:	4b7c      	ldr	r3, [pc, #496]	; (8001598 <light_traffic_run+0x214>)
 80013a8:	2218      	movs	r2, #24
 80013aa:	601a      	str	r2, [r3, #0]
	}
	if (counter_north_south <= 0 && check_color_north_south == YELLOW_COLOR) {
 80013ac:	4b79      	ldr	r3, [pc, #484]	; (8001594 <light_traffic_run+0x210>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	dc09      	bgt.n	80013c8 <light_traffic_run+0x44>
 80013b4:	4b78      	ldr	r3, [pc, #480]	; (8001598 <light_traffic_run+0x214>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b18      	cmp	r3, #24
 80013ba:	d105      	bne.n	80013c8 <light_traffic_run+0x44>
		counter_north_south = time_red;
 80013bc:	4a75      	ldr	r2, [pc, #468]	; (8001594 <light_traffic_run+0x210>)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	6013      	str	r3, [r2, #0]
		check_color_north_south = RED_COLOR; // den do
 80013c2:	4b75      	ldr	r3, [pc, #468]	; (8001598 <light_traffic_run+0x214>)
 80013c4:	2216      	movs	r2, #22
 80013c6:	601a      	str	r2, [r3, #0]
	}

	if (counter_north_south <= 0 && check_color_north_south == RED_COLOR) {
 80013c8:	4b72      	ldr	r3, [pc, #456]	; (8001594 <light_traffic_run+0x210>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	dc09      	bgt.n	80013e4 <light_traffic_run+0x60>
 80013d0:	4b71      	ldr	r3, [pc, #452]	; (8001598 <light_traffic_run+0x214>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b16      	cmp	r3, #22
 80013d6:	d105      	bne.n	80013e4 <light_traffic_run+0x60>
		counter_north_south = time_green;
 80013d8:	4a6e      	ldr	r2, [pc, #440]	; (8001594 <light_traffic_run+0x210>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
		check_color_north_south = GREEN_COLOR; // den xanh
 80013de:	4b6e      	ldr	r3, [pc, #440]	; (8001598 <light_traffic_run+0x214>)
 80013e0:	2217      	movs	r2, #23
 80013e2:	601a      	str	r2, [r3, #0]
	}

	//  thiet lap trang thai va thoi gian chuyen tin hieu he thong den 2 (led 7 doan o duoi)
	if (counter_east_west <= 0 && check_color_east_west == RED_COLOR) {
 80013e4:	4b6d      	ldr	r3, [pc, #436]	; (800159c <light_traffic_run+0x218>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	dc09      	bgt.n	8001400 <light_traffic_run+0x7c>
 80013ec:	4b6c      	ldr	r3, [pc, #432]	; (80015a0 <light_traffic_run+0x21c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b16      	cmp	r3, #22
 80013f2:	d105      	bne.n	8001400 <light_traffic_run+0x7c>
		counter_east_west = time_green;
 80013f4:	4a69      	ldr	r2, [pc, #420]	; (800159c <light_traffic_run+0x218>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6013      	str	r3, [r2, #0]
		check_color_east_west = GREEN_COLOR; // den xanh
 80013fa:	4b69      	ldr	r3, [pc, #420]	; (80015a0 <light_traffic_run+0x21c>)
 80013fc:	2217      	movs	r2, #23
 80013fe:	601a      	str	r2, [r3, #0]
	}
	if (counter_east_west <= 0 && check_color_east_west == GREEN_COLOR) {
 8001400:	4b66      	ldr	r3, [pc, #408]	; (800159c <light_traffic_run+0x218>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	dc09      	bgt.n	800141c <light_traffic_run+0x98>
 8001408:	4b65      	ldr	r3, [pc, #404]	; (80015a0 <light_traffic_run+0x21c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b17      	cmp	r3, #23
 800140e:	d105      	bne.n	800141c <light_traffic_run+0x98>
		counter_east_west = time_yellow;
 8001410:	4a62      	ldr	r2, [pc, #392]	; (800159c <light_traffic_run+0x218>)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	6013      	str	r3, [r2, #0]
		check_color_east_west = YELLOW_COLOR; // den vang
 8001416:	4b62      	ldr	r3, [pc, #392]	; (80015a0 <light_traffic_run+0x21c>)
 8001418:	2218      	movs	r2, #24
 800141a:	601a      	str	r2, [r3, #0]
	}
	if (counter_east_west <= 0 && check_color_east_west == YELLOW_COLOR) {
 800141c:	4b5f      	ldr	r3, [pc, #380]	; (800159c <light_traffic_run+0x218>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	dc09      	bgt.n	8001438 <light_traffic_run+0xb4>
 8001424:	4b5e      	ldr	r3, [pc, #376]	; (80015a0 <light_traffic_run+0x21c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b18      	cmp	r3, #24
 800142a:	d105      	bne.n	8001438 <light_traffic_run+0xb4>
		counter_east_west = time_red;
 800142c:	4a5b      	ldr	r2, [pc, #364]	; (800159c <light_traffic_run+0x218>)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6013      	str	r3, [r2, #0]
		check_color_east_west = RED_COLOR; // den do
 8001432:	4b5b      	ldr	r3, [pc, #364]	; (80015a0 <light_traffic_run+0x21c>)
 8001434:	2216      	movs	r2, #22
 8001436:	601a      	str	r2, [r3, #0]

//		// hien thi led 7 doan he thong den 1
//		display7SEG_North_South(counter_north_south--);
//		// hien thi led 7 doan he thong den 2
//		display7SEG_East_West(counter_east_west--);
	updateClockBuffer(counter_north_south--, counter_east_west--);
 8001438:	4b56      	ldr	r3, [pc, #344]	; (8001594 <light_traffic_run+0x210>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	1e5a      	subs	r2, r3, #1
 800143e:	4955      	ldr	r1, [pc, #340]	; (8001594 <light_traffic_run+0x210>)
 8001440:	600a      	str	r2, [r1, #0]
 8001442:	4a56      	ldr	r2, [pc, #344]	; (800159c <light_traffic_run+0x218>)
 8001444:	6812      	ldr	r2, [r2, #0]
 8001446:	1e51      	subs	r1, r2, #1
 8001448:	4854      	ldr	r0, [pc, #336]	; (800159c <light_traffic_run+0x218>)
 800144a:	6001      	str	r1, [r0, #0]
 800144c:	4611      	mov	r1, r2
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fe22 	bl	8001098 <updateClockBuffer>

	// dieu khien chuyen tin hieu he thong  den 1 (led 7 doan o tren)
	if (led_status_north_south == GREEN_AUTO) {
 8001454:	4b53      	ldr	r3, [pc, #332]	; (80015a4 <light_traffic_run+0x220>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b06      	cmp	r3, #6
 800145a:	d106      	bne.n	800146a <light_traffic_run+0xe6>
		setLedGreen1();
 800145c:	f7ff fdf0 	bl	8001040 <setLedGreen1>
		count1++;
 8001460:	4b51      	ldr	r3, [pc, #324]	; (80015a8 <light_traffic_run+0x224>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	4a50      	ldr	r2, [pc, #320]	; (80015a8 <light_traffic_run+0x224>)
 8001468:	6013      	str	r3, [r2, #0]
	}
	if (led_status_north_south == YELLOW_AUTO) {
 800146a:	4b4e      	ldr	r3, [pc, #312]	; (80015a4 <light_traffic_run+0x220>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b07      	cmp	r3, #7
 8001470:	d106      	bne.n	8001480 <light_traffic_run+0xfc>
		setLedYellow1();
 8001472:	f7ff fdfb 	bl	800106c <setLedYellow1>
		count1++;
 8001476:	4b4c      	ldr	r3, [pc, #304]	; (80015a8 <light_traffic_run+0x224>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	3301      	adds	r3, #1
 800147c:	4a4a      	ldr	r2, [pc, #296]	; (80015a8 <light_traffic_run+0x224>)
 800147e:	6013      	str	r3, [r2, #0]
	}
	if (led_status_north_south == RED_AUTO) {
 8001480:	4b48      	ldr	r3, [pc, #288]	; (80015a4 <light_traffic_run+0x220>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b05      	cmp	r3, #5
 8001486:	d106      	bne.n	8001496 <light_traffic_run+0x112>
		setLedRed1();
 8001488:	f7ff fdc4 	bl	8001014 <setLedRed1>
		count1++;
 800148c:	4b46      	ldr	r3, [pc, #280]	; (80015a8 <light_traffic_run+0x224>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	3301      	adds	r3, #1
 8001492:	4a45      	ldr	r2, [pc, #276]	; (80015a8 <light_traffic_run+0x224>)
 8001494:	6013      	str	r3, [r2, #0]
	}
	if (count1 == time_green && led_status_north_south == GREEN_AUTO) {
 8001496:	4b44      	ldr	r3, [pc, #272]	; (80015a8 <light_traffic_run+0x224>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	429a      	cmp	r2, r3
 800149e:	d109      	bne.n	80014b4 <light_traffic_run+0x130>
 80014a0:	4b40      	ldr	r3, [pc, #256]	; (80015a4 <light_traffic_run+0x220>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b06      	cmp	r3, #6
 80014a6:	d105      	bne.n	80014b4 <light_traffic_run+0x130>
		led_status_north_south = YELLOW_AUTO;
 80014a8:	4b3e      	ldr	r3, [pc, #248]	; (80015a4 <light_traffic_run+0x220>)
 80014aa:	2207      	movs	r2, #7
 80014ac:	601a      	str	r2, [r3, #0]
		count1 = 0;
 80014ae:	4b3e      	ldr	r3, [pc, #248]	; (80015a8 <light_traffic_run+0x224>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
	}
	if (count1 == time_yellow && led_status_north_south == YELLOW_AUTO) {
 80014b4:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <light_traffic_run+0x224>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68ba      	ldr	r2, [r7, #8]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d109      	bne.n	80014d2 <light_traffic_run+0x14e>
 80014be:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <light_traffic_run+0x220>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b07      	cmp	r3, #7
 80014c4:	d105      	bne.n	80014d2 <light_traffic_run+0x14e>
		led_status_north_south = RED_AUTO;
 80014c6:	4b37      	ldr	r3, [pc, #220]	; (80015a4 <light_traffic_run+0x220>)
 80014c8:	2205      	movs	r2, #5
 80014ca:	601a      	str	r2, [r3, #0]
		count1 = 0;
 80014cc:	4b36      	ldr	r3, [pc, #216]	; (80015a8 <light_traffic_run+0x224>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
	}
	if (count1 == time_red && led_status_north_south == RED_AUTO) {
 80014d2:	4b35      	ldr	r3, [pc, #212]	; (80015a8 <light_traffic_run+0x224>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d109      	bne.n	80014f0 <light_traffic_run+0x16c>
 80014dc:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <light_traffic_run+0x220>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b05      	cmp	r3, #5
 80014e2:	d105      	bne.n	80014f0 <light_traffic_run+0x16c>
		led_status_north_south = GREEN_AUTO;
 80014e4:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <light_traffic_run+0x220>)
 80014e6:	2206      	movs	r2, #6
 80014e8:	601a      	str	r2, [r3, #0]
		count1 = 0;
 80014ea:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <light_traffic_run+0x224>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
	}
	// dieu khien chuyen tin hieu he thong  den 2 ( led 7 doan o duoi)
	if (led_status_east_west == RED_AUTO) {
 80014f0:	4b2e      	ldr	r3, [pc, #184]	; (80015ac <light_traffic_run+0x228>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b05      	cmp	r3, #5
 80014f6:	d106      	bne.n	8001506 <light_traffic_run+0x182>
		setLedRed();
 80014f8:	f7ff fd34 	bl	8000f64 <setLedRed>
		count++;
 80014fc:	4b2c      	ldr	r3, [pc, #176]	; (80015b0 <light_traffic_run+0x22c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	4a2b      	ldr	r2, [pc, #172]	; (80015b0 <light_traffic_run+0x22c>)
 8001504:	6013      	str	r3, [r2, #0]
	}
	if (led_status_east_west == YELLOW_AUTO) {
 8001506:	4b29      	ldr	r3, [pc, #164]	; (80015ac <light_traffic_run+0x228>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b07      	cmp	r3, #7
 800150c:	d106      	bne.n	800151c <light_traffic_run+0x198>
		setLedYellow();
 800150e:	f7ff fd55 	bl	8000fbc <setLedYellow>
		count++;
 8001512:	4b27      	ldr	r3, [pc, #156]	; (80015b0 <light_traffic_run+0x22c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	3301      	adds	r3, #1
 8001518:	4a25      	ldr	r2, [pc, #148]	; (80015b0 <light_traffic_run+0x22c>)
 800151a:	6013      	str	r3, [r2, #0]
	}
	if (led_status_east_west == GREEN_AUTO) {
 800151c:	4b23      	ldr	r3, [pc, #140]	; (80015ac <light_traffic_run+0x228>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b06      	cmp	r3, #6
 8001522:	d106      	bne.n	8001532 <light_traffic_run+0x1ae>
		setLedGreen();
 8001524:	f7ff fd34 	bl	8000f90 <setLedGreen>
		count++;
 8001528:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <light_traffic_run+0x22c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	4a20      	ldr	r2, [pc, #128]	; (80015b0 <light_traffic_run+0x22c>)
 8001530:	6013      	str	r3, [r2, #0]
	}
	if (count == time_red && led_status_east_west == RED_AUTO) {
 8001532:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <light_traffic_run+0x22c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	429a      	cmp	r2, r3
 800153a:	d109      	bne.n	8001550 <light_traffic_run+0x1cc>
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <light_traffic_run+0x228>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b05      	cmp	r3, #5
 8001542:	d105      	bne.n	8001550 <light_traffic_run+0x1cc>
		led_status_east_west = GREEN_AUTO;
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <light_traffic_run+0x228>)
 8001546:	2206      	movs	r2, #6
 8001548:	601a      	str	r2, [r3, #0]
		count = 0;
 800154a:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <light_traffic_run+0x22c>)
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
	}
	if (count == time_green && led_status_east_west == GREEN_AUTO) {
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <light_traffic_run+0x22c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	429a      	cmp	r2, r3
 8001558:	d109      	bne.n	800156e <light_traffic_run+0x1ea>
 800155a:	4b14      	ldr	r3, [pc, #80]	; (80015ac <light_traffic_run+0x228>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b06      	cmp	r3, #6
 8001560:	d105      	bne.n	800156e <light_traffic_run+0x1ea>
		led_status_east_west = YELLOW_AUTO;
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <light_traffic_run+0x228>)
 8001564:	2207      	movs	r2, #7
 8001566:	601a      	str	r2, [r3, #0]
		count = 0;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <light_traffic_run+0x22c>)
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
	}
	if (count == time_yellow && led_status_east_west == YELLOW_AUTO) {
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <light_traffic_run+0x22c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	429a      	cmp	r2, r3
 8001576:	d109      	bne.n	800158c <light_traffic_run+0x208>
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <light_traffic_run+0x228>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b07      	cmp	r3, #7
 800157e:	d105      	bne.n	800158c <light_traffic_run+0x208>
		led_status_east_west = RED_AUTO;
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <light_traffic_run+0x228>)
 8001582:	2205      	movs	r2, #5
 8001584:	601a      	str	r2, [r3, #0]
		count = 0;
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <light_traffic_run+0x22c>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
	}

}
 800158c:	bf00      	nop
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200000d4 	.word	0x200000d4
 8001598:	200000c8 	.word	0x200000c8
 800159c:	200000cc 	.word	0x200000cc
 80015a0:	200000d8 	.word	0x200000d8
 80015a4:	200000c4 	.word	0x200000c4
 80015a8:	200000b8 	.word	0x200000b8
 80015ac:	200000d0 	.word	0x200000d0
 80015b0:	200000b4 	.word	0x200000b4

080015b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b8:	f000 f9f4 	bl	80019a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015bc:	f000 f812 	bl	80015e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c0:	f000 f898 	bl	80016f4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80015c4:	f000 f84a 	bl	800165c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 80015c8:	4805      	ldr	r0, [pc, #20]	; (80015e0 <main+0x2c>)
 80015ca:	f001 f949 	bl	8002860 <HAL_TIM_Base_Start_IT>
//HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,GPIO_PIN_SET);
//HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,GPIO_PIN_SET);
//updateClockBuffer(3, 5);
  while (1)
  {
	  fsm_automatic_run();
 80015ce:	f7ff f9af 	bl	8000930 <fsm_automatic_run>
      fsm_manual_run();
 80015d2:	f7ff fa5f 	bl	8000a94 <fsm_manual_run>
      fsm_setting_run();
 80015d6:	f7ff fb8d 	bl	8000cf4 <fsm_setting_run>
      fsm_save_value_run();
 80015da:	f7ff fb47 	bl	8000c6c <fsm_save_value_run>
	  fsm_automatic_run();
 80015de:	e7f6      	b.n	80015ce <main+0x1a>
 80015e0:	200000dc 	.word	0x200000dc

080015e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b090      	sub	sp, #64	; 0x40
 80015e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	f107 0318 	add.w	r3, r7, #24
 80015ee:	2228      	movs	r2, #40	; 0x28
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f001 fce4 	bl	8002fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001606:	2302      	movs	r3, #2
 8001608:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800160a:	2301      	movs	r3, #1
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800160e:	2310      	movs	r3, #16
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001612:	2300      	movs	r3, #0
 8001614:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001616:	f107 0318 	add.w	r3, r7, #24
 800161a:	4618      	mov	r0, r3
 800161c:	f000 fcf4 	bl	8002008 <HAL_RCC_OscConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001626:	f000 f8d5 	bl	80017d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162a:	230f      	movs	r3, #15
 800162c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f000 ff60 	bl	8002508 <HAL_RCC_ClockConfig>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800164e:	f000 f8c1 	bl	80017d4 <Error_Handler>
  }
}
 8001652:	bf00      	nop
 8001654:	3740      	adds	r7, #64	; 0x40
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001670:	463b      	mov	r3, r7
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001678:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <MX_TIM2_Init+0x94>)
 800167a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800167e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <MX_TIM2_Init+0x94>)
 8001682:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001686:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <MX_TIM2_Init+0x94>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <MX_TIM2_Init+0x94>)
 8001690:	2209      	movs	r2, #9
 8001692:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001694:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <MX_TIM2_Init+0x94>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <MX_TIM2_Init+0x94>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016a0:	4813      	ldr	r0, [pc, #76]	; (80016f0 <MX_TIM2_Init+0x94>)
 80016a2:	f001 f88d 	bl	80027c0 <HAL_TIM_Base_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016ac:	f000 f892 	bl	80017d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016b6:	f107 0308 	add.w	r3, r7, #8
 80016ba:	4619      	mov	r1, r3
 80016bc:	480c      	ldr	r0, [pc, #48]	; (80016f0 <MX_TIM2_Init+0x94>)
 80016be:	f001 fa0b 	bl	8002ad8 <HAL_TIM_ConfigClockSource>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016c8:	f000 f884 	bl	80017d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016cc:	2300      	movs	r3, #0
 80016ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016d4:	463b      	mov	r3, r7
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_TIM2_Init+0x94>)
 80016da:	f001 fbe3 	bl	8002ea4 <HAL_TIMEx_MasterConfigSynchronization>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016e4:	f000 f876 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200000dc 	.word	0x200000dc

080016f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fa:	f107 0308 	add.w	r3, r7, #8
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001708:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <MX_GPIO_Init+0xbc>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	4a28      	ldr	r2, [pc, #160]	; (80017b0 <MX_GPIO_Init+0xbc>)
 800170e:	f043 0304 	orr.w	r3, r3, #4
 8001712:	6193      	str	r3, [r2, #24]
 8001714:	4b26      	ldr	r3, [pc, #152]	; (80017b0 <MX_GPIO_Init+0xbc>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001720:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <MX_GPIO_Init+0xbc>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a22      	ldr	r2, [pc, #136]	; (80017b0 <MX_GPIO_Init+0xbc>)
 8001726:	f043 0308 	orr.w	r3, r3, #8
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <MX_GPIO_Init+0xbc>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	603b      	str	r3, [r7, #0]
 8001736:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED_Pin
 8001738:	2200      	movs	r2, #0
 800173a:	f647 01fc 	movw	r1, #30972	; 0x78fc
 800173e:	481d      	ldr	r0, [pc, #116]	; (80017b4 <MX_GPIO_Init+0xc0>)
 8001740:	f000 fc31 	bl	8001fa6 <HAL_GPIO_WritePin>
                          |LED_YELLOW_Pin|LED_GREEN_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D1_Pin
 8001744:	2200      	movs	r2, #0
 8001746:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800174a:	481b      	ldr	r0, [pc, #108]	; (80017b8 <MX_GPIO_Init+0xc4>)
 800174c:	f000 fc2b 	bl	8001fa6 <HAL_GPIO_WritePin>
                          |SEG_B1_Pin|SEG_C1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED_Pin
                           LED_YELLOW_Pin LED_GREEN_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED_Pin
 8001750:	f647 03fc 	movw	r3, #30972	; 0x78fc
 8001754:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_Pin|LED_GREEN_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001756:	2301      	movs	r3, #1
 8001758:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2302      	movs	r3, #2
 8001760:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 0308 	add.w	r3, r7, #8
 8001766:	4619      	mov	r1, r3
 8001768:	4812      	ldr	r0, [pc, #72]	; (80017b4 <MX_GPIO_Init+0xc0>)
 800176a:	f000 fa8b 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_A_Pin SEG_B_Pin SEG_C_Pin SEG_D1_Pin
                           SEG_E1_Pin SEG_F1_Pin SEG_G1_Pin SEG_D_Pin
                           SEG_E_Pin SEG_F_Pin SEG_G_Pin SEG_A1_Pin
                           SEG_B1_Pin SEG_C1_Pin */
  GPIO_InitStruct.Pin = SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D1_Pin
 800176e:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001772:	60bb      	str	r3, [r7, #8]
                          |SEG_E1_Pin|SEG_F1_Pin|SEG_G1_Pin|SEG_D_Pin
                          |SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|SEG_A1_Pin
                          |SEG_B1_Pin|SEG_C1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001774:	2301      	movs	r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2302      	movs	r3, #2
 800177e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	4619      	mov	r1, r3
 8001786:	480c      	ldr	r0, [pc, #48]	; (80017b8 <MX_GPIO_Init+0xc4>)
 8001788:	f000 fa7c 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 800178c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001790:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001796:	2301      	movs	r3, #1
 8001798:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179a:	f107 0308 	add.w	r3, r7, #8
 800179e:	4619      	mov	r1, r3
 80017a0:	4804      	ldr	r0, [pc, #16]	; (80017b4 <MX_GPIO_Init+0xc0>)
 80017a2:	f000 fa6f 	bl	8001c84 <HAL_GPIO_Init>

}
 80017a6:	bf00      	nop
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40010800 	.word	0x40010800
 80017b8:	40010c00 	.word	0x40010c00

080017bc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	timerRun();
 80017c4:	f000 f8ae 	bl	8001924 <timerRun>
	getKeyInput();
 80017c8:	f7fe ffb6 	bl	8000738 <getKeyInput>
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d8:	b672      	cpsid	i
}
 80017da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017dc:	e7fe      	b.n	80017dc <Error_Handler+0x8>
	...

080017e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_MspInit+0x5c>)
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	4a14      	ldr	r2, [pc, #80]	; (800183c <HAL_MspInit+0x5c>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6193      	str	r3, [r2, #24]
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_MspInit+0x5c>)
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <HAL_MspInit+0x5c>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	4a0e      	ldr	r2, [pc, #56]	; (800183c <HAL_MspInit+0x5c>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001808:	61d3      	str	r3, [r2, #28]
 800180a:	4b0c      	ldr	r3, [pc, #48]	; (800183c <HAL_MspInit+0x5c>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <HAL_MspInit+0x60>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	4a04      	ldr	r2, [pc, #16]	; (8001840 <HAL_MspInit+0x60>)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	40021000 	.word	0x40021000
 8001840:	40010000 	.word	0x40010000

08001844 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001854:	d113      	bne.n	800187e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <HAL_TIM_Base_MspInit+0x44>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <HAL_TIM_Base_MspInit+0x44>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	61d3      	str	r3, [r2, #28]
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <HAL_TIM_Base_MspInit+0x44>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	201c      	movs	r0, #28
 8001874:	f000 f9cf 	bl	8001c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001878:	201c      	movs	r0, #28
 800187a:	f000 f9e8 	bl	8001c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000

0800188c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <NMI_Handler+0x4>

08001892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001896:	e7fe      	b.n	8001896 <HardFault_Handler+0x4>

08001898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <MemManage_Handler+0x4>

0800189e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <BusFault_Handler+0x4>

080018a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <UsageFault_Handler+0x4>

080018aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr

080018c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr

080018ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d2:	f000 f8ad 	bl	8001a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <TIM2_IRQHandler+0x10>)
 80018e2:	f001 f809 	bl	80028f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200000dc 	.word	0x200000dc

080018f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <setTimer1>:
 */

#include "timer.h"
int timer1_counter = 0;
int timer1_flag = 0;
void setTimer1( int duration ){
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001904:	4a05      	ldr	r2, [pc, #20]	; (800191c <setTimer1+0x20>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800190a:	4b05      	ldr	r3, [pc, #20]	; (8001920 <setTimer1+0x24>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	200000bc 	.word	0x200000bc
 8001920:	200000c0 	.word	0x200000c0

08001924 <timerRun>:
void timerRun(){
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <timerRun+0x2c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	dd0b      	ble.n	8001948 <timerRun+0x24>
		timer1_counter --;
 8001930:	4b07      	ldr	r3, [pc, #28]	; (8001950 <timerRun+0x2c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	3b01      	subs	r3, #1
 8001936:	4a06      	ldr	r2, [pc, #24]	; (8001950 <timerRun+0x2c>)
 8001938:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <timerRun+0x2c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	dc02      	bgt.n	8001948 <timerRun+0x24>
			timer1_flag = 1;
 8001942:	4b04      	ldr	r3, [pc, #16]	; (8001954 <timerRun+0x30>)
 8001944:	2201      	movs	r2, #1
 8001946:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	200000bc 	.word	0x200000bc
 8001954:	200000c0 	.word	0x200000c0

08001958 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001958:	f7ff ffca 	bl	80018f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800195c:	480b      	ldr	r0, [pc, #44]	; (800198c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800195e:	490c      	ldr	r1, [pc, #48]	; (8001990 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001960:	4a0c      	ldr	r2, [pc, #48]	; (8001994 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001964:	e002      	b.n	800196c <LoopCopyDataInit>

08001966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800196a:	3304      	adds	r3, #4

0800196c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800196c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001970:	d3f9      	bcc.n	8001966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001972:	4a09      	ldr	r2, [pc, #36]	; (8001998 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001974:	4c09      	ldr	r4, [pc, #36]	; (800199c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001978:	e001      	b.n	800197e <LoopFillZerobss>

0800197a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800197a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800197c:	3204      	adds	r2, #4

0800197e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001980:	d3fb      	bcc.n	800197a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001982:	f001 faf9 	bl	8002f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001986:	f7ff fe15 	bl	80015b4 <main>
  bx lr
 800198a:	4770      	bx	lr
  ldr r0, =_sdata
 800198c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001990:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8001994:	08003014 	.word	0x08003014
  ldr r2, =_sbss
 8001998:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 800199c:	20000128 	.word	0x20000128

080019a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019a0:	e7fe      	b.n	80019a0 <ADC1_2_IRQHandler>
	...

080019a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <HAL_Init+0x28>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a07      	ldr	r2, [pc, #28]	; (80019cc <HAL_Init+0x28>)
 80019ae:	f043 0310 	orr.w	r3, r3, #16
 80019b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b4:	2003      	movs	r0, #3
 80019b6:	f000 f923 	bl	8001c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ba:	200f      	movs	r0, #15
 80019bc:	f000 f808 	bl	80019d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c0:	f7ff ff0e 	bl	80017e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40022000 	.word	0x40022000

080019d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_InitTick+0x54>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_InitTick+0x58>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 f93b 	bl	8001c6a <HAL_SYSTICK_Config>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00e      	b.n	8001a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b0f      	cmp	r3, #15
 8001a02:	d80a      	bhi.n	8001a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a04:	2200      	movs	r2, #0
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f000 f903 	bl	8001c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a10:	4a06      	ldr	r2, [pc, #24]	; (8001a2c <HAL_InitTick+0x5c>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e000      	b.n	8001a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000044 	.word	0x20000044
 8001a28:	2000004c 	.word	0x2000004c
 8001a2c:	20000048 	.word	0x20000048

08001a30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_IncTick+0x1c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_IncTick+0x20>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4413      	add	r3, r2
 8001a40:	4a03      	ldr	r2, [pc, #12]	; (8001a50 <HAL_IncTick+0x20>)
 8001a42:	6013      	str	r3, [r2, #0]
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	2000004c 	.word	0x2000004c
 8001a50:	20000124 	.word	0x20000124

08001a54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return uwTick;
 8001a58:	4b02      	ldr	r3, [pc, #8]	; (8001a64 <HAL_GetTick+0x10>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	20000124 	.word	0x20000124

08001a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a84:	4013      	ands	r3, r2
 8001a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9a:	4a04      	ldr	r2, [pc, #16]	; (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	60d3      	str	r3, [r2, #12]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	f003 0307 	and.w	r3, r3, #7
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	db0b      	blt.n	8001af6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	4906      	ldr	r1, [pc, #24]	; (8001b00 <__NVIC_EnableIRQ+0x34>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	095b      	lsrs	r3, r3, #5
 8001aec:	2001      	movs	r0, #1
 8001aee:	fa00 f202 	lsl.w	r2, r0, r2
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	e000e100 	.word	0xe000e100

08001b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	db0a      	blt.n	8001b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	490c      	ldr	r1, [pc, #48]	; (8001b50 <__NVIC_SetPriority+0x4c>)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	0112      	lsls	r2, r2, #4
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	440b      	add	r3, r1
 8001b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b2c:	e00a      	b.n	8001b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4908      	ldr	r1, [pc, #32]	; (8001b54 <__NVIC_SetPriority+0x50>)
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	3b04      	subs	r3, #4
 8001b3c:	0112      	lsls	r2, r2, #4
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	440b      	add	r3, r1
 8001b42:	761a      	strb	r2, [r3, #24]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000e100 	.word	0xe000e100
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	; 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f1c3 0307 	rsb	r3, r3, #7
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	bf28      	it	cs
 8001b76:	2304      	movcs	r3, #4
 8001b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	2b06      	cmp	r3, #6
 8001b80:	d902      	bls.n	8001b88 <NVIC_EncodePriority+0x30>
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3b03      	subs	r3, #3
 8001b86:	e000      	b.n	8001b8a <NVIC_EncodePriority+0x32>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43da      	mvns	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	43d9      	mvns	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	4313      	orrs	r3, r2
         );
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3724      	adds	r7, #36	; 0x24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bcc:	d301      	bcc.n	8001bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00f      	b.n	8001bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <SysTick_Config+0x40>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bda:	210f      	movs	r1, #15
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	f7ff ff90 	bl	8001b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <SysTick_Config+0x40>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bea:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <SysTick_Config+0x40>)
 8001bec:	2207      	movs	r2, #7
 8001bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	e000e010 	.word	0xe000e010

08001c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ff2d 	bl	8001a68 <__NVIC_SetPriorityGrouping>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c28:	f7ff ff42 	bl	8001ab0 <__NVIC_GetPriorityGrouping>
 8001c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	6978      	ldr	r0, [r7, #20]
 8001c34:	f7ff ff90 	bl	8001b58 <NVIC_EncodePriority>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff5f 	bl	8001b04 <__NVIC_SetPriority>
}
 8001c46:	bf00      	nop
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4603      	mov	r3, r0
 8001c56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff35 	bl	8001acc <__NVIC_EnableIRQ>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff ffa2 	bl	8001bbc <SysTick_Config>
 8001c78:	4603      	mov	r3, r0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b08b      	sub	sp, #44	; 0x2c
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c92:	2300      	movs	r3, #0
 8001c94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c96:	e148      	b.n	8001f2a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c98:	2201      	movs	r2, #1
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	69fa      	ldr	r2, [r7, #28]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	f040 8137 	bne.w	8001f24 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	4aa3      	ldr	r2, [pc, #652]	; (8001f48 <HAL_GPIO_Init+0x2c4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d05e      	beq.n	8001d7e <HAL_GPIO_Init+0xfa>
 8001cc0:	4aa1      	ldr	r2, [pc, #644]	; (8001f48 <HAL_GPIO_Init+0x2c4>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d875      	bhi.n	8001db2 <HAL_GPIO_Init+0x12e>
 8001cc6:	4aa1      	ldr	r2, [pc, #644]	; (8001f4c <HAL_GPIO_Init+0x2c8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d058      	beq.n	8001d7e <HAL_GPIO_Init+0xfa>
 8001ccc:	4a9f      	ldr	r2, [pc, #636]	; (8001f4c <HAL_GPIO_Init+0x2c8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d86f      	bhi.n	8001db2 <HAL_GPIO_Init+0x12e>
 8001cd2:	4a9f      	ldr	r2, [pc, #636]	; (8001f50 <HAL_GPIO_Init+0x2cc>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d052      	beq.n	8001d7e <HAL_GPIO_Init+0xfa>
 8001cd8:	4a9d      	ldr	r2, [pc, #628]	; (8001f50 <HAL_GPIO_Init+0x2cc>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d869      	bhi.n	8001db2 <HAL_GPIO_Init+0x12e>
 8001cde:	4a9d      	ldr	r2, [pc, #628]	; (8001f54 <HAL_GPIO_Init+0x2d0>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d04c      	beq.n	8001d7e <HAL_GPIO_Init+0xfa>
 8001ce4:	4a9b      	ldr	r2, [pc, #620]	; (8001f54 <HAL_GPIO_Init+0x2d0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d863      	bhi.n	8001db2 <HAL_GPIO_Init+0x12e>
 8001cea:	4a9b      	ldr	r2, [pc, #620]	; (8001f58 <HAL_GPIO_Init+0x2d4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d046      	beq.n	8001d7e <HAL_GPIO_Init+0xfa>
 8001cf0:	4a99      	ldr	r2, [pc, #612]	; (8001f58 <HAL_GPIO_Init+0x2d4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d85d      	bhi.n	8001db2 <HAL_GPIO_Init+0x12e>
 8001cf6:	2b12      	cmp	r3, #18
 8001cf8:	d82a      	bhi.n	8001d50 <HAL_GPIO_Init+0xcc>
 8001cfa:	2b12      	cmp	r3, #18
 8001cfc:	d859      	bhi.n	8001db2 <HAL_GPIO_Init+0x12e>
 8001cfe:	a201      	add	r2, pc, #4	; (adr r2, 8001d04 <HAL_GPIO_Init+0x80>)
 8001d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d04:	08001d7f 	.word	0x08001d7f
 8001d08:	08001d59 	.word	0x08001d59
 8001d0c:	08001d6b 	.word	0x08001d6b
 8001d10:	08001dad 	.word	0x08001dad
 8001d14:	08001db3 	.word	0x08001db3
 8001d18:	08001db3 	.word	0x08001db3
 8001d1c:	08001db3 	.word	0x08001db3
 8001d20:	08001db3 	.word	0x08001db3
 8001d24:	08001db3 	.word	0x08001db3
 8001d28:	08001db3 	.word	0x08001db3
 8001d2c:	08001db3 	.word	0x08001db3
 8001d30:	08001db3 	.word	0x08001db3
 8001d34:	08001db3 	.word	0x08001db3
 8001d38:	08001db3 	.word	0x08001db3
 8001d3c:	08001db3 	.word	0x08001db3
 8001d40:	08001db3 	.word	0x08001db3
 8001d44:	08001db3 	.word	0x08001db3
 8001d48:	08001d61 	.word	0x08001d61
 8001d4c:	08001d75 	.word	0x08001d75
 8001d50:	4a82      	ldr	r2, [pc, #520]	; (8001f5c <HAL_GPIO_Init+0x2d8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d013      	beq.n	8001d7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d56:	e02c      	b.n	8001db2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	623b      	str	r3, [r7, #32]
          break;
 8001d5e:	e029      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	3304      	adds	r3, #4
 8001d66:	623b      	str	r3, [r7, #32]
          break;
 8001d68:	e024      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	3308      	adds	r3, #8
 8001d70:	623b      	str	r3, [r7, #32]
          break;
 8001d72:	e01f      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	330c      	adds	r3, #12
 8001d7a:	623b      	str	r3, [r7, #32]
          break;
 8001d7c:	e01a      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d102      	bne.n	8001d8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d86:	2304      	movs	r3, #4
 8001d88:	623b      	str	r3, [r7, #32]
          break;
 8001d8a:	e013      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d105      	bne.n	8001da0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d94:	2308      	movs	r3, #8
 8001d96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69fa      	ldr	r2, [r7, #28]
 8001d9c:	611a      	str	r2, [r3, #16]
          break;
 8001d9e:	e009      	b.n	8001db4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001da0:	2308      	movs	r3, #8
 8001da2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69fa      	ldr	r2, [r7, #28]
 8001da8:	615a      	str	r2, [r3, #20]
          break;
 8001daa:	e003      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dac:	2300      	movs	r3, #0
 8001dae:	623b      	str	r3, [r7, #32]
          break;
 8001db0:	e000      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          break;
 8001db2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	2bff      	cmp	r3, #255	; 0xff
 8001db8:	d801      	bhi.n	8001dbe <HAL_GPIO_Init+0x13a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	e001      	b.n	8001dc2 <HAL_GPIO_Init+0x13e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2bff      	cmp	r3, #255	; 0xff
 8001dc8:	d802      	bhi.n	8001dd0 <HAL_GPIO_Init+0x14c>
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	e002      	b.n	8001dd6 <HAL_GPIO_Init+0x152>
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	3b08      	subs	r3, #8
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	210f      	movs	r1, #15
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	fa01 f303 	lsl.w	r3, r1, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	401a      	ands	r2, r3
 8001de8:	6a39      	ldr	r1, [r7, #32]
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	fa01 f303 	lsl.w	r3, r1, r3
 8001df0:	431a      	orrs	r2, r3
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 8090 	beq.w	8001f24 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e04:	4b56      	ldr	r3, [pc, #344]	; (8001f60 <HAL_GPIO_Init+0x2dc>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	4a55      	ldr	r2, [pc, #340]	; (8001f60 <HAL_GPIO_Init+0x2dc>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6193      	str	r3, [r2, #24]
 8001e10:	4b53      	ldr	r3, [pc, #332]	; (8001f60 <HAL_GPIO_Init+0x2dc>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e1c:	4a51      	ldr	r2, [pc, #324]	; (8001f64 <HAL_GPIO_Init+0x2e0>)
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	089b      	lsrs	r3, r3, #2
 8001e22:	3302      	adds	r3, #2
 8001e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	220f      	movs	r2, #15
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a49      	ldr	r2, [pc, #292]	; (8001f68 <HAL_GPIO_Init+0x2e4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d00d      	beq.n	8001e64 <HAL_GPIO_Init+0x1e0>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a48      	ldr	r2, [pc, #288]	; (8001f6c <HAL_GPIO_Init+0x2e8>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d007      	beq.n	8001e60 <HAL_GPIO_Init+0x1dc>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a47      	ldr	r2, [pc, #284]	; (8001f70 <HAL_GPIO_Init+0x2ec>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d101      	bne.n	8001e5c <HAL_GPIO_Init+0x1d8>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e004      	b.n	8001e66 <HAL_GPIO_Init+0x1e2>
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e002      	b.n	8001e66 <HAL_GPIO_Init+0x1e2>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <HAL_GPIO_Init+0x1e2>
 8001e64:	2300      	movs	r3, #0
 8001e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e68:	f002 0203 	and.w	r2, r2, #3
 8001e6c:	0092      	lsls	r2, r2, #2
 8001e6e:	4093      	lsls	r3, r2
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e76:	493b      	ldr	r1, [pc, #236]	; (8001f64 <HAL_GPIO_Init+0x2e0>)
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	089b      	lsrs	r3, r3, #2
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d006      	beq.n	8001e9e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e90:	4b38      	ldr	r3, [pc, #224]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	4937      	ldr	r1, [pc, #220]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	608b      	str	r3, [r1, #8]
 8001e9c:	e006      	b.n	8001eac <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e9e:	4b35      	ldr	r3, [pc, #212]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	4933      	ldr	r1, [pc, #204]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d006      	beq.n	8001ec6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001eb8:	4b2e      	ldr	r3, [pc, #184]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	492d      	ldr	r1, [pc, #180]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	60cb      	str	r3, [r1, #12]
 8001ec4:	e006      	b.n	8001ed4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ec6:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	4929      	ldr	r1, [pc, #164]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d006      	beq.n	8001eee <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ee0:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	4923      	ldr	r1, [pc, #140]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]
 8001eec:	e006      	b.n	8001efc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eee:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	491f      	ldr	r1, [pc, #124]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d006      	beq.n	8001f16 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f08:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4919      	ldr	r1, [pc, #100]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	600b      	str	r3, [r1, #0]
 8001f14:	e006      	b.n	8001f24 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f16:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	4915      	ldr	r1, [pc, #84]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	3301      	adds	r3, #1
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	fa22 f303 	lsr.w	r3, r2, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f47f aeaf 	bne.w	8001c98 <HAL_GPIO_Init+0x14>
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	bf00      	nop
 8001f3e:	372c      	adds	r7, #44	; 0x2c
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	10320000 	.word	0x10320000
 8001f4c:	10310000 	.word	0x10310000
 8001f50:	10220000 	.word	0x10220000
 8001f54:	10210000 	.word	0x10210000
 8001f58:	10120000 	.word	0x10120000
 8001f5c:	10110000 	.word	0x10110000
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40010000 	.word	0x40010000
 8001f68:	40010800 	.word	0x40010800
 8001f6c:	40010c00 	.word	0x40010c00
 8001f70:	40011000 	.word	0x40011000
 8001f74:	40010400 	.word	0x40010400

08001f78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	887b      	ldrh	r3, [r7, #2]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
 8001f94:	e001      	b.n	8001f9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	807b      	strh	r3, [r7, #2]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fb6:	787b      	ldrb	r3, [r7, #1]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fbc:	887a      	ldrh	r2, [r7, #2]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fc2:	e003      	b.n	8001fcc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fc4:	887b      	ldrh	r3, [r7, #2]
 8001fc6:	041a      	lsls	r2, r3, #16
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	611a      	str	r2, [r3, #16]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b085      	sub	sp, #20
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fe8:	887a      	ldrh	r2, [r7, #2]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4013      	ands	r3, r2
 8001fee:	041a      	lsls	r2, r3, #16
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	43d9      	mvns	r1, r3
 8001ff4:	887b      	ldrh	r3, [r7, #2]
 8001ff6:	400b      	ands	r3, r1
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	611a      	str	r2, [r3, #16]
}
 8001ffe:	bf00      	nop
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e26c      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 8087 	beq.w	8002136 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002028:	4b92      	ldr	r3, [pc, #584]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 030c 	and.w	r3, r3, #12
 8002030:	2b04      	cmp	r3, #4
 8002032:	d00c      	beq.n	800204e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002034:	4b8f      	ldr	r3, [pc, #572]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 030c 	and.w	r3, r3, #12
 800203c:	2b08      	cmp	r3, #8
 800203e:	d112      	bne.n	8002066 <HAL_RCC_OscConfig+0x5e>
 8002040:	4b8c      	ldr	r3, [pc, #560]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800204c:	d10b      	bne.n	8002066 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204e:	4b89      	ldr	r3, [pc, #548]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d06c      	beq.n	8002134 <HAL_RCC_OscConfig+0x12c>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d168      	bne.n	8002134 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e246      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206e:	d106      	bne.n	800207e <HAL_RCC_OscConfig+0x76>
 8002070:	4b80      	ldr	r3, [pc, #512]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a7f      	ldr	r2, [pc, #508]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	e02e      	b.n	80020dc <HAL_RCC_OscConfig+0xd4>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x98>
 8002086:	4b7b      	ldr	r3, [pc, #492]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a7a      	ldr	r2, [pc, #488]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 800208c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	4b78      	ldr	r3, [pc, #480]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a77      	ldr	r2, [pc, #476]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e01d      	b.n	80020dc <HAL_RCC_OscConfig+0xd4>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020a8:	d10c      	bne.n	80020c4 <HAL_RCC_OscConfig+0xbc>
 80020aa:	4b72      	ldr	r3, [pc, #456]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a71      	ldr	r2, [pc, #452]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	4b6f      	ldr	r3, [pc, #444]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a6e      	ldr	r2, [pc, #440]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e00b      	b.n	80020dc <HAL_RCC_OscConfig+0xd4>
 80020c4:	4b6b      	ldr	r3, [pc, #428]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a6a      	ldr	r2, [pc, #424]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	4b68      	ldr	r3, [pc, #416]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a67      	ldr	r2, [pc, #412]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d013      	beq.n	800210c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e4:	f7ff fcb6 	bl	8001a54 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ec:	f7ff fcb2 	bl	8001a54 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b64      	cmp	r3, #100	; 0x64
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e1fa      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fe:	4b5d      	ldr	r3, [pc, #372]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0xe4>
 800210a:	e014      	b.n	8002136 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7ff fca2 	bl	8001a54 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002114:	f7ff fc9e 	bl	8001a54 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e1e6      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002126:	4b53      	ldr	r3, [pc, #332]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x10c>
 8002132:	e000      	b.n	8002136 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d063      	beq.n	800220a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002142:	4b4c      	ldr	r3, [pc, #304]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00b      	beq.n	8002166 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800214e:	4b49      	ldr	r3, [pc, #292]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b08      	cmp	r3, #8
 8002158:	d11c      	bne.n	8002194 <HAL_RCC_OscConfig+0x18c>
 800215a:	4b46      	ldr	r3, [pc, #280]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d116      	bne.n	8002194 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002166:	4b43      	ldr	r3, [pc, #268]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d005      	beq.n	800217e <HAL_RCC_OscConfig+0x176>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d001      	beq.n	800217e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e1ba      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217e:	4b3d      	ldr	r3, [pc, #244]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4939      	ldr	r1, [pc, #228]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 800218e:	4313      	orrs	r3, r2
 8002190:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002192:	e03a      	b.n	800220a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d020      	beq.n	80021de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800219c:	4b36      	ldr	r3, [pc, #216]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 800219e:	2201      	movs	r2, #1
 80021a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a2:	f7ff fc57 	bl	8001a54 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021aa:	f7ff fc53 	bl	8001a54 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e19b      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021bc:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c8:	4b2a      	ldr	r3, [pc, #168]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4927      	ldr	r1, [pc, #156]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	600b      	str	r3, [r1, #0]
 80021dc:	e015      	b.n	800220a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021de:	4b26      	ldr	r3, [pc, #152]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7ff fc36 	bl	8001a54 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ec:	f7ff fc32 	bl	8001a54 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e17a      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fe:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d03a      	beq.n	800228c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d019      	beq.n	8002252 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800221e:	4b17      	ldr	r3, [pc, #92]	; (800227c <HAL_RCC_OscConfig+0x274>)
 8002220:	2201      	movs	r2, #1
 8002222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002224:	f7ff fc16 	bl	8001a54 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222c:	f7ff fc12 	bl	8001a54 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e15a      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800224a:	2001      	movs	r0, #1
 800224c:	f000 fa9a 	bl	8002784 <RCC_Delay>
 8002250:	e01c      	b.n	800228c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_RCC_OscConfig+0x274>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002258:	f7ff fbfc 	bl	8001a54 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225e:	e00f      	b.n	8002280 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002260:	f7ff fbf8 	bl	8001a54 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d908      	bls.n	8002280 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e140      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000
 8002278:	42420000 	.word	0x42420000
 800227c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002280:	4b9e      	ldr	r3, [pc, #632]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1e9      	bne.n	8002260 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80a6 	beq.w	80023e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229a:	2300      	movs	r3, #0
 800229c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800229e:	4b97      	ldr	r3, [pc, #604]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10d      	bne.n	80022c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022aa:	4b94      	ldr	r3, [pc, #592]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	4a93      	ldr	r2, [pc, #588]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80022b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b4:	61d3      	str	r3, [r2, #28]
 80022b6:	4b91      	ldr	r3, [pc, #580]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c2:	2301      	movs	r3, #1
 80022c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c6:	4b8e      	ldr	r3, [pc, #568]	; (8002500 <HAL_RCC_OscConfig+0x4f8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d118      	bne.n	8002304 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d2:	4b8b      	ldr	r3, [pc, #556]	; (8002500 <HAL_RCC_OscConfig+0x4f8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a8a      	ldr	r2, [pc, #552]	; (8002500 <HAL_RCC_OscConfig+0x4f8>)
 80022d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022de:	f7ff fbb9 	bl	8001a54 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e6:	f7ff fbb5 	bl	8001a54 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b64      	cmp	r3, #100	; 0x64
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e0fd      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f8:	4b81      	ldr	r3, [pc, #516]	; (8002500 <HAL_RCC_OscConfig+0x4f8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f0      	beq.n	80022e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d106      	bne.n	800231a <HAL_RCC_OscConfig+0x312>
 800230c:	4b7b      	ldr	r3, [pc, #492]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	4a7a      	ldr	r2, [pc, #488]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6213      	str	r3, [r2, #32]
 8002318:	e02d      	b.n	8002376 <HAL_RCC_OscConfig+0x36e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10c      	bne.n	800233c <HAL_RCC_OscConfig+0x334>
 8002322:	4b76      	ldr	r3, [pc, #472]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	4a75      	ldr	r2, [pc, #468]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	6213      	str	r3, [r2, #32]
 800232e:	4b73      	ldr	r3, [pc, #460]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	4a72      	ldr	r2, [pc, #456]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002334:	f023 0304 	bic.w	r3, r3, #4
 8002338:	6213      	str	r3, [r2, #32]
 800233a:	e01c      	b.n	8002376 <HAL_RCC_OscConfig+0x36e>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b05      	cmp	r3, #5
 8002342:	d10c      	bne.n	800235e <HAL_RCC_OscConfig+0x356>
 8002344:	4b6d      	ldr	r3, [pc, #436]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4a6c      	ldr	r2, [pc, #432]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	6213      	str	r3, [r2, #32]
 8002350:	4b6a      	ldr	r3, [pc, #424]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4a69      	ldr	r2, [pc, #420]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	6213      	str	r3, [r2, #32]
 800235c:	e00b      	b.n	8002376 <HAL_RCC_OscConfig+0x36e>
 800235e:	4b67      	ldr	r3, [pc, #412]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	4a66      	ldr	r2, [pc, #408]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	6213      	str	r3, [r2, #32]
 800236a:	4b64      	ldr	r3, [pc, #400]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	4a63      	ldr	r2, [pc, #396]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002370:	f023 0304 	bic.w	r3, r3, #4
 8002374:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d015      	beq.n	80023aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237e:	f7ff fb69 	bl	8001a54 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002384:	e00a      	b.n	800239c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002386:	f7ff fb65 	bl	8001a54 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	f241 3288 	movw	r2, #5000	; 0x1388
 8002394:	4293      	cmp	r3, r2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e0ab      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239c:	4b57      	ldr	r3, [pc, #348]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0ee      	beq.n	8002386 <HAL_RCC_OscConfig+0x37e>
 80023a8:	e014      	b.n	80023d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023aa:	f7ff fb53 	bl	8001a54 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b0:	e00a      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b2:	f7ff fb4f 	bl	8001a54 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e095      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c8:	4b4c      	ldr	r3, [pc, #304]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1ee      	bne.n	80023b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023d4:	7dfb      	ldrb	r3, [r7, #23]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d105      	bne.n	80023e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023da:	4b48      	ldr	r3, [pc, #288]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	4a47      	ldr	r2, [pc, #284]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 8081 	beq.w	80024f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f0:	4b42      	ldr	r3, [pc, #264]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d061      	beq.n	80024c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d146      	bne.n	8002492 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002404:	4b3f      	ldr	r3, [pc, #252]	; (8002504 <HAL_RCC_OscConfig+0x4fc>)
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7ff fb23 	bl	8001a54 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002412:	f7ff fb1f 	bl	8001a54 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e067      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002424:	4b35      	ldr	r3, [pc, #212]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f0      	bne.n	8002412 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002438:	d108      	bne.n	800244c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800243a:	4b30      	ldr	r3, [pc, #192]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	492d      	ldr	r1, [pc, #180]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800244c:	4b2b      	ldr	r3, [pc, #172]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a19      	ldr	r1, [r3, #32]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	430b      	orrs	r3, r1
 800245e:	4927      	ldr	r1, [pc, #156]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002464:	4b27      	ldr	r3, [pc, #156]	; (8002504 <HAL_RCC_OscConfig+0x4fc>)
 8002466:	2201      	movs	r2, #1
 8002468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246a:	f7ff faf3 	bl	8001a54 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002472:	f7ff faef 	bl	8001a54 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e037      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002484:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x46a>
 8002490:	e02f      	b.n	80024f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002492:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <HAL_RCC_OscConfig+0x4fc>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7ff fadc 	bl	8001a54 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a0:	f7ff fad8 	bl	8001a54 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e020      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b2:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x498>
 80024be:	e018      	b.n	80024f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e013      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d106      	bne.n	80024ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d001      	beq.n	80024f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40021000 	.word	0x40021000
 8002500:	40007000 	.word	0x40007000
 8002504:	42420060 	.word	0x42420060

08002508 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0d0      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800251c:	4b6a      	ldr	r3, [pc, #424]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d910      	bls.n	800254c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252a:	4b67      	ldr	r3, [pc, #412]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f023 0207 	bic.w	r2, r3, #7
 8002532:	4965      	ldr	r1, [pc, #404]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	4313      	orrs	r3, r2
 8002538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253a:	4b63      	ldr	r3, [pc, #396]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d001      	beq.n	800254c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0b8      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d020      	beq.n	800259a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002564:	4b59      	ldr	r3, [pc, #356]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4a58      	ldr	r2, [pc, #352]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800256e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800257c:	4b53      	ldr	r3, [pc, #332]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	4a52      	ldr	r2, [pc, #328]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002586:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002588:	4b50      	ldr	r3, [pc, #320]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	494d      	ldr	r1, [pc, #308]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002596:	4313      	orrs	r3, r2
 8002598:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d040      	beq.n	8002628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d107      	bne.n	80025be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ae:	4b47      	ldr	r3, [pc, #284]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d115      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e07f      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d107      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c6:	4b41      	ldr	r3, [pc, #260]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e073      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d6:	4b3d      	ldr	r3, [pc, #244]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e06b      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025e6:	4b39      	ldr	r3, [pc, #228]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f023 0203 	bic.w	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4936      	ldr	r1, [pc, #216]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025f8:	f7ff fa2c 	bl	8001a54 <HAL_GetTick>
 80025fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fe:	e00a      	b.n	8002616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002600:	f7ff fa28 	bl	8001a54 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	f241 3288 	movw	r2, #5000	; 0x1388
 800260e:	4293      	cmp	r3, r2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e053      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002616:	4b2d      	ldr	r3, [pc, #180]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 020c 	and.w	r2, r3, #12
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	429a      	cmp	r2, r3
 8002626:	d1eb      	bne.n	8002600 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002628:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d210      	bcs.n	8002658 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002636:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 0207 	bic.w	r2, r3, #7
 800263e:	4922      	ldr	r1, [pc, #136]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e032      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002664:	4b19      	ldr	r3, [pc, #100]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4916      	ldr	r1, [pc, #88]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	490e      	ldr	r1, [pc, #56]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	4313      	orrs	r3, r2
 8002694:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002696:	f000 f821 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 800269a:	4602      	mov	r2, r0
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	490a      	ldr	r1, [pc, #40]	; (80026d0 <HAL_RCC_ClockConfig+0x1c8>)
 80026a8:	5ccb      	ldrb	r3, [r1, r3]
 80026aa:	fa22 f303 	lsr.w	r3, r2, r3
 80026ae:	4a09      	ldr	r2, [pc, #36]	; (80026d4 <HAL_RCC_ClockConfig+0x1cc>)
 80026b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <HAL_RCC_ClockConfig+0x1d0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff f98a 	bl	80019d0 <HAL_InitTick>

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40022000 	.word	0x40022000
 80026cc:	40021000 	.word	0x40021000
 80026d0:	08002fe8 	.word	0x08002fe8
 80026d4:	20000044 	.word	0x20000044
 80026d8:	20000048 	.word	0x20000048

080026dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	2300      	movs	r3, #0
 80026f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026f6:	4b1e      	ldr	r3, [pc, #120]	; (8002770 <HAL_RCC_GetSysClockFreq+0x94>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b04      	cmp	r3, #4
 8002704:	d002      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x30>
 8002706:	2b08      	cmp	r3, #8
 8002708:	d003      	beq.n	8002712 <HAL_RCC_GetSysClockFreq+0x36>
 800270a:	e027      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800270c:	4b19      	ldr	r3, [pc, #100]	; (8002774 <HAL_RCC_GetSysClockFreq+0x98>)
 800270e:	613b      	str	r3, [r7, #16]
      break;
 8002710:	e027      	b.n	8002762 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	0c9b      	lsrs	r3, r3, #18
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	4a17      	ldr	r2, [pc, #92]	; (8002778 <HAL_RCC_GetSysClockFreq+0x9c>)
 800271c:	5cd3      	ldrb	r3, [r2, r3]
 800271e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d010      	beq.n	800274c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800272a:	4b11      	ldr	r3, [pc, #68]	; (8002770 <HAL_RCC_GetSysClockFreq+0x94>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	0c5b      	lsrs	r3, r3, #17
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	4a11      	ldr	r2, [pc, #68]	; (800277c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002736:	5cd3      	ldrb	r3, [r2, r3]
 8002738:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a0d      	ldr	r2, [pc, #52]	; (8002774 <HAL_RCC_GetSysClockFreq+0x98>)
 800273e:	fb02 f203 	mul.w	r2, r2, r3
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	fbb2 f3f3 	udiv	r3, r2, r3
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	e004      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a0c      	ldr	r2, [pc, #48]	; (8002780 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002750:	fb02 f303 	mul.w	r3, r2, r3
 8002754:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	613b      	str	r3, [r7, #16]
      break;
 800275a:	e002      	b.n	8002762 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800275c:	4b05      	ldr	r3, [pc, #20]	; (8002774 <HAL_RCC_GetSysClockFreq+0x98>)
 800275e:	613b      	str	r3, [r7, #16]
      break;
 8002760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002762:	693b      	ldr	r3, [r7, #16]
}
 8002764:	4618      	mov	r0, r3
 8002766:	371c      	adds	r7, #28
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000
 8002774:	007a1200 	.word	0x007a1200
 8002778:	08002ff8 	.word	0x08002ff8
 800277c:	08003008 	.word	0x08003008
 8002780:	003d0900 	.word	0x003d0900

08002784 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800278c:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <RCC_Delay+0x34>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <RCC_Delay+0x38>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	0a5b      	lsrs	r3, r3, #9
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	fb02 f303 	mul.w	r3, r2, r3
 800279e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027a0:	bf00      	nop
  }
  while (Delay --);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	1e5a      	subs	r2, r3, #1
 80027a6:	60fa      	str	r2, [r7, #12]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f9      	bne.n	80027a0 <RCC_Delay+0x1c>
}
 80027ac:	bf00      	nop
 80027ae:	bf00      	nop
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr
 80027b8:	20000044 	.word	0x20000044
 80027bc:	10624dd3 	.word	0x10624dd3

080027c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e041      	b.n	8002856 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d106      	bne.n	80027ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff f82c 	bl	8001844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3304      	adds	r3, #4
 80027fc:	4619      	mov	r1, r3
 80027fe:	4610      	mov	r0, r2
 8002800:	f000 fa56 	bl	8002cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b01      	cmp	r3, #1
 8002872:	d001      	beq.n	8002878 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e035      	b.n	80028e4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a16      	ldr	r2, [pc, #88]	; (80028f0 <HAL_TIM_Base_Start_IT+0x90>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d009      	beq.n	80028ae <HAL_TIM_Base_Start_IT+0x4e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a2:	d004      	beq.n	80028ae <HAL_TIM_Base_Start_IT+0x4e>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a12      	ldr	r2, [pc, #72]	; (80028f4 <HAL_TIM_Base_Start_IT+0x94>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d111      	bne.n	80028d2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2b06      	cmp	r3, #6
 80028be:	d010      	beq.n	80028e2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0201 	orr.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d0:	e007      	b.n	80028e2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f042 0201 	orr.w	r2, r2, #1
 80028e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40012c00 	.word	0x40012c00
 80028f4:	40000400 	.word	0x40000400

080028f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d020      	beq.n	800295c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d01b      	beq.n	800295c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0202 	mvn.w	r2, #2
 800292c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f998 	bl	8002c78 <HAL_TIM_IC_CaptureCallback>
 8002948:	e005      	b.n	8002956 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f98b 	bl	8002c66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f99a 	bl	8002c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b00      	cmp	r3, #0
 8002964:	d020      	beq.n	80029a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d01b      	beq.n	80029a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f06f 0204 	mvn.w	r2, #4
 8002978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2202      	movs	r2, #2
 800297e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f972 	bl	8002c78 <HAL_TIM_IC_CaptureCallback>
 8002994:	e005      	b.n	80029a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f965 	bl	8002c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f974 	bl	8002c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d020      	beq.n	80029f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d01b      	beq.n	80029f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f06f 0208 	mvn.w	r2, #8
 80029c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2204      	movs	r2, #4
 80029ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f94c 	bl	8002c78 <HAL_TIM_IC_CaptureCallback>
 80029e0:	e005      	b.n	80029ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f93f 	bl	8002c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f94e 	bl	8002c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d020      	beq.n	8002a40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01b      	beq.n	8002a40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f06f 0210 	mvn.w	r2, #16
 8002a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2208      	movs	r2, #8
 8002a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f926 	bl	8002c78 <HAL_TIM_IC_CaptureCallback>
 8002a2c:	e005      	b.n	8002a3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f919 	bl	8002c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f928 	bl	8002c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00c      	beq.n	8002a64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d007      	beq.n	8002a64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0201 	mvn.w	r2, #1
 8002a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fe feac 	bl	80017bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00c      	beq.n	8002a88 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d007      	beq.n	8002a88 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fa6f 	bl	8002f66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00c      	beq.n	8002aac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d007      	beq.n	8002aac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f8f8 	bl	8002c9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00c      	beq.n	8002ad0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f003 0320 	and.w	r3, r3, #32
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d007      	beq.n	8002ad0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0220 	mvn.w	r2, #32
 8002ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 fa42 	bl	8002f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_TIM_ConfigClockSource+0x1c>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e0b4      	b.n	8002c5e <HAL_TIM_ConfigClockSource+0x186>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b2c:	d03e      	beq.n	8002bac <HAL_TIM_ConfigClockSource+0xd4>
 8002b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b32:	f200 8087 	bhi.w	8002c44 <HAL_TIM_ConfigClockSource+0x16c>
 8002b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b3a:	f000 8086 	beq.w	8002c4a <HAL_TIM_ConfigClockSource+0x172>
 8002b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b42:	d87f      	bhi.n	8002c44 <HAL_TIM_ConfigClockSource+0x16c>
 8002b44:	2b70      	cmp	r3, #112	; 0x70
 8002b46:	d01a      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0xa6>
 8002b48:	2b70      	cmp	r3, #112	; 0x70
 8002b4a:	d87b      	bhi.n	8002c44 <HAL_TIM_ConfigClockSource+0x16c>
 8002b4c:	2b60      	cmp	r3, #96	; 0x60
 8002b4e:	d050      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0x11a>
 8002b50:	2b60      	cmp	r3, #96	; 0x60
 8002b52:	d877      	bhi.n	8002c44 <HAL_TIM_ConfigClockSource+0x16c>
 8002b54:	2b50      	cmp	r3, #80	; 0x50
 8002b56:	d03c      	beq.n	8002bd2 <HAL_TIM_ConfigClockSource+0xfa>
 8002b58:	2b50      	cmp	r3, #80	; 0x50
 8002b5a:	d873      	bhi.n	8002c44 <HAL_TIM_ConfigClockSource+0x16c>
 8002b5c:	2b40      	cmp	r3, #64	; 0x40
 8002b5e:	d058      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0x13a>
 8002b60:	2b40      	cmp	r3, #64	; 0x40
 8002b62:	d86f      	bhi.n	8002c44 <HAL_TIM_ConfigClockSource+0x16c>
 8002b64:	2b30      	cmp	r3, #48	; 0x30
 8002b66:	d064      	beq.n	8002c32 <HAL_TIM_ConfigClockSource+0x15a>
 8002b68:	2b30      	cmp	r3, #48	; 0x30
 8002b6a:	d86b      	bhi.n	8002c44 <HAL_TIM_ConfigClockSource+0x16c>
 8002b6c:	2b20      	cmp	r3, #32
 8002b6e:	d060      	beq.n	8002c32 <HAL_TIM_ConfigClockSource+0x15a>
 8002b70:	2b20      	cmp	r3, #32
 8002b72:	d867      	bhi.n	8002c44 <HAL_TIM_ConfigClockSource+0x16c>
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d05c      	beq.n	8002c32 <HAL_TIM_ConfigClockSource+0x15a>
 8002b78:	2b10      	cmp	r3, #16
 8002b7a:	d05a      	beq.n	8002c32 <HAL_TIM_ConfigClockSource+0x15a>
 8002b7c:	e062      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	6899      	ldr	r1, [r3, #8]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f000 f96a 	bl	8002e66 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ba0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	609a      	str	r2, [r3, #8]
      break;
 8002baa:	e04f      	b.n	8002c4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6818      	ldr	r0, [r3, #0]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	6899      	ldr	r1, [r3, #8]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f000 f953 	bl	8002e66 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bce:	609a      	str	r2, [r3, #8]
      break;
 8002bd0:	e03c      	b.n	8002c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	6859      	ldr	r1, [r3, #4]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	461a      	mov	r2, r3
 8002be0:	f000 f8ca 	bl	8002d78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2150      	movs	r1, #80	; 0x50
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 f921 	bl	8002e32 <TIM_ITRx_SetConfig>
      break;
 8002bf0:	e02c      	b.n	8002c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	6859      	ldr	r1, [r3, #4]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f000 f8e8 	bl	8002dd4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2160      	movs	r1, #96	; 0x60
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f911 	bl	8002e32 <TIM_ITRx_SetConfig>
      break;
 8002c10:	e01c      	b.n	8002c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	6859      	ldr	r1, [r3, #4]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	f000 f8aa 	bl	8002d78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2140      	movs	r1, #64	; 0x40
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 f901 	bl	8002e32 <TIM_ITRx_SetConfig>
      break;
 8002c30:	e00c      	b.n	8002c4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	f000 f8f8 	bl	8002e32 <TIM_ITRx_SetConfig>
      break;
 8002c42:	e003      	b.n	8002c4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
      break;
 8002c48:	e000      	b.n	8002c4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr

08002c78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr

08002c8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr

08002c9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr
	...

08002cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a2b      	ldr	r2, [pc, #172]	; (8002d70 <TIM_Base_SetConfig+0xc0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d007      	beq.n	8002cd8 <TIM_Base_SetConfig+0x28>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cce:	d003      	beq.n	8002cd8 <TIM_Base_SetConfig+0x28>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a28      	ldr	r2, [pc, #160]	; (8002d74 <TIM_Base_SetConfig+0xc4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d108      	bne.n	8002cea <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a20      	ldr	r2, [pc, #128]	; (8002d70 <TIM_Base_SetConfig+0xc0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d007      	beq.n	8002d02 <TIM_Base_SetConfig+0x52>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf8:	d003      	beq.n	8002d02 <TIM_Base_SetConfig+0x52>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a1d      	ldr	r2, [pc, #116]	; (8002d74 <TIM_Base_SetConfig+0xc4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d108      	bne.n	8002d14 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a0d      	ldr	r2, [pc, #52]	; (8002d70 <TIM_Base_SetConfig+0xc0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d103      	bne.n	8002d48 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d005      	beq.n	8002d66 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f023 0201 	bic.w	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	611a      	str	r2, [r3, #16]
  }
}
 8002d66:	bf00      	nop
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr
 8002d70:	40012c00 	.word	0x40012c00
 8002d74:	40000400 	.word	0x40000400

08002d78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	f023 0201 	bic.w	r2, r3, #1
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f023 030a 	bic.w	r3, r3, #10
 8002db4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	621a      	str	r2, [r3, #32]
}
 8002dca:	bf00      	nop
 8002dcc:	371c      	adds	r7, #28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	f023 0210 	bic.w	r2, r3, #16
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	031b      	lsls	r3, r3, #12
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e10:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	621a      	str	r2, [r3, #32]
}
 8002e28:	bf00      	nop
 8002e2a:	371c      	adds	r7, #28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr

08002e32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b085      	sub	sp, #20
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f043 0307 	orr.w	r3, r3, #7
 8002e54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	609a      	str	r2, [r3, #8]
}
 8002e5c:	bf00      	nop
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr

08002e66 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b087      	sub	sp, #28
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	60f8      	str	r0, [r7, #12]
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	607a      	str	r2, [r7, #4]
 8002e72:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e80:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	021a      	lsls	r2, r3, #8
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	609a      	str	r2, [r3, #8]
}
 8002e9a:	bf00      	nop
 8002e9c:	371c      	adds	r7, #28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e041      	b.n	8002f40 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a14      	ldr	r2, [pc, #80]	; (8002f4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d009      	beq.n	8002f14 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f08:	d004      	beq.n	8002f14 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a10      	ldr	r2, [pc, #64]	; (8002f50 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d10c      	bne.n	8002f2e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	40012c00 	.word	0x40012c00
 8002f50:	40000400 	.word	0x40000400

08002f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr

08002f66 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr

08002f78 <__libc_init_array>:
 8002f78:	b570      	push	{r4, r5, r6, lr}
 8002f7a:	2600      	movs	r6, #0
 8002f7c:	4d0c      	ldr	r5, [pc, #48]	; (8002fb0 <__libc_init_array+0x38>)
 8002f7e:	4c0d      	ldr	r4, [pc, #52]	; (8002fb4 <__libc_init_array+0x3c>)
 8002f80:	1b64      	subs	r4, r4, r5
 8002f82:	10a4      	asrs	r4, r4, #2
 8002f84:	42a6      	cmp	r6, r4
 8002f86:	d109      	bne.n	8002f9c <__libc_init_array+0x24>
 8002f88:	f000 f822 	bl	8002fd0 <_init>
 8002f8c:	2600      	movs	r6, #0
 8002f8e:	4d0a      	ldr	r5, [pc, #40]	; (8002fb8 <__libc_init_array+0x40>)
 8002f90:	4c0a      	ldr	r4, [pc, #40]	; (8002fbc <__libc_init_array+0x44>)
 8002f92:	1b64      	subs	r4, r4, r5
 8002f94:	10a4      	asrs	r4, r4, #2
 8002f96:	42a6      	cmp	r6, r4
 8002f98:	d105      	bne.n	8002fa6 <__libc_init_array+0x2e>
 8002f9a:	bd70      	pop	{r4, r5, r6, pc}
 8002f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa0:	4798      	blx	r3
 8002fa2:	3601      	adds	r6, #1
 8002fa4:	e7ee      	b.n	8002f84 <__libc_init_array+0xc>
 8002fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002faa:	4798      	blx	r3
 8002fac:	3601      	adds	r6, #1
 8002fae:	e7f2      	b.n	8002f96 <__libc_init_array+0x1e>
 8002fb0:	0800300c 	.word	0x0800300c
 8002fb4:	0800300c 	.word	0x0800300c
 8002fb8:	0800300c 	.word	0x0800300c
 8002fbc:	08003010 	.word	0x08003010

08002fc0 <memset>:
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	4402      	add	r2, r0
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d100      	bne.n	8002fca <memset+0xa>
 8002fc8:	4770      	bx	lr
 8002fca:	f803 1b01 	strb.w	r1, [r3], #1
 8002fce:	e7f9      	b.n	8002fc4 <memset+0x4>

08002fd0 <_init>:
 8002fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd2:	bf00      	nop
 8002fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fd6:	bc08      	pop	{r3}
 8002fd8:	469e      	mov	lr, r3
 8002fda:	4770      	bx	lr

08002fdc <_fini>:
 8002fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fde:	bf00      	nop
 8002fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fe2:	bc08      	pop	{r3}
 8002fe4:	469e      	mov	lr, r3
 8002fe6:	4770      	bx	lr
